<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CS Notebook]]></title>
  <link href="http://puncsky.github.com/atom.xml" rel="self"/>
  <link href="http://puncsky.github.com/"/>
  <updated>2012-11-28T05:21:36-05:00</updated>
  <id>http://puncsky.github.com/</id>
  <author>
    <name><![CDATA[Tian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[王功权先生给年轻人的四点建议]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/27/wang-gong-quan-jiang-zuo/"/>
    <updated>2012-11-27T16:34:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/27/wang-gong-quan-jiang-zuo</id>
    <content type="html"><![CDATA[<h3>概述</h3>

<p>方才在和朋友们一起去管理学院参加了王功权先生的讲座，期间做了一些笔记，稍作整理记录在此。王功权先生似乎并没有为这次演讲做过多的准备，也不愿意表现地太过正式，毕竟谈人生这种事情，还是需要明月夜短松冈这种微醺的情怀的。实际的情况可能是，他在从哥伦比亚大学过来的路上稍微用iPhone写了个提纲，讲述之前看了几眼，便开始侃侃而谈，当然，情到深处之时，还是让人颇有触动的，不愧为一位诗人。以下的记录纯属个人笔记，有我个人理解的偏差，并不能确保准确地反映王功权先生的观点，也不反映我自己的观点。</p>

<p>他讲述的这四点建议分别是：</p>

<ol>
<li>规划未来不如调整现在</li>
<li>志存高远</li>
<li>选择意味着放弃</li>
<li>在美国就业，在中国创业</li>
</ol>


<p>在其后的问答环节中，他回答同学们提出的两个问题：</p>

<ol>
<li>简要介绍您现在在哥伦比亚大学东亚研究所研究的“公民社会”这一议题？</li>
<li>对经济管理类毕业生就业领域选择有那些建议？</li>
</ol>


<!--more-->


<h3>规划未来不如调整现在</h3>

<p>首先，王功权先生非常谦虚地表示，外界对他们的评价说”有远见卓识“是不正确的，他从未有过非常长远的规划，很多次人生的重大转折都只是出于对现状有着强烈的不满，然后追随心意做出选择。另外，他在讲述的过程中更是反复强调，他认为他的道路不值得模仿。</p>

<p>在大学毕业步入省委机关宣传部四年后，他每天的生活非常平淡：处长和他同处一个办公室，两个人每天躲在报纸背后，偶尔四目相交，处长会和他谈论人生道理什么的，但是当时的他虽然表面上毕恭毕敬地聆听着，实际上只是看着领导的嘴一张一合。他从从处长那里看到自己将来的影子，对现状产生了强烈的恐惧，于是依然决然地辞职了。当时，为了怕自己后悔，他将辞职信一式五份投递到机关上下各部门，不给自己留任何退路。他向同学借了五百块便奔了去海南。后来因缘际会，受过八九牵连被关押、降过职，但无论做什么事情都兢兢业业，升职很快。后来，他不想因为一碗饭而丢失一位朋友，彻底离开体制内。</p>

<p>其后他和朋友白手起家一起创立海南农高投联合开发总公司（万通前身）。因为当时《公司法》还没有出来，直接给银行交纳七千块，便可托银行代理注册“初始资金上千万”的空壳公司。他感觉到不光荣，很尴尬，尽管假借时代的潮流，公司后来的发展一日千里。在与政府官员打交道的过程中，他又一次次地目睹了那些体制内现有的流弊。一开始送一条领带就能办成大事，后来送领带当然是远远不够的不够的。吃饭、搓澡也是必须的，甚至出现同一个饭桌开两场，同一个晚上搓澡三次的情况。因为当年受过关押，他认为即便把钱撕掉也不要给官员，坚守原则，从不行贿。</p>

<p>他再一次不愿意如是这般如履薄冰地生活，便辞职开始到硅谷担任IDG高技术创业投资基金高级合伙人，后来尽管获得了巨大的成功，可是功成名就之后感觉实在太忙，百忙之中抽空积累不少手稿，希望能够整理成书，于是意图退出创投领域。但是，这时候，他发现仅仅是自己投钱还不甘心，希望考量自己是否有募资的能力、是否能够赢得国际市场的信任，便接受恰好鼎晖投资的邀请，负责创办鼎晖创业投资基金，取得了不少成就。</p>

<p>再后来就发生了引起轩然大波的那次私奔事件……一时间遍尝人情冷暖、人世沧桑。最近一年多来，他在哥伦比亚大学东亚研究所研究“公民社会”。</p>

<p>最后他总结道，<strong>他从不在感觉不好的事情上停留，尽管这句话总是说起来容易做起来难</strong>。</p>

<h3>志存高远</h3>

<p>这里的<strong>志存高远并不是说要为国家、人类做多大的贡献，而仅仅是要看得远一点。每个人总会有那些“从前碌碌却因何？到如今，回头试想真无趣！”的体验。看得远一点，未来的自己就不会轻易地为现在短视的选择而后悔。</strong></p>

<p>走在时代车轮的前面有可能被轧死，走在时代车轮的后面有可能被弃死，走在时代车轮的上面有可能被摔死，紧跟时代车轮的旁边最合适。无论如何，只要个人脉搏与时代浪潮共鸣，无论成败，都是弄潮儿。</p>

<p>特别地，他表示为中国如此多的年轻人有志跻身公务员行列感到悲哀，因为在未来，政府精兵简政是时代的必然。</p>

<h3>选择意味着放弃</h3>

<p>选择一件事，就放弃了除这件事之外的所有东西。选择了科研就不要想赚钱，选择了创业就不要想过安稳的日子，选择了安稳就不要想一鸣惊人自己当老板。因为，<strong>打工练就的经验80%是对创业没用的</strong>，打工注重的是卓有成效地完成上级的任务，而“完成任务”是很难帮助回答创业者需要面对的最基本的三个问题的：</p>

<ol>
<li>我干什么？

<ul>
<li>自己决定去做资本正确的事情，而不是简单地完成任务。</li>
</ul>
</li>
<li>钱从哪来？

<ul>
<li>创业本身就是解决钱的问题。没有条件就要创造条件。</li>
</ul>
</li>
<li>谁跟我干？

<ul>
<li>怎么能让他们跟我干？</li>
</ul>
</li>
</ol>


<p>王先生并没有具体指导大家应该怎么做，但是他表示年轻人应该有着年轻人特有的朝气和豪气：<strong>拿青春赌明天，年轻就是资本。拿出五年来赌，五年后的情况不会比现在差。</strong>因为刚毕业，你本来就什么都没有……至于男生的个人问题，他表示<strong>没钱就不爱你的女生咱不要好吗？</strong></p>

<p>最后，他总结道，<strong>即便失败，也要会总结教训，尝试就是赢</strong>。失败，不是让你失去所有，而是让你学到“这样不对”。</p>

<h3>在美国就业在中国创业</h3>

<p>王先生首先强调，这里不是说党国好，只是无法否认的是，中国广袤的市场和机遇是其他土地无法比拟的。中国留学生在美国创业要比在中国困难很多。这里并不是建议大家毕业就回国，实际上，<strong>两到三年美国大机构的工作经验特别重要，teamwork的能力特别重要</strong>。</p>

<p>那么，在什么领域创业呢？<strong>走社会良性的道路，做能够创造真正价值的事业。</strong>人性本善，每个人的内心深处是有真善美的，公道自在人心。无论做什么，自己将来总是能够本能地意识到到现在的自己过去做得对不对。比如他自己就觉得自己私奔一场，羞于开口。</p>

<p>前一阵子有朋友邀请他加盟去重庆铸造中国最高的金融大厦，把重庆打造成金融中心。他反问道：重庆真的需要成为中国最高的金融大厦吗？重庆真的需要成为金融中心吗？中国真的需要一个新的金融中心吗？</p>

<h3>Q&amp;A</h3>

<h4>公民社会？</h4>

<p>中国政治体制转型是社会上下的、党内外的共识，不走邪路、不走老路，怎么走？不知道。山雨欲来风满楼。要改革，两条路：</p>

<ol>
<li>乱摸，总结教训 （摸着石头过河）</li>
<li>借鉴</li>
</ol>


<p>党的选择自然是第一点。虽然不知道怎么走，仍旧有一些共识：</p>

<ul>
<li>要稳定，不应该有暴力型的动乱 （跳出 暴力-轮回）</li>
<li>改革党和国家的领导体制（温总理），这是宪法层面的问题，<strong>宪政民主</strong></li>
<li>不改造政治文化，所以有<strong>公民社会</strong>的议题，维护公民权利，约束政府的权利</li>
<li>不反对党，党内外一致反对的是专制。开放党 禁很难，但可以通过民众推动政府改革</li>
</ul>


<p>公民社会强调社会化管理，强调NGO组织在社会管理中的作用，它既不属于政府，也不属于追求盈利的私人。具体案例非常复杂，王先生没有细讲，但是他很高兴地看到，在广东，NGO已经可以不再强制需要挂靠上级主管部门了。</p>

<h4>年轻人在创业/就业领域选择？</h4>

<p>王先生表示，要慎重进入对权利比较依赖的部门，特权/权力的削弱是大的趋势，大型国企很可能在将来会被解构。年轻人最好依赖市场竞争而不是国家权力，要进入出于蓝海的领域，比如教育、医疗。</p>

<p>至于房地产，房地产行业与城市人口增多是最直接的线性相关的，不管土地财政依赖不依赖，不管政府政策调控不调控。只要有大量的人口涌进城市，城市房地产就会兴旺。</p>

<p>至于私募股权基金，私募股权基金不是主流产品，在中国之所以火爆，是因为媒体抄得火爆。实际上其中的竞争是非常激烈的，对于青年来说是极其危险的。这个行业只适合经验丰富的人。年轻人就牛皮哄哄地做这个行业，天天跟老总打交道，四处找错，这样不好。当然，如果有应届毕业生有志进入这个领域，他也欢迎，因为是金子总会发光 ：D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CryptDB: Protecting Confidentiality with Encrypted Query Processing]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/26/cryptdb/"/>
    <updated>2012-11-26T19:45:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/26/cryptdb</id>
    <content type="html"><![CDATA[<p><a href="http://css.csail.mit.edu/cryptdb/">MIT CSAIL</a>, <a href="http://people.csail.mit.edu/nickolai/papers/raluca-cryptdb.pdf">papers</a>, <a href="http://www.sigops.org/sosp/sosp11/current/2011-Cascais/07-popa.pptx">slides</a></p>

<h3>1. Problem</h3>

<p>Provide confidentiality for applications using DBMSes to solve two threats:</p>

<ol>
<li>The curious database administrator (DBA) learns private data.</li>
<li>The adversary gains complete control over application and DBMS servers.</li>
</ol>


<h3>2. Challenges</h3>

<ol>
<li>Tension between confidentiality and efficiency.

<ul>
<li>too slow or not enough confidentiality</li>
<li>incapable of executing SQL queries without giving keys to DBMS servers</li>
</ul>
</li>
<li>Minimizing data leakage when both application servers and DBMS servers are compromised.

<ul>
<li>can be solved by different keys for different users. However, it is not suitable for user-shared data.</li>
</ul>
</li>
</ol>


<h3>3. Solutions</h3>

<p>Architecture Overview</p>

<p><img src="http://puncsky.github.com/images/arc.png" alt="architecture overview" /></p>

<p>SQL-aware encryption strategy with symmetric-key encryption (for efficiency). The basic idea is to design different ways of encryption for different sets of SQL queries. Of course, they are in different levels of security.</p>

<h4>6 types of SQL-aware encryption</h4>

<ol>
<li>Random (RND)

<ul>
<li>support indistinguishability under an adaptive chosen-plaintext attack (IND-CPA), same plain texts -> different cipher texts</li>
<li>AES / Blowfish in CBC mode, a random initialization vector (IV)</li>
</ul>
</li>
<li>Deterministic (DET)

<ul>
<li>support equality checks, same plain texts -> same cipher texts</li>
<li>different keys for different columns to prevent cross-column correlations</li>
<li>Pseudo-random permutation (PRP), Blowfish for 64-bit block, AES for 128-bit block</li>
<li>AES in CMC mode (= one round of CBC + another round of CBC in reverse order), zero IV. (to prevent leakage of prefix equality in CBC mode)</li>
</ul>
</li>
<li>Order-preserving (OPE)

<ul>
<li>support order relations. If x &lt; y, then OPEk(x) &lt; OPEk(y) for any secret key K.</li>
<li>Weaker. Thus, OPE-encrypted columns are revealed to the server only when the order query is needed.</li>
<li>Implementation and optimization of <a href="http://www.cc.gatech.edu/~aboldyre/papers/bclo.pdf">Order-preserving symmetric encryption</a>. Use AVL BST for batch encryption. 25 ms/encryption -> 7 ms/encryption</li>
</ul>
</li>
<li>Homomorphic encryption(HOM)

<ul>
<li>retains IND-CPA while allows computations to be conducted on ciphertext and obtain an encrypted result which is the ciphertext of the result of operations performed on the plaintext.</li>
<li>UDF calling Paillier crytosystem</li>
<li>e.g. SUM: HOMk(x)*HOMk(y)=HOMk(x+y)</li>
</ul>
</li>
<li>Join (JOIN and OPE-JOIN)

<ul>
<li>support joins between two columns (because of DET)</li>
</ul>
</li>
<li>Word search (SEARCH)

<ul>
<li>support LIKE operation</li>
<li>A new implementation of the protocol from <a href="http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=848445">Practical Techniques for Searches on Encrypted Data</a></li>
<li>Proxy

<ol>
<li>split texts to keywords</li>
<li>remove repetitions</li>
<li>randomly permute the positions of the words</li>
<li>encrypt each of the words</li>
<li>paddle each word to the same size</li>
<li>send the encrypted words to the server as a token</li>
</ol>
</li>
<li>Server can only know whether the token matches.</li>
</ul>
</li>
</ol>


<h4>Adjustable query-based encryption</h4>

<p>However, the query set is not always known in advance. So we need to dynamically pick up a layer of SQL-aware encryption scheme for queries at runtime. <strong>Onions of encryption</strong>: different keys for different layers of onions. The proxy does not give all keys to the server at any time.</p>

<ul>
<li>Encrypt data in one or more onions</li>
<li>Multiple onions are needed in practice</li>
<li>Same key for encrypting values in the same column (Threat 1)</li>
<li>Different keys for different rows in the same column (Threat 2)</li>
<li>Different keys across tables, columns, onions, and onion layers</li>
<li>All keys are derived from master key (MK)</li>
<li>Onion decryption happens only when operations on a column are required</li>
<li>Once a layer of decryption happens, the layer remains its new state</li>
</ul>


<p>K t,c,o,l = PRP MK(t, c, o, l)</p>

<pre><code>// DECRYPT_RND UDF in server:
UPDATE Table1 SET
    C2-Ord = DECRYPT_RND(K, C2-Ord, C2-IV)
// Proxy's internal state updates itself to remember that 
// C2-Ord in Table1 is at layer OPE now
</code></pre>

<h4>Execute SQL queries over encrypted data</h4>

<h4>Chain encryption keys to user passwords</h4>

<p>If the adversary do not know the user&#8217;s password, the adversary cannot decrypt the user&#8217;s data.</p>

<h3>4. Evaluation</h3>

<h3>5. Conclusion</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何阅读一篇论文？]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/21/ru-he-yue-du-%5B%3F%5D-pian-lun-wen-%3F/"/>
    <updated>2012-11-21T16:15:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/21/ru-he-yue-du-[?]-pian-lun-wen-?</id>
    <content type="html"><![CDATA[<p>阅读是人生的终极命题之一。人生苦短，我们需要阅读来继承前人的衣钵，我们需要笔记来对抗过往的遗忘，我们需要写作来连接自我和人世沧桑。</p>

<p>那么，<a href="http://blizzard.cs.uwaterloo.ca/keshav/home/Papers/data/07/paper-reading.pdf">如何最高效地阅读一篇论文呢？</a></p>

<p>如同任何一个学习过程，读论文的周期显然是螺旋向上的，可以划分为简单的三板斧：</p>

<!--more-->


<h3>1. 略读</h3>

<p>五到十分钟的快速略读：</p>

<ol>
<li>题目，摘要，介绍</li>
<li>各部分的标题</li>
<li>如果有数学式子，大致了解有什么样的理论基础</li>
<li>结论</li>
<li>标出引用中度过的文献</li>
</ol>


<p>此时回答下列五个C：</p>

<ol>
<li>类别Category: A measurement paper? An analysis of an existing system? A description of a research prototype?</li>
<li>背景Context: Related papers? Theoretical bases?</li>
<li>正确？Correctness: Valid assumptions?</li>
<li>贡献Contributions.</li>
<li>清楚？Clarify. Well-written?</li>
</ol>


<p>此时，可以据此进一步决定该文章是否值得打印出来细看。相应的，自己写论文的时候如果给这些部分写得不出彩，也就不会被人关注到。</p>

<h3>2. 选读</h3>

<p>一个小时的选读，就像GRE阅读那样，只读关键的主干，不要读细节，比如证据、例子什么的。批注关键点、评论、或者自己不懂的地方。细读图表，标注相关阅读文献。</p>

<p>如果此时还是不懂这篇论文在说什么，有三种选择：</p>

<ol>
<li>算了，这篇文章对我将来没帮助</li>
<li>认了，大侠过两天重新读过，不过是充点背景知识先</li>
<li>拼了，进入第三阶段</li>
</ol>


<h3>3. 重现</h3>

<p>四到五小时的重现：自己基于作者的假设会怎么解决这个问题？将自己的解决过程和作者的过程一一比较，就能够发现两者各自的优缺点。</p>

<h3>后话</h3>

<p>这三个步骤并不一定是连在一起的，通常的情况是，拿着一堆论文先走第一步，几个星期后走第二部，再几个星期或者几个月后走第三步。当然，如果是赶进度的话，就甭想这么闲了 :P</p>

<p>总而言之，想要一口吃掉一篇论文似乎是很难的事情，我们需要反复咀嚼，这也是为什么我要写不完整的阅读笔记的原因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HadoopDB: an architectural hybrid of MapReduce and DBMS technologies for analytical workloads (VLDB '09)]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/20/hadoopdb-an-architectural-hybrid-of-mapreduce-and-dbms-technologies-for-analytical-workloads-vldb-09/"/>
    <updated>2012-11-20T16:20:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/20/hadoopdb-an-architectural-hybrid-of-mapreduce-and-dbms-technologies-for-analytical-workloads-vldb-09</id>
    <content type="html"><![CDATA[<p><a href="http://db.cs.yale.edu/hadoopdb/">Yale DB</a></p>

<h3>1. Problem</h3>

<p>Large analytical data management (OLAP) with commodity clusters</p>

<h3>2. Challenges</h3>

<ul>
<li>Performance and efficiency

<ul>
<li>hadoop

<ul>
<li>is not for structured data analysis</li>
<li>scale well</li>
<li>open source, without cost</li>
</ul>
</li>
</ul>
</li>
<li>scalability, fault-tolerance, and flexibility

<ul>
<li>Previous parallel db fit into tens of nodes, not thousand of nodes.</li>
<li>not scale well for failures, heterogeneous machines, performance untested</li>
</ul>
</li>
</ul>


<h3>3. Solutions</h3>

<ul>
<li>MapReduce (Hadoop) + parallel db (or single-node DBs) = HadoopDB<!--more-->

<ul>
<li>Translation layer: Hive</li>
<li>Communication layer: Hadoop</li>
<li>Database layer: PostgreSQL (or MySQL, &#8230; JDBC)</li>
</ul>
</li>
<li><p>Components</p>

<ol>
<li>Database Connector

<ul>
<li>Interface among dbs on nodes</li>
<li>extends InputFormat class -> InputFormat Implementation lib</li>
<li>JDBC-complaint</li>
</ul>
</li>
<li>Catalog

<ul>
<li>metainformation as XML = connection para + metadata</li>
</ul>
</li>
<li>Data Loader

<ul>
<li>Global Hasher: MR, repartition raw data from HDFS to NO. of nodes</li>
<li>Local Hasher: copy from HDFS, repartition the partition into chunks</li>
<li>Better load balance than Hadoop</li>
</ul>
</li>
<li>SQL - MR - SQL (SMS) Planner

<ul>
<li>extend Hive for</li>
<li>open and low cost</li>
<li>each table stored separately in HDFS, low performance in multi-table trans.
intercept normal Hive flow in</li>
<li>update MetaStore before query execution</li>
<li>between query plan generation and MR jobs
retrieve fields, determine partition keys</li>
</ul>


<p>   traverse DAG bottom-up</p>

<p> only support filter, select, aggregation</p></li>
</ol>
</li>
<li><p>Extend performance [23] with fault tolerance and heterogeneous node exp</p>

<p>  TODO: modify the current task scheduler, connect not straggler node but the replicas.</p>

<p>  Exp on EC2, Hadoop, HadoopDB, Vertica, DBMS-X</p></li>
</ul>


<h3>4. Conclusion</h3>

<ul>
<li>HadoopDB&#8217;s performance &lt; parallel db for

<ul>
<li>PostgreSQL (not column-store, not compression)</li>
<li>Hadoop and Hive are young</li>
</ul>
</li>
<li>performance, heterogeneous environ., fault tolerance, flexibility</li>
</ul>


<h3>Related Readings</h3>

<p>[23] A Comparison of Approaches to Large Scale Data Analysis</p>

<p>[6] Scope [11] Hive [24] C-store [4] What is the right way to measure scale?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reliable Client Accounting for P2P-Infrastructure Hybrids (NSDI '12)]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/20/reliable-client-accounting-for-p2p-infrastructure-hybrids-nsdi-12/"/>
    <updated>2012-11-20T16:16:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/20/reliable-client-accounting-for-p2p-infrastructure-hybrids-nsdi-12</id>
    <content type="html"><![CDATA[<p><a href="http://www.mpi-sws.org/~paditya/">MPI-SWS</a>, UPenn, Duke, Akamai, <a href="http://www.mpi-sws.org/~paditya/papers/rca-nsdi2012.pdf">paper</a>, <a href="https://www.usenix.org/sites/default/files/conference/protected-files/nsdi12_reliable_client_accounting_for_p2p-infrastructure_hybrids.pdf">slides</a>, <a href="https://www.usenix.org/conference/nsdi12/reliable-client-accounting-hybrid-content-distribution-networks">video</a></p>

<h2>1. Problems</h2>

<p>Hybrid (Servers with assisting peers) designs in CDNs -> malicious clients can cause significant accounting inaccuracies.</p>

<h2>2. Challenges</h2>

<p>Infrastructure can not control P2P communications by malicious clients (peers). Even if infrastructure provides signed metadata and fallback (so content can not be mishandled by peers), there are still:</p>

<ul>
<li>Affect service quality</li>
<li>Misreport P2P transfers</li>
</ul>


<p>For example, inflation attack occurred for a fake download report.</p>

<h2>3. Solutions</h2>

<p>Reliable Client Accounting (RCA)</p>

<!--more-->


<p>Clients keep logs of network activity and upload them to the infrastructure periodically. The infrastructure collects logs, verifies them, and isolate suspicious nodes.</p>

<h3>1. Record client activities reliably</h3>

<p>Tamper evident logging: log recording sending/receiving history forms hash chains. Every massages contains a signature (authenticator) from its sender (O(# of messages)). -> Later, RCA only records authenticators for clients (O(# of pairs)).</p>

<h3>2. Identify misbehaving/suspicious clients</h3>

<p>By accounting the logs, infrastructure can find clients unilaterally claim fake downloads.</p>

<p>As to malicious client software:</p>

<p>What if bad clients do not follow the above steps (e.g. do not keep logs and serve bad content)? Simplify NetSession protocol to a state machine. Rules are manually set to identify bad logs not following the them.</p>

<p>What if many clients collude to cheat? It is difficult in practice (infrastructure assigns peers), but can still be found by statistical checks.</p>

<p>As to malicious users:</p>

<p>What if a user repeatedly downloading content to drive up demand? (can be amplified by Sybil attack) Statistical checks, too.</p>

<h3>3. Handle misbehavior without affecting service quality</h3>

<p>Blacklist and quarantine bad clients.</p>

<h2>4. Conclusions</h2>

<p>Since infrastructure cannot observe P2P communication, accounting is vulnerable to malicious clients (peers) in a hybrid design of CDN, e.g. inflation attacks. So the authors advance RCA to 1) keep tamper-evident logs and set rules for fixed state machines 2) perform statistical analysis on collected logs. Malicious clients can be detected and isolated effectively by RCA. The evaluation with real world Akamai NetSession shows that overhead is reasonable &lt;= 0.5%.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards Statistical Queries over Distributed Private User Data (NSDI '12)]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/20/towards-statistical-queries-over-distributed-private-user-data-nsdi-12/"/>
    <updated>2012-11-20T16:13:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/20/towards-statistical-queries-over-distributed-private-user-data-nsdi-12</id>
    <content type="html"><![CDATA[<p>From <a href="https://sites.google.com/site/ruichuanc/">MPI-SWS, Germany</a>, <a href="https://73aab115-a-62cb3a1a-s-sites.googlegroups.com/site/ruichuanc/pddp-nsdi12.pdf?attachauth=ANoY7cqTHmW8qn2UrCjxk0u-eafRsp77w2XtpG9QdnY9nOnDKkELrYiH-RrOI2ILFnQUv6gt-oz_ek1DA8q7TptjvCEWWWpT02huRCgNYXW-bUNQwjJjM0DLN7tiJzOKD509vt1JhOZ_fHQ_rijDX5Dhh3Bx1pdZotJp7mDbCw0yrcSTYEfbXAuzkZK2zDxfRKYzZXww-dESgY9wquSilSiX3ZrPYrATOg%3D%3D&amp;attredirects=0">paper</a> and <a href="https://www.usenix.org/sites/default/files/conference/protected-files/pddp-talk-nsdi12.pdf">slides</a></p>

<h2>1. Problem</h2>

<p>To protect user privacy in distributed systems from leaking by statistical queries.</p>

<h2>2. Challenges</h2>

<p>The most direct solutions are</p>

<ol>
<li><p>to <strong>anonymize + add noise</strong> to <em>user data</em>.</p>

<p> [-] utility, de-anonymize</p></li>
<li><p>differential privacy. add noise to <em>answer of queries</em>.</p>

<p> [-] scale, churn tolerance, malicious client</p></li>
</ol>


<h2>3. Solution </h2>

<p>PDDP: Practical Distributed Differential Privacy.</p>

<!--more-->


<ul>
<li>Binary answer in bucket. The query result should not be distorted by the client arbitrarily.</li>
<li>Blind noise addition. The Malicious should not be trusted. Private data are controlled by its user only.</li>
</ul>


<h3>3.1 Assumption</h3>

<p>Clients and analysts are potentially malicious. Proxy is HbC (honest but curious) and should not have access to noise-free result.</p>

<h3>3.2 Work Flow</h3>

<ol>
<li><p>Query Initialization(Analyst -> Proxy)</p></li>
<li><p>Query Forwarding (Proxy -> Client)</p></li>
<li><p>Client Respond (Client -> Proxy)</p>

<p>answers are encrypted with the analyst&#8217;s public key.</p></li>
<li><p>Differential Private Noise Addition.</p>

<p>collaborative coin generation with a GM cryptosystem. Unbiased proxy flip encrypted coins from clients randomly and thus transform them into unbiased ones. Coins serve as DP noises.</p></li>
<li><p>Noisy Answers to Analyst ( Proxy -> Analyst)</p></li>
</ol>


<h3>3.3 Implementation and Deployment</h3>

<p>600+ Client = Firefox add-on + SQLite</p>

<p>Proxy = Tomcat web service + MySQL</p>

<p>Analyst = Java program</p>

<h1>4. Conclusion</h1>

<p>The authors achieve scalable, churn-tolerant user privacy against malicious analyst and clients by</p>

<ol>
<li>making a trade off between utility and privacy. (differential privacy)</li>
<li>introduce distributed system to traditionally centralized differential privacy environment. (distributed)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Papers Review about Deterministic Parallelism]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/20/three-papers-review-about-deterministic-parallelism/"/>
    <updated>2012-11-20T16:10:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/20/three-papers-review-about-deterministic-parallelism</id>
    <content type="html"><![CDATA[<p><a href="http://dedis.cs.yale.edu/2010/det/">Yale Dedis</a></p>

<h3>1. Efficient System-Enforced Deterministic Parallelism (OSDI’10)</h3>

<p>Parallelism introduces 1) non-determinism and 2) data races (heisenbugs). Determinism means that a given input always produces the same output. In other words, input alone determines the output, regardless of extrinsic events such as the OS’s thread scheduling.</p>

<p>To achieve determinism,<!--more--> Determinator, an OS offering a programming model that is naturally and pervasively deterministic, is introduced. Its private workspace model solves data races in the first place, and the model is deterministic at all levels of abstraction. Like a version control system, this model gives a thread a private replica of all the state and the thread operate within its private state but could not interact directly with other threads until reconcile. At this time, write-write races become conflicts and determinator would throw an exception when main thread joins them.</p>

<p>In terms of implementation, determinator takes an arbitrarily deep hierarchy of spaces, consisting of CPU register state and private virtual memory. The space is like a single-threaded process but different from the concepts of process and thread. Interaction is allowed only for the space’s parent and child spaces via put, get and return three system calls. It could be applied to multiprocessor/multicore system and also multiple nodes in a homogeneous cluster. In high level abstractions, it emulates traditional fork/exec/wait APIs, and shared state abstractions with no physical state sharing, which involves Distributed Shared Memory techniques. Its runtime maintains a complete file system replica in the address space of each process, with the copy-on-write mechanism. The runtime treats I/O as a special case of file system synchronization for the reason of space hierarchy.</p>

<p>Determinator is written in C with small assembly fragments. PIOS is a subset of it, and the former is partly derived from MIT’s JOS.</p>

<p>Since determinator is a primitive proof-of-concepts prototype, it inevitably has some limitations:</p>

<ol>
<li>A restrictive space hierarchy -> a performance bottleneck for I/O-bound applications     AND no support for non-hierarchical synchronization, queue, future</li>
<li>Limited address space -> limited file system size</li>
<li>No focus on file system -> no persistent storage</li>
<li>Inefficient cross-node communication: no prefetching or other optimization, Eternet only.</li>
</ol>


<h3>2. Workspace Consistency: A Programming Model for Shared Memory Parallelism (WoDet ‘11)</h3>

<p>To address the 1st limitation, Workspace Consistency: A Programming Model for Shared Memory Parallelism extends WC from OSDI’10 version of hierarchical structure to a more generalized non-hierarchical structure. It supports non-hierarchical synchronization patterns (dynamic producer/consumer graphs and inter-thread queues), besides hierarchical synchronization patterns such as fork/join and barrier. WC highlights matched release/acquire pairs, adding three constrains to Release Consistency (RC):</p>

<ol>
<li>Release/acquire pair is unique.</li>
<li>One thread’s writes is not visible to another thread’s read until sync.</li>
<li>Data races are handled by throwing a runtime exception or other deterministic ways.</li>
</ol>


<p>Two prototypes: one on Linux, one on Determinator, both supporting only hierarchical synchronization patterns.</p>

<p>This generalized WC extends Determinator’s virtual memory system to support a Single Producer Multiple Consumer (SPMC) shared memory primitive – SPMC channels. The implementation adds 2 optional arguments to existing Put/Get system calls. Determinator maps the virtual memory ranges of the producer and all consumers to the same physical memory. Consumer would be blocked until the producer fixes the page.It is suitable for applications demanding pipeline parallelism or &#8220;all-to-all&#8221; communication.</p>

<p>Full WC model atop SPMC extension is not yet implemented.</p>

<h3>3. Deterministic OpenMP for Race-Free Parallelism (HotPar ‘11)</h3>

<p>DOMP is a variant of OMP based on the WC model. It keeps parallel, loop, sections, barrier, excludes atomic, critical, flush, generalizes reduction as reduction (function : list), and extends the sections with pipeline clause.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quincy: Fair Scheduling for Distributed Computing Clusters (SOSP '09)]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/20/quincy-fair-scheduling-for-distributed-computing-clusters-sosp-09/"/>
    <updated>2012-11-20T16:08:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/20/quincy-fair-scheduling-for-distributed-computing-clusters-sosp-09</id>
    <content type="html"><![CDATA[<p><a href="http://research.microsoft.com/en-us/people/misard/">Microsoft</a>, <a href="http://www.sigops.org/sosp/sosp09/papers/isard-sosp09.pdf">paper</a>, <a href="http://www.sigops.org/sosp/sosp09/videos/19_michael_isard.mov">video</a>, <a href="http://www.sigops.org/sosp/sosp09/slides/quincy/QuincyTestPage.html">slides</a></p>

<h2>1. Problem</h2>

<p>How to achieve fair scheduling? In other words, a guy who gets up early and performs huge tasks on a cluster should not always monopolize most computing resource, and someone else&#8217;s assignments should not be ignored. Otherwise, it is unfair for all the cluster users.</p>

<p><strong>Fair sharing</strong> of the cluster resources</p>

<p>Job x takes <em>t</em> seconds, when running exclusively on the cluster. When the cluster has <em>J</em> jobs, x should take &lt;= <em>Jt</em> seconds.</p>

<p><em>N</em> computers and <em>J</em> jobs: each job gets at least N/J computers.</p>

<h2>2. Challenges</h2>

<p>Traditionally,</p>

<!--more-->


<p>MPI Model, tasks are in a pipeline and then assigned to a part of cluster.</p>

<ul>
<li>If one node is down, all the processes should be killed and the user have to start at a new checkpoint.</li>
<li>Coarse grain allocation. Allocation is static.</li>
<li>Off cluster data strage, e.g. SAN</li>
</ul>


<p>Dryad MapReduce Model</p>

<ul>
<li>No communication between slaves.</li>
<li>No fine grain sharing for resource competence. Many Idle nodes.</li>
</ul>


<p><strong>Fine-grain sharing model</strong></p>

<ul>
<li>Multiplex all computers in cluster between jobs.</li>
<li>When a task completes, computer may be assigned to another job.</li>
<li>Jobs uses <em>N/J</em> computers at a time but set in use varies over lifetime.</li>
</ul>


<h2>3. Solution</h2>

<p>The solution is intended for data-intensive computing with locality. There is no SAN. However, data locality conflicts with fairness. So they present Quincy: a new, graph-based framework for cluster scheduling under a fine grain cluster resource-sharing model with locality constrains. 2 basic ideas:</p>

<ol>
<li>sub-optimal assignment of a job&#8217;s tasks.</li>
<li>kill running tasks to free resources</li>
</ol>


<h3>3.1 Queue-based Scheduling</h3>

<p>Architecture: A core switch (CS) manages rack switches (RC). A rack switch (RC) manages computers (C). For example, C1, C2 and C3 in a rack have their own queues, and share a same rack queue. R1 R2 managed by the same core switch have their own queues above, and share a same core queue. Every time a task X is finished, X will be deleted from all the queues, no matter what hierarchy it is in.</p>

<p>So how to get fairness?</p>

<h3>3.2 Flow-based Scheduling</h3>

<p>Simplify a scheduling problem to a matching problem.</p>

<ul>
<li>each task is either scheduled or unscheduled.</li>
<li>can assign a cost to any matching</li>
<li>fairness constrains number of tasks that are scheduled</li>
</ul>


<p>How to minimize matching cost while still maintaining fairness?</p>

<p>Min-cost network flow.</p>

<p>There are U (unscheduled nodes), X (cluster aggregator nodes), R (rack aggregator nodes), C (computing nodes). In addition to queue-based scheduling, the edges connecting tasks to these nodes have weights showing the cost of the matching. The capacities on the outgoing edge of job <em>j</em>&#8217;s unscheduled node <em>Uj</em> control the number of running tasks that the job will be allocated.</p>

<h2>4. Conclusion</h2>

<p>The authors advance a new fair schedule modeling for Dryad/MapReduce/Hadoop by min-cost network flow, achieving much better performance and effectiveness than traditional ways.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[春天在哪里呀春天在哪里？]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/17/chun-tian-zai-na-li-ya-chun-tian-zai-na-li-%3F/"/>
    <updated>2012-11-17T15:51:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/17/chun-tian-zai-na-li-ya-chun-tian-zai-na-li-?</id>
    <content type="html"><![CDATA[<h3>一 大叔</h3>

<p>第一次见到阿米(Amittai F. Aviram)大叔就被彻底震撼到了，你简直就无法相信眼前这位爷爷辈的大叔居然是计算机系的博士！OSDI&#8217;10（计算机系统界顶级会议）最佳论文的第一作者！要知道，人人生而平等，会议生而不等，同是顶级会议，论文被OSDI录用就比VLDB、WWW、NSDI等等这些难得不是一点两点；而且系统领域的论文不是推个数学公式，做个小实验验证一下就可以过关，而是需要老老实实动手实现整个复杂的设计的。而这位谈吐之间无时无刻不环绕着功成身退气息的大叔，此刻正在向比他小个几十岁的教授们作毕业答辩！机缘巧合的是，不久之后，当我想看看如何实现一个简单的数据库的时候，满心欢喜地查到一个B+树的C语言实现，左上角竟然也是赫然打着阿米大叔的大名！</p>

<p>大叔啊，您都一大把年纪了，上能发好论文，下能写好代码，让我们这群自诩码农的后生们情何以堪？元芳，你怎么看？此事必有蹊跷！于是怀着复杂的心情，我点开了大叔的履历。其实，大叔在三十年前就已经成为了南卡大学(University of South Carolina)的英语文学教授，酷爱写诗，是拿到了终身教职的。后来，不知为何对计算机产生了浓厚的兴趣，04年去哥大读计算机专业的本科，后来一发不可收拾，经过八年的锤炼，几个月前在耶鲁博士毕业。现在在MathWorks任高级软件工程师……</p>

<!--more-->


<h3>二 狂奔</h3>

<p>我在这一年多以来一直没有把一件事情做好的快感，内心里念想太大，脑子里干货太少，拼命狂奔，累到趴下，然后再狂奔。我觉得很可能很多人会像我一样，对新的人生阶段有这种后知后觉的不适应。大四之后也没有“课程”这种规定“几点到几点必须在什么地方和那些人一起干什么事情”的固定的安排，身边也没有人管你是死是活，于是作息变得不规律起来：你可以心血来潮时持续工作到凌晨五六点，也可以一觉睡到下午两三点；你可以早上五点起床，一天吃六餐，跑很多步，读很多书，见很多人，你也可以26小时不起床，一整天不吃东西……</p>

<p>楠哥曾经表示过，身为一位计算机科学专业的博士，早就历练出了可以在一天之中任意时间任意睡着和醒着的本能。这位敬职的助教在学术上不辞劳苦日夜兼程，经常的情况是，我凌晨一两点给他发邮件，他凌晨三四点给我回复，甚至有一次我下午去他办公室，他不在，另一位博士说，他回去睡觉了……教授和博士后们似乎就更是这样了。我不止一次在凌晨4点左右收到不同教授发来的邮件。</p>

<p>同时，各色论坛、微博、人人上，同学们都似乎很享受“最近很辛苦，每天凌晨几点睡”这样的言论！各种主流媒体也似乎非常欣赏“每天只睡三四个小时”这种埋头苦干拼命硬干日夜不辍的革命情怀……</p>

<p>饶了我吧，对我来说，这不科学。我要把不规律的生活规律列为我这辈子最大的敌人。</p>

<h3>三 趣味</h3>

<p>另一件没有快感的事情是贫乏的趣味。本来我们这群神经病(Geek)就是拉低整条街趣味性平均水平的罪魁祸首，更何况背井离乡只身在外？现在愈发地赞同，所谓向往向往，心之所向的是过往的美好：最美妙的早餐当然是湖北的热干面，最温馨的香味当然是妈妈用的百雀羚，最得意的事情当然是小学的时候就想研习的码术，潜伏在深深的黑夜里欲罢不能的欲望当然还是那火锅、卤味、穆斯林的烤串、渔村的烤鱼、桃李二的麻辣烫……最最让我不敢相信的是，我居然还梦到了国关食堂打的饭菜！这梦也太没有节操了。</p>

<p>突然之间，对我而言，黑樱桃汽水不是饮料，而是塑料，楼下无小黑，商店无零食，晚睡无宵夜，早起无早餐，举目无亲人，校园无美女。哦？对不起，我真心不好异国风情这一口！</p>

<p>我问同学海神，你看人家“还能害得你好(Helen Hadley Hall 研究生公寓的谐音，大部分中国研究生都居住于此)”又成全了一对鸳鸯，少年你作为我们大HGS(Hall of Graduate Studies研究生宿舍)的杰出华人代表，还不赶紧加了个油？为我们HGS华人同胞们争光？</p>

<p>海神淡定地表示，工作都没找到，哪来时间考虑这些？</p>

<p>哪来时间考虑这些？</p>

<p>我被戳到了痛处。突然之间，“有所成就”和”有趣”突然在我心目中成为了一对矛盾的存在。一方面，我的心目中浮现这样一个画面：</p>

<blockquote><p>弟子毕恭毕敬地问大师：请问将此绝技修炼到炉火纯青需要多少时日？</p>

<p>大师：七年</p>

<p>弟子一惊：若每日勤加修炼，不分昼夜，不问世事，需要多久？</p>

<p>大师：十年</p></blockquote>

<p>程代展教授数日前发表博客称“<a href="http://blog.sciencenet.cn/blog-660333-632151.html">昨夜无眠</a>”，因为一位在他看来在学术上前程极其远大的学生，突然不再跟他继续科研，转而去做中学老师，而且居然还已经考过了会计师。这篇博客在网上掀起了讨论的狂潮，有一种观点认为，程教授是一位好的伯乐，可是伯乐骑到了千里马上，把千里马压得太紧了，以至于科研的过程太苦、太累、太没有意思。</p>

<p>可是另一方面，在一个社会分工高度细化的时代，没有长时间、高强度的训练是无法<a href="http://www.geekonomics10000.com/519">练习一万小时成就天才</a>的。</p>

<p>我要有趣地刻苦，哪怕慢一点，也不要刻苦到无趣。无论是谁在哪里生活，他的生活都有着自己的节奏，就像跑步的时候，每个运动员都有自己的步调，人生很长，毕竟有限，太快终会慢下、太慢不可致远。我们要做的是在合适的时机跑合适的速度，找到自己生命的节拍，只有跑得合拍，才能跑得长久，跑得悠远。</p>

<h3>四 春天在哪里？</h3>

<p>小乘佛法里认为，我执（无明, ignorance）是一切痛苦的根源。但我也很同意无知即是力量(ignorance is power)，这种认知既来源于阿甘正传里面的那种执着，也来自“宁肯大陆不长草，也要收复什么岛”的那种执着。</p>

<p>我不知对错。</p>

<p>孔子可以不饮盗泉之水，盗跖也可以骂孔丘“矫言伪行，以迷惑天下之主，而欲求富贵焉。盗莫大于子，天下何故不谓子为盗丘，而乃谓我为盗跖？”</p>

<p>我不知对错。</p>

<blockquote><p>大流士王召集了一批希腊人到宫廷上，问他们，什么代价可以使他们愿意去吃自己父亲的遗体；希腊人说，不可能，没有任何代价能让他们去做出如此可怕的勾当。同时，殿前有一批印度人，这个部落的印度人是以吃父辈遗体为风俗的。大流士问他们，什么代价可以使他们愿意将父亲的遗体火化（希腊人火化遗体）。印度人大惊失色：不可能，没有任何代价能让他们去做出如此可怕的勾当，想都别想。”希罗多德的评语：“这个世界就是这么回事。”</p></blockquote>

<p>我不知对错。</p>

<p>或者说，世上本无对错，只有选择，大多数人选择正确的，就是对，大多数人选择错误的，就是错。可是，如果真理是不言自明的，那还需要著书立说这种多余的行为干什么呢？</p>

<p>既然都没有了对错，那一切似乎都可以随意，在这随意的、未知的世界，未来在哪里呢？</p>

<blockquote><p>春天在哪里呀春天在哪里？</p>

<p>春天在那青翠的山林里</p>

<p>春天在那小朋友的眼睛里</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HomeOS: An Operating System for the Home (NSDI '12)]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/16/homeos-an-operating-system-for-the-home-nsdi-12/"/>
    <updated>2012-11-16T22:06:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/16/homeos-an-operating-system-for-the-home-nsdi-12</id>
    <content type="html"><![CDATA[<p><a href="http://researcher.watson.ibm.com/researcher/view.php?person=us-ckd">IBM</a>, <a href="http://research.microsoft.com/en-us/projects/homeos/">MS</a>, <a href="https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final149.pdf">paper</a>,  <a href="https://www.usenix.org/conference/nsdi12/towards-commodity-smarthomes-homeos">Video</a>, <a href="https://www.usenix.org/sites/default/files/conference/protected-files/homeos-nsdi-talk-given-clean.pdf">Slides</a></p>

<h3>1. Problem</h3>

<p>High overhead of managing and extending network devices for <strong>smart home</strong>: 1) growing number of devices 2) heterogeneity 3) hardware/software incompatible.</p>

<h3>2. Challenges</h3>

<ul>
<li>Appliance abstraction: a closed, monolithic system. (manageability)</li>
<li>Decentralized network-of-devices: bad portability. (extensibility: both software and hardware)</li>
</ul>


<!--more-->


<h3>3. Solution</h3>

<p>HomeOS: a PC-like abstraction for network devices</p>

<h4>3.1 Overview</h4>

<table>
    <tr>
        <td>Application layer</td><td>Tasks</td>
    </tr>
    <tr>
        <td>Management layer</td><td>Control</td>
    </tr>
    <tr>
        <td>Device functionality layer (DFL)</td><td>Device</td>
    </tr>
    <tr>
        <td>Device connectivity layer (DCL)</td><td>Topological</td>
    </tr>
    <tr>
        <td>PCs, XBox, Smartphones, TVs, &#8230;</td><td>Heterogeneity source handled</td>
    </tr>
</table>


<h4>3.2 Application Layer</h4>

<p>Environment for develop-written codes. An application should have a manifest {rules} to specify what devices it needs.</p>

<h4>3.3 Management Layer</h4>

<ol>
<li><p>Application manager with access control</p>

<ul>
<li>Time-based access control.</li>
<li>Applications as security principals</li>
<li>Settings should be querable</li>
<li>Sensitive devices need extra attention</li>
</ul>
</li>
<li><p>Mediate conflicting accesses</p>

<ul>
<li>Datalog access control rules: (r, g, m, Ts, Te, d, pri, a): Resource r can be accessed by users in group g, using module m, in the time window from Ts to Te, on day of the week d, with priority pri and access mode a.</li>
<li>Simplicity. User account works within a given time. Groups are in a tree hierarchy.</li>
</ul>
</li>
</ol>


<h4>3.4 Device Functionality Layer</h4>

<p>Provide APIs for higher layers by using handles.</p>

<p>Service interfaces = roles{operations()} (&#8220;lightswitch&#8221; role = turnOn()+turnOff())</p>

<ul>
<li>A new device can either use an existing role or register new roles</li>
<li>OS is agnostic to the services</li>
</ul>


<h4>3.5 Device Connectivity Layer</h4>

<p>Provide handles for higher layers.</p>

<ul>
<li>No understanding of device semantics</li>
<li>A uniform interaction with different kinds of devices</li>
</ul>


<h4>3.6 Implementation and Evaluation</h4>

<p>C#</p>

<p>Developer: &#8220;music follows the lights&#8221;/&#8221;custom lights per user&#8221;. 8/10 of them finished in 2h</p>

<p>User: 77% completion rate</p>

<h3>4. Conclusion</h3>

<p>Bad abstractions in &#8220;smart home&#8221; result in high overhead of managing and extending network devices, which are in increasing number and mostly not compatible with each other. Traditionally, appliance abstraction provides a huge system with no potential for customization and extension. Meanwhile, decentralized network-of-devices provide little portability. So the authors present a new abstraction &#8211; HomeOS, a PC-like abstraction for network devices. The new abstraction architecture consists of four layers. Lower layers interact with heterogenous devices and protocols. Upper layers simplify development and use of applications. HomeOS is implemented with C# and its experience shows a satisfying manageability and extensibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast and Parallel Webpage Layout (WWW '10)]]></title>
    <link href="http://puncsky.github.com/blog/2012/11/16/fast-and-parallel-webpage-layout-www-10/"/>
    <updated>2012-11-16T15:56:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2012/11/16/fast-and-parallel-webpage-layout-www-10</id>
    <content type="html"><![CDATA[<iframe src="http://www.slideshare.net/slideshow/embed_code/15270792" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p></p>

<p><a href="http://www.eecs.berkeley.edu/~lmeyerov/">UCB</a>, <a href="http://www.eecs.berkeley.edu/~lmeyerov/projects/pbrowser/pubfiles/playout.pdf">paper</a></p>

<h2>1. Problem</h2>

<p>The browsing of webpages is slow on smartphones for their limited CPU computational resources. The <em>power wall</em> forces hardware architects to apply increases in transistor counts towards improving parallel performance, not sequential performance. So the authors introduce the <strong>parallel</strong> mobile browser.</p>

<h2>2. Challenges</h2>

<!--more-->


<p>In the analysis,  three core limitations of the rendering speed are:</p>

<ol>
<li>CSS selector matching</li>
<li>Box and text layout</li>
<li>Glyph rendering</li>
</ol>


<h2>3. Solution</h2>

<p>Overall Input and Output</p>

<ul>
<li>Input: an HTML tree of content, CSS style rules, font files.</li>
<li>Output: absolute element positions.</li>
</ul>


<h3>3.1 Algo1: CSS Selector Matching</h3>

<p><em>Rule matcher</em> associates CSS rule set with HTML node tree.</p>

<p>Two assumptions:</p>

<ol>
<li>In general, selector language is an exact subset of regular expression.</li>
<li>Disjunctions are split into separate selectors</li>
</ol>


<p>Algorithm paraphrase:</p>

<ol>
<li>sequentially read rules and correspondingly build hash maps</li>
<li>parallelly <strong>map</strong> nodes to different kinds of rules</li>
<li>parallelly <strong>reduce</strong> several rules to each node</li>
</ol>


<p>Optimizations from WebKit:</p>

<ol>
<li>Hashtables. [×] check CSS for every node [√] read once, build hashmap, and check hash</li>
<li>Right-to-left matching.</li>
</ol>


<p>New Optimization:</p>

<ol>
<li>Redundant selector elimination.</li>
<li>Hash Tiling. partition the hashtable. reduce cache misses.</li>
<li>Tokenization. store attributes as int instead of string to save cache.</li>
<li>Parallel document traversal.</li>
<li>Random load balancing. If in sequence, neighboring nodes will cause load imbalance.</li>
<li>Result pre-allocation.</li>
<li>Delayed set insertion.</li>
<li>Non-STL sets.preallocate a vector with a size of potential matches.</li>
</ol>


<p>Overall Speedup = 60x: 204ms->3.5ms, 3s->50ms</p>

<h3>3.2 Algo2:</h3>

<ul>
<li>Input: HTML tree nodes with symbolic constraint attributes</li>
<li>Output: layout actual details (size, shape, position)</li>
</ul>


<p>Because CSS is confusing and informally-writtened, we create a new simple, concise, uniform, and intermediate language, Berkeley Style Sheets (BBS), which is transformed from CSS and will be specified with an attribute grammar (which shows potential for parallelization).</p>

<p>Three contributions:</p>

<ol>
<li>Increase performance. decompse the tasks.</li>
<li>Uniform a correct, concise specification.</li>
<li>Prove it is at most linear in the size of HTML tree.</li>
</ol>


<p><strong>PARALLELIZATION</strong></p>

<p>Two steps recursively for every node in the DOM tree</p>

<ol>
<li>calculate inherited attributes (top-down). Every level of childs in the tree enjoyes the parallelization.</li>
<li>calculate synthesized attributes (node&#8217;s own attributes) (bottom-up). Every level of parents in the tree enjoys the parallelization.</li>
</ol>


<p>2 is dependent on 1.</p>

<p>Complexity: O(log)</p>

<p>Speedup of box + text layout = 2-3x</p>

<p>Advanced layouts: floats</p>

<h3>3.3 Algo3: Font Handling</h3>

<ol>
<li>create a pool of necessary font library request</li>
<li>group the requests</li>
<li>make parallel calls to process each group</li>
</ol>


<h2>4. Conclusions</h2>

<p>Address three bottlenecks of loading a page</p>

<ol>
<li>CSS selector matching

<ul>
<li>Pre-built hash tables, map-reduce</li>
</ul>
</li>
<li>Box and text layout solving

<ul>
<li>Specify layout as attribute grammars</li>
</ul>
</li>
<li>Glyph rendering

<ul>
<li>Combine requests to groups and render in parallel</li>
</ul>
</li>
</ol>


<p>Milestone in building a parallel and mobile browser</p>
]]></content>
  </entry>
  
</feed>
