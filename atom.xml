<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Puncsky CS Notebook]]></title>
  <link href="http://www.puncsky.com/atom.xml" rel="self"/>
  <link href="http://www.puncsky.com/"/>
  <updated>2014-11-15T04:51:42-08:00</updated>
  <id>http://www.puncsky.com/</id>
  <author>
    <name><![CDATA[Tian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on Code Complete II: Variables]]></title>
    <link href="http://www.puncsky.com/blog/2014/08/16/notes-on-code-complete-ii-variables/"/>
    <updated>2014-08-16T12:00:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2014/08/16/notes-on-code-complete-ii-variables</id>
    <content type="html"><![CDATA[<h2>III Variables</h2>

<h3>10 General Issues in Using Variables</h3>

<p><strong>Abstract</strong> 变量的声明与使用遵循精准确定、单一集中原则</p>

<p><strong>Keywords</strong> proximity principle</p>

<p>尽可能显式声明变量类型</p>

<p>在靠近使用的地方初始化变量，而不是一开始的附近。因为 <strong>Principle of Proximity(相关的东西要放一起)</strong></p>

<ol>
<li>可能在使用的时候早就被其他(很可能后来新加的)代码修改了</li>
<li>集中性的一次性初始化多个变量，会造成这些变量将在整个代码中用到的错觉</li>
<li>围绕这小片代码将来可能会加循环之类的结构，导致bug</li>
</ol>


<p>在靠近使用的地方声明、定义变量</p>

<p>尽量使用final和const</p>

<p>初始化0是一个不错的选择，Intel处理器0xCC, 有些debugger容易识别的有0xDEADBEEF</p>

<p>尽量让变量短命 live time = 最初到最后对变量引用的行数，比如，一开始选择最保守的visibility，需要时再拓展</p>

<p>使用常量不要hard-coding，用类似<code>private static final int COLOR_BLUE = 0xFF;</code> 或者<code>color = ReadTitleBarColor()</code> 越早绑定优化程度越高，越迟绑定灵活性越高（更高的灵活性会导致更高的复杂性）。看如何权衡。</p>

<p>Use each variable for EXACTLY one purpose.</p>

<p>避免hybrid coupling: <code>pageCount=-1</code>表示错误</p>

<h3>11 The Power of Variable Names</h3>

<p><strong>Abstract</strong> 变量的命名极为重要且有章可循</p>

<p><strong>Keywords</strong> 8~20, qualifier, naming conventions</p>

<p>命名要充分、准确。当然一串对于该变量的描述是最准确的，但是，很可能会长得离谱。</p>

<p>按what命名，不按how命名。能用problem domain的名称就不要用计算机方面的名称。</p>

<p>研究表明平均变量名长度10~16是debug最容易的，其次是8~20。</p>

<p>Good example: numTeamMembers, teamMemberCount, numSeatsInStadium, seatCount, teamPointsMax, pointsRecord.</p>

<p>太长或太短的命名就完全不能用吗？当然不是，更长的变量适合于少用到的变量或者全局变量，更短的变量适合于局部或者loop里的变量。</p>

<p>为了避免命名冲突，有namespace的编程语言用namespace，没有的在variable名称前加前缀。</p>

<p>如果命名要用qualifier（限定词）,比如Total, Sum, Average, Max, Min, Record, String, or Pointer, 把限定词放到命名最后。除了num，放在前面代表总数，放在后面代表index，所以尽量不要用num，而是用Count后缀和Index后缀。(我个人喜欢用i前缀)</p>

<p>用约定俗成的反义词</p>

<ul>
<li>begin/end</li>
<li>first/last</li>
<li>locked/unlocked</li>
<li>min/max</li>
<li>next/previous</li>
<li>old/new</li>
<li>opened/closed</li>
<li>visible/invisible</li>
<li>source/target</li>
<li>source/destination</li>
<li>up/down</li>
</ul>


<p>循环: 如果index仅限于循环内部，用i,j,k，如果1）循环外部也要用 2）循环过长 3）nested 则考虑有意义的名称</p>

<p>状态: 用比flag更有意义的状态变量名称</p>

<p>临时变量: 对临时变量持怀疑态度，能不用就不用</p>

<p>bool: 用done, error, found, success or ok. 用is前缀是一个不错的做法。用正向含义的名词，不要用类似于notFound这种。</p>

<p>不用的语言和项目有不同的naming conventions，P277有例子</p>

<p>如果两个变量的命名可以互换而不会影响程序，两者的命名是有问题的。</p>

<p>用数组<code>file[]</code>不要用<code>file1</code>, <code>file2</code>.</p>

<h3>12 Fundamental Data Types</h3>

<p><strong>Abstract</strong> 数据类型们有着各自的使用规则。本章单独列出了许多C语言的注意事项，足以说明C语言在数据类型方面的使用很容易出错。</p>

<p><strong>Keywords</strong> int, float, char, string, bool, enum, named constants, array, user-defined types</p>

<p>Avoid &#8220;magic numbers&#8221;(literal numbers such as 100 or 47524 出现在程序中而不加解释)唯一能够出现的数字literals应该是0和1，作为初始量或者增量。</p>

<p>Chars and Strings</p>

<ul>
<li>All strings in Java are Unicode. 但是C/C++处理Unicode要用专门的库</li>
<li>在软件开发早期就考虑国际化的问题</li>
</ul>


<p>Strings in C</p>

<ul>
<li>区分string pointers和char arrays

<ul>
<li>C几乎所有的字符串操作都是通过strcmp(), strcpy(), strlen()等完成的，<code>StringPtr = "text";</code>此处“text”是指向literal text的指针，<code>=</code>并没有拷贝内容的作用</li>
</ul>
</li>
<li><code>char string[NAME_LENGTH + 1] = { 0 };</code> 尽量用array of chars</li>
<li>用<code>strncpy()</code>, <code>strncmp()</code> 不用<code>strcpy()</code>, <code>strcmp()</code>，因为至少有一个parameter保证函数一定会终止</li>
</ul>


<p>bool: 当判断条件太多，用bool variable表示可读性更高</p>

<p>Enum</p>

<ul>
<li>与switch合用的时候，default处理错误的case</li>
<li>为enum定义first last 元素用于enumeration (First(0), A(0), B(1), C(2), Last(2)) 这样一个loop就能搞定了</li>
</ul>


<p>Array</p>

<ul>
<li>在C里面可以用宏<code>#define ARRAY_LENGTH(x) (sizeof(x)/sizeof(x[o]))</code>表示数组的长度</li>
</ul>


<p>用户自定义类型的时候尽量以现实世界的实体命名，尽量用class而不是typedef</p>

<h3>13 Unusual Data Types</h3>

<p><strong>Abstract</strong> 什么时候使用struct? pointer有哪些注意事项？使用全局数据导致的问题如何解决？</p>

<p><strong>Keywords</strong> struct, pointer, memory corruption, global data</p>

<h3>struct</h3>

<p>group related data</p>

<blockquote><p>C/C++ struct vs. class: In C++, structs and classes are pretty much the same; the only difference is that where access modifiers (edit: for member variables, methods, and for base classes) in classes default to private, access modifiers in structs default to public. However, in C, a struct is just an aggregate collection of (public) data, and has no other class-like features: no methods, no constructor, no base classes, etc. Although C++ inherited the keyword, it extended the semantics. (This, however, is why things default to public in structs—a struct written like a C struct behaves like one.)</p></blockquote>

<h3>pointer</h3>

<p>= position + how to interpret contents from that position</p>

<p>最常见的错误是指针指向了不该指向的地方，（这时候向该内存写数据）会导致memory corruption.</p>

<p>解决策略很简单，尽早甚至一开始就规避这种错误</p>

<ul>
<li>把指针操作限制在函数或者类的内部</li>
<li>定义声明和初始化在一起(proximity principle)</li>
<li>对指针持怀疑态度，无论是指针本身，还是指针指向的变量，使用之前都要检查，怀疑他们超出范围了</li>
<li>用额外的dog-tag空间(和原空间在一起)以检查memory corruption. e.g. isOK tag for <code>free</code></li>
<li>不要链条似地使用指针</li>
<li>画图让问题更直观</li>
<li>预留空间以在空间耗尽时备用</li>
<li>free/allocate pointers 放在同一scoping level</li>
<li>delete前要检查（并填充专门的垃圾数据），delete完要归NULL</li>
<li>能不用指针还是不用指针的好</li>
</ul>


<h4>C++ Pointer Pointers</h4>

<p>pointers vs. references?</p>

<ul>
<li>The most significant differences are that a reference must always refer to an object, whereas a pointer can point to NULL; and what a reference refers to can’t be changed after the reference is initialized.</li>
</ul>


<p>Use pointers for &#8220;pass by reference&#8221;. Use <code>const</code> references for &#8220;pass by value&#8221;.</p>

<p>用smart pointer: <a href="http://stackoverflow.com/questions/6876751/differences-between-unique-ptr-and-shared-ptr">unique_ptr vs. shared_ptr</a> (there can only be one unique_ptr to any resource, any attempt to make a copy of a unique_ptr will cause a compile-time error.)</p>

<h4>C-pointer Pointers</h4>

<p>使用显示类型的指针</p>

<p>尽量避免type-casting</p>

<p>使用 sizeof() 内存分配时决定变量大小</p>

<h3>Global Data</h3>

<p>全局变量因为scope过大，导致该变量会对其他模块产生不可预料的影响，不到万不得已，不用全局变量。</p>

<p>不要直接访问类成员变量就好像他们是全局变量似的，即便编程语言允许你这样做。</p>

<ul>
<li>用access routines (like getter, setter in Java) 而非直接访问成员有什么好处呢？好处极多(P352)，简单来讲

<ul>
<li>模块化、灵活性：允许变量和内部的实现与外部的交互分离，而外部的访问方式保持不变，代码改变的时候(变量变量，变化的情况还蛮多的)就不会影响到太多其他文件。getter,setter两者的访问级别可以不同。</li>
</ul>
</li>
</ul>


<p>同样因为模块化，在调用数据成员时，能用access routines尽量用access routines，<a href="http://stackoverflow.com/questions/8466790/java-conventions-use-getters-setters-within-the-class">即便在类的内部也不例外</a></p>

<p>Don’t pretend you’re not using global data by putting all your data into a monster object and passing it everywhere 这是不必要的开销，要用就光明正大地用</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Code Complete II: Layout and Style]]></title>
    <link href="http://www.puncsky.com/blog/2014/08/16/notes-on-code-complete-ii-layout-and-style/"/>
    <updated>2014-08-16T12:00:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2014/08/16/notes-on-code-complete-ii-layout-and-style</id>
    <content type="html"><![CDATA[<h3>31 Layout and Style</h3>

<p><strong>Abstract</strong> Layout as Religion 布局是一种信仰，好的布局使得逻辑准确，代码一致、易读、可维护。</p>

<p><strong>Keywords</strong></p>

<p>Objectives of Good Layout</p>

<ul>
<li>准确表示代码的逻辑结构</li>
<li>始终如一的表现代码的逻辑结构</li>
<li>改善可读性</li>
<li>经得起修改：<strong>修改某行时不必连带修改其他行的代码</strong></li>
</ul>


<h4>Layout Styles</h4>

<ul>
<li>Pure blocks</li>
<li>Emulating Pure Blocks: 用<code>{``}</code>模仿纯块风格，<code>{</code>放在第一行末尾</li>
<li>Begin-End pairs (braces) as boundaries: <code>{``}</code>单独占一行，但是都有缩进</li>
<li>Endline Layout: 让<code>switch</code>看起来对更齐，但是可维护性差</li>
</ul>


<h4>Laying Out Control Structures</h4>

<p>if 必须加大括号，多个条件放到不同的行上</p>

<p><code>goto</code>使得代码的布局很不好办</p>

<p>段落之间空行</p>

<h4>Laying Out Individual Statements</h4>

<p>多用空格</p>

<p>Formatting Continuation Lines 断行</p>

<ul>
<li>让续行更明显，比如，把运算符、逗号等放到行的末尾。如果把运算符放在前面可以凸显逻辑结构。</li>
<li>把紧密关联的元素放在一起</li>
<li><strong>将子程序调用的后续航按照标准量缩进</strong>，尽管对齐党觉得应该美观，可是就维护性来讲，标准缩进好些。</li>
<li>让续行的结尾易于发现</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CallMethod(
</span><span class='line'>    LongNameA,
</span><span class='line'>    LongNameB,
</span><span class='line'>    C,
</span><span class='line'>    D
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>不要讲赋值语句按等号对齐，要按照标准量缩进</li>
<li>每行只写一条语句，只能有一个操作</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strcpy(char *t, char *s) {
</span><span class='line'>    while (*++t = *++s) // 不容易发现错误
</span><span class='line'>    ;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>strcpy(char *t, char *s) {
</span><span class='line'>    do {
</span><span class='line'>        ++t; // 很容易发现错误
</span><span class='line'>        ++s;
</span><span class='line'>        *t = *s;
</span><span class='line'>    } while (*t != '\0');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Laying Out Data Declarations</h4>

<ul>
<li>每行只声明一个数据</li>
<li>声明尽量接近首次使用的位置</li>
<li>合理组织声明的顺序</li>
<li>C++指针声明把<strong><code>*</code>靠近变量名</strong></li>
</ul>


<h4>Laying Out Comments</h4>

<ul>
<li>注释缩进与代码一致</li>
<li><strong>每行注释用至少一个空行分开</strong></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Comment0
</span><span class='line'>Statement0
</span><span class='line'>
</span><span class='line'>// Comment1
</span><span class='line'>Statement1</span></code></pre></td></tr></table></div></figure>


<h4>Laying Out Routines</h4>

<ul>
<li>用空行分割子程序的各部分</li>
<li>将子程序按照标准缩进</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public bool ReadEmployeeData(
</span><span class='line'>    int maxEmployees,
</span><span class='line'>    EmployeeList *employees,
</span><span class='line'>    EmployeeFile *inputFile,
</span><span class='line'>    int *employeeCount,
</span><span class='line'>    bool *isInputError
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<h4>Laying Out Classes</h4>

<p>Interfaces</p>

<ol>
<li>Ctors and destructors</li>
<li>Public routines</li>
<li>Protected routines</li>
<li>Private routines and member data</li>
</ol>


<p>Class implementations</p>

<ol>
<li>Class data</li>
<li>Public routines</li>
<li>Protected routines</li>
<li>Private routines</li>
</ol>


<p>如果文件包含多个类，要（用注释）清楚标出每个类</p>

<h4>Laying Out Files and Programs</h4>

<p>最好一个文件只有一个类，文件命名与类名一致或者相关</p>

<h3>32 Self-Documenting Code</h3>

<p><strong>Abstract</strong> 好的代码是Self-documenting的，但是因此就不需要注释了吗？非也非也。</p>

<p><strong>Keywords</strong></p>

<p>注释有那些种类？</p>

<ul>
<li>重复代码（bad）</li>
<li>解释代码：用于解释复杂、巧妙、敏感的代码</li>
<li>Maker in the Code: like <code>TODO</code></li>
<li>Summary of the code</li>
<li><strong>Description of the Code&#8217;s Intent: 指出需要解决的问题why，而非解决的方法how</strong></li>
<li>传达代码无法表述的信息</li>
</ul>


<p>如何写高质量的注释呢？</p>

<ul>
<li>不写难以维护的（很麻烦的）注释</li>
<li>用PPP伪代码编程法减少注释时间</li>
<li>将注释集成到你的开发风格中 （写注释也是写代码）</li>
</ul>


<p>最佳注释频率？</p>

<ul>
<li>十步一杀</li>
</ul>


<p>Commenting Techniques</p>

<ul>
<li>Commenting Individual Lines</li>
<li>Endline Comments and Their Problems

<ul>
<li>不好之处

<ul>
<li>难看难维护</li>
<li>不要对单行代码做尾注释</li>
<li>不要对多行代码做尾注释</li>
</ul>
</li>
<li>那么什么时候可以用呢？

<ul>
<li>数据声明时解释数据</li>
<li>标记block的尾部, end while, end if, etc.</li>
</ul>
</li>
</ul>
</li>
<li>Commenting Paragraphs of Code

<ul>
<li>注释应该表明代码的意图，为什么这么做而不是具体怎么做

<ul>
<li>e.g. find the command-word terminator ($)</li>
<li>想象将这段代码换成同样功能的sub routine应该如何命名</li>
<li>额外的变量或者函数本身具有说明作用</li>
<li>说明非常规的嘴阀</li>
<li>别用缩略语</li>
<li>错误或者语言环境的独特点要注释</li>
<li>给出违背良好编程风格的理由</li>
<li>投机取巧的代码要重写，而不是加注释</li>
</ul>
</li>
</ul>
</li>
<li>Commenting Data Declarations

<ul>
<li>注释数值单位</li>
<li>对数值允许的范围给出解释</li>
<li>如果没有枚举类型的支持，或者对于bit flags，注释编码含义</li>
<li>注释对输入数据的限制</li>
<li>注释要与变量名关联起来，e.g. <code>cref=""</code></li>
<li>注释全局数据</li>
</ul>
</li>
<li>Commenting Control Structures

<ul>
<li>while上一行，if/case下一行，都是不错的位置</li>
</ul>
</li>
<li>Commenting Routines

<ul>
<li>无视子程序的大小和复杂，在开头放一堆信息：这是荒谬的做法</li>
<li>记得注释接口的assumption</li>
</ul>
</li>
<li>Commenting Classes, Files, and Programs

<ul>
<li>可以考虑说明类的设计方法、局限性等等</li>
<li>如果不看实现就知道接口的用法吗？如果不知道，注释，但是不说实现细节</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Code Complete II: Creating High Quality Code]]></title>
    <link href="http://www.puncsky.com/blog/2014/08/16/notes-on-code-complete-ii-creating-high-quality-code/"/>
    <updated>2014-08-16T12:00:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2014/08/16/notes-on-code-complete-ii-creating-high-quality-code</id>
    <content type="html"><![CDATA[<h2>II Creating High Quality Code</h2>

<h3>5 Design in Construction</h3>

<p><strong>Abstract</strong> 软件开发管理的实质是管理复杂性，怎么简单怎么来，设计和抽象有助于降低复杂性。一种方式是层层向下，另一种方式是启发式地从下向上。分层向下时，模块之间应该尽量少交互、尽量不要出现循环依赖。各个模块要把“我该隐藏些什么？”牢记在心。自下向上时，不要固执于单一一种方法，（这会损害创新），反复迭代与重新设计以达到最优方案。在设计的过程中要记录或者画下设计方案。</p>

<p><strong>Keywords</strong> KISS, hiding secrets, loose coupling, design patterns, principle of one right place</p>

<p>Software&#8217;s primary technical imperative: managing complexity. Dijkstra说，没有人的头脑能大到装得下一个复杂程序的全部细节。</p>

<p>好的设计的特征:</p>

<ul>
<li>简单（当看到这片代码的时候，不去参考其他代码，也能很好地理解）。</li>
<li>minimal connectedness （strong cohesion, loose coupling, encapsulation）</li>
<li>可拓展性（可以在enhance代码的同时不更改已有的代码）</li>
<li>可重用性</li>
<li>high fan-in, low-to-medium fan-out 尽量让别人引用自己，自己少引用别人</li>
<li>可移植性</li>
<li>精简，一本书的完成并不止于没有内容可以增加，而是没有内容可以除去</li>
<li>分层(stratification)</li>
</ul>


<h4>自上而下：设计是有层次的，不是一蹴而就的</h4>

<p>设计的层次:</p>

<ol>
<li>software system</li>
<li>division into subsystems/packages

<ul>
<li>任何需要花费几周才能完成的项目</li>
<li>尽量精简子系统之间的交互关系，这样一个子系统的改变，对其他所有子系统的影响就会小很多</li>
<li>依赖关系应该是无环的</li>
<li>常用的子系统

<ul>
<li>business logic</li>
<li>UI</li>
<li>DB access</li>
<li>OS dependencies</li>
</ul>
</li>
</ul>
</li>
<li>division into classes within packages</li>
<li>division into data and routines within classes</li>
<li>internal routine design</li>
</ol>


<h4>自下而上：因为软件开发是非确定性的，启发式(heuristics)的，所以需要“试错”</h4>

<p>启发式设计的原则：你无需卡在单一的问题上，将问题留在未解决的状态，等拥有了更多信息后再去做。</p>

<ul>
<li>从现实世界寻找对象</li>
<li>抽象</li>
<li>封装</li>
<li>Inherit when inheritance simplifies the design. 方便之处在于，

<ol>
<li>传递同一类对象</li>
<li><strong>对同一类对象执行同样的操作 e.g. foreach loop</strong></li>
</ol>
</li>
<li><strong>隐藏信息</strong>: 本质是隐藏复杂性

<ul>
<li>大量使用自我说明性质的简短函数有助于减少复杂性</li>
<li>信息隐藏的秘密可以分为两大类：隐藏复杂度，不需要仔细研究的时候不用细看；隐藏<strong>变化源(sources of change)</strong>，当代码被改动时，其影响就能被限制在局部。</li>
<li>信息隐藏失败的例子

<ul>
<li>信息过度分散，循环依赖，类太大导致类内变量也像全局变量，性能上可能的损耗导致过早优化（明晰的设计比过早优化要好很多）</li>
</ul>
</li>
<li>养成问“我该隐藏什么？”的习惯</li>
</ul>
</li>
<li>找出容易改变的区域，隔离开来，设计好固定的接口，把变化都限制在区域内部。那么，哪些区域容易发生变化呢？

<ul>
<li>业务规则、硬件依赖、输入和输出、非标准的语言特性、困难部分（因为困难所以很可能被重新改写）、状态变量、data-size constraints</li>
</ul>
</li>
<li>松散耦合

<ul>
<li>小规模：模块之间的连接数要小，少的调用参数，少的public method</li>
<li>高可见性：不要偷偷摸摸地通过全局变量传数据</li>
<li>高灵活性：<code>LookupVacationBenefit(Employee.Date, Employee.Classification)</code>取代<code>LookupVacationBenefit(Employee)</code>因为有的地方需要临时拼凑<code>Employee</code>的其他字段，但是只有<code>Date</code>和<code>Classification</code>用到了</li>
</ul>
</li>
<li>耦合的种类

<ul>
<li>简单数据参数耦合(simple-data-parameter coupling) primitive data type parameters coupling 正常可接受</li>
<li>简单对象耦合 a module instantiates an object 也很不错</li>
<li>对象参数耦合(object-parameter coupling) 这种耦合比第一中更紧密</li>
<li>语义上的耦合(semantic coupling) 使用某个的模块的时候需要知道其内部的细节，如果想当然就很容易出错，这种耦合很糟糕，因为松散耦合的关键就在于抽象的简单性——意思是，一旦你写好了，使用者就应当可以想当然地用它，不用知道额外信息。</li>
</ul>
</li>
<li>Look for common design patterns</li>
<li>其他不大常用的方法

<ul>
<li>分层、接口是模块与其他部分的<strong>契约</strong>、为了测试而设计、<strong>the principle of one right place 对于每一段有用的代码应该只有一个地方看到他，并且只在一个正确的位置去做维护修改</strong>、拿不准时就用蛮力、画图。。。</li>
</ul>
</li>
</ul>


<h3>6 Working classes</h3>

<p><strong>Abstact</strong> 本章介绍如何使用类，作为数据和操作的集合，是管理复杂度的首选工具。数据成员最好不要超过七个，函数成员也是越少越好。函数的抽象层级要保持一致。类与类之间的联系应该尽可能少，尽量让被人用自己，而自己少用别人。用别人的时候，一大串的调用链条是很危险的。inheritance会增加复杂性，如果这个子类不是真的有其特殊性，那就不要用，即便用，层次超过3层就已经很麻烦了。完成类的最后一步，是检查是不是已经消除了所有不必要的信息。</p>

<p><strong>Keywords</strong> 接口抽象一致性, 七正负二, Liskov Substitution Principle, high fan-in and low fan-out, Law of Demeter</p>

<p>为什么需要类?</p>

<ul>
<li>encapsulation: 集中一系列的数据与操作。隐藏自己，减少自己对别人、别人对自己的影响，减少外界感知自己的复杂度。</li>
<li>inheritance: 重用代码</li>
<li>polymorphism: 对一系列的obj做同样的操作</li>
</ul>


<h4>Good Class Interfaces</h4>

<ul>
<li><strong>接口抽象一致性</strong>: 应该展现一致的抽象层次，是对<code>Employees</code> class 的逻辑就不要用计算机逻辑<code>NextListItem()</code>而是<code>NextEmployee()</code></li>
<li>提供成对的服务，有开就有关</li>
<li>不要对使用者做出任何假设，使用者不应该知道这些个接口的实现细节，比如尽量不要让接口之间相互依赖：method1()必须在method2()之前调用，可以用assert但是不要仅仅靠注释去解释</li>
<li>采取保守的accessibility</li>
<li>不要暴露data member</li>
<li>C++中不要把private data member 暴露给到头文件类的接口中</li>
<li>避免使用friend class，因为它tight coupling</li>
</ul>


<h4>Design and Implementation Issues</h4>

<ul>
<li>Containment (&#8220;has a&#8221; Relationship)

<ul>
<li>警惕有超过7个数据成员的类，人们在做事时能记住的离散项目个数是5~9个，平均7个</li>
</ul>
</li>
<li>public inheritance 是&#8221;is a&#8221; relationship

<ul>
<li>继承会给程序增加复杂度（尽管带来了重用的便利性），使用时要进行详细说明，要么就不要用它</li>
<li>Liskov Substitution Principle: 除非派生类真的是一个更特殊的基类，否则不应该从基类继承</li>
<li>只有一个实例的类（singleton除外）、只有一个派生类的基类都值得怀疑</li>
<li>派生后覆盖了某个子程序，但是其中没有做任何操作，也值得怀疑</li>
<li><strong>尽量使用多态，避免大量的类型检查</strong> 频繁重复出现的<code>case</code>意味着或许应该用继承了</li>
</ul>
</li>
<li>多重继承

<ul>
<li>多重继承的主要用途是定义<strong>mixins</strong>，很复杂，会极大增加复杂性</li>
</ul>
</li>
</ul>


<p>什么时候用inheritance 什么时候用containment?</p>

<ul>
<li>重用数据用包含，一旦重用操作则用继承（继承的方便之处在于对同一类对象执行同样的操作）。由基类控制接口用继承，自己控制接口用包含。</li>
</ul>


<h4>Member Functions and Data</h4>

<ul>
<li>keep the number of routines in a class as small as possible</li>
<li>禁止隐式自动生成的，但是自己并不需要的methods or operator</li>
<li>high fan-in, low fan-out: minimize direct routine calls to other classes</li>
<li>Law of Demeter: 间接调用也要尽量避免, e.g. <code>A.CreateB().CreateC()</code></li>
<li>尽量减少类和类之间相互合作的范围</li>
</ul>


<h4>Constructors</h4>

<ul>
<li><strong>initialize all member data in all constructors, if possible</strong>, in the order in which they are declared.</li>
<li>Enforce singleton property by using a private constructor. 这时候当然要用static member了</li>
<li>优先使用deep copy，论证可行后才用shallow copy</li>
</ul>


<h4>Classes to Avoid</h4>

<p>避免god class，消除无关紧要的类，避免用动词命名类</p>

<h3>7 High Quality routines</h3>

<p><strong>Abstract</strong> 如何写高质量的routine( = function + procedure)? 高内聚（只干一件事），清楚命名（动宾结构、与返回值有关的是function，与返回值无关的是procedure），长度尽量短，参数有序讲抽象层次。除非特定的理由，不要用macro and inline routines.</p>

<p><strong>Keywords</strong> cohesion</p>

<p>除了常见的好处，还有，隐藏顺序，自我注解</p>

<h4>Design at the Routine Level</h4>

<p>Cohesion</p>

<ul>
<li>For routines, cohesion refers to how closely the operations in a routine are related.</li>
<li>Good cohesion

<ul>
<li>最强的内聚, Functional cohesion : 一个函数只做一件事情</li>
<li>sequential cohesion: 操作们顺序确定、共享数据 e.g.算年龄，再根据年龄算退休时间。

<ul>
<li>解决方法：两个函数分别算年龄和算退休时间</li>
</ul>
</li>
<li>communicational cohesion: 操作们仅仅共享数据</li>
<li>temporal cohesion: e.g. <code>Startup()</code>, <code>Configuration()</code> 这种内聚应该作为一系列事件的组织者，具体操作应该由里面的其他子函数完成。</li>
</ul>
</li>
<li>Bad cohesion

<ul>
<li>procedural cohesion, 操作们顺序确定，<strong>不共享数据</strong></li>
<li>logical cohesion, 一大堆<code>if ... else ...</code>/<code>case</code> 混杂着不同层次的逻辑

<ul>
<li>解决方案：<code>Event handler</code> 唯一的功能是发布各种命令，本身不做任何具体的操作。</li>
</ul>
</li>
<li>coincidental cohesion: 一堆操作碰巧聚在了一起</li>
</ul>
</li>
</ul>


<h4>Good Routine Names</h4>

<ul>
<li>完整描述所做的所有事情</li>
<li>不能含糊、通用</li>
<li>不要通过数字区别不同的routine</li>
<li>对返回值要有所描述</li>
<li>使用语气强烈的“动宾”结构</li>
<li>使用对仗词

<ul>
<li>add/remove, increment/decrement, insert/delete, show/hide, create/destroy, start/stop, get/put, old/new</li>
</ul>
</li>
<li>为常用操作确定coding style</li>
</ul>


<h4>How Long Can a Routine Be</h4>

<p>越短越好，绝对不要超过200行</p>

<h4>How to Use Routine Parameters</h4>

<ul>
<li>按照输入-修改-输出的顺序排列参数，考虑自建<code>in</code>和<code>out</code>关键字，甚至把参数加上前缀<code>i_</code>, <code>m_</code>, <code>o_</code>.</li>
<li>类似的函数参数保持一致</li>
<li>使用所有的参数</li>
<li>把状态或者出错变量放在最后</li>
<li>不要把子程序的参数用作工作变量，应该自己新建局部变量</li>
<li>刚开始写函数的时候就document interface assumptions about parameters</li>
<li>参数数量约7个以内</li>
<li>pass variables vs. pass objects

<ul>
<li>答案是都可以，主要看函数的抽象层次。比如，Generally code that “sets up” for a call to a routine or “takes down” after a call to a routine is an indication that the routine is not well designed.</li>
</ul>
</li>
</ul>


<p>C is weakly typed. C++ and Java are strongly typed. TODO: see <a href="http://en.wikipedia.org/wiki/Strong_and_weak_typing">Strong and Weak Typing</a></p>

<h4>Special Considerations</h4>

<h5>Function vs. Procedure?</h5>

<p>Function有返回值，Procedure没有返回值</p>

<p>如果routine的主要用途是<strong>返回由其名字命名的返回值</strong>，就应该使用函数，否则，如果命名根本没有提到返回值的命名，用过程。</p>

<h5>Return values</h5>

<p>检查所有可能的路径，预设默认返回值是不错的做法。不要返回指向局部数据的引用或指针。</p>

<h4>Macro Routines</h4>

<pre><code>#define Cube(a) a*a*a   --&gt; (a)*(a)*(a) --&gt; ((a)*(a)*(a))
                -----       -----------     -------------
        如果a是 x+1 就悲剧了 仍然可能被更高级的拆开    不错
</code></pre>

<p>还有就是比如 a 是 x++ 就会很隐晦 TODO see <a href="http://en.wikipedia.org/wiki/Macro_and_security">Macro and Security</a></p>

<p>Macros are useful for supporting conditional compilation (see Section 8.6), but careful programmers generally use a macro as an alternative to a routine only as a last resort. 不到万不得已不要用macro</p>

<h4>Inline Routines</h4>

<p>C++要求inline子程序写在头文件里面，违反了封装原则，<strong>除非profile代码觉得真的能够提高性能</strong>，否则不要用。</p>

<h3>8 Defensive Programming</h3>

<p><strong>Abstract</strong> 承认程序总会出问题，严于律己宽以待人，所以我们需要Defensive Programming. 具体来说，有很多不同的技术，常用的有Assertion, Exception，前者面向自己，后者面向别人。有很多debugging aids可以在开发时候采纳，使得错误显现得更加明显；在Production code中要清理他们，使得错误不影响程序的运行。处处检查当然也会产生不必要的开销，因此要有主次之分。</p>

<p><strong>Keywords</strong> Error-handling, Assertion, Exception, Barricade, Offensive Programming</p>

<p>总是检查输入</p>

<h4>Assertion</h4>

<p><code>assert(bool, msg)</code></p>

<p>在private里用assert, 在public里throw exception</p>

<p>用error-handling处理预期会发生的情况，用断言处理绝不该发生的情况</p>

<p>把断言看做是可执行的注解，如果检查的目标变量来自系统外部，用error-handling，如果来自可信的系统内部，用assert。</p>

<p>Design by Contract, 用断言来注解并验证precoditions and postconditions</p>

<h4>Error-Handling Techniques</h4>

<p>可以考虑的做法：换用下一个正确的数据，用最接近的合法值，把警告信息记录到日志，返回错误码，调用集中处理错误的对象或者routine，显示出错消息，局部最优地处理错误，关闭程序</p>

<p>Robustness vs. Correctness</p>

<ul>
<li>两者的选择很可能是冲突的，要根据具体情况trade-off. (注：开发的时候求Correctness, production求Robustness)</li>
</ul>


<p>保持异常处理的一致性</p>

<h4>Exceptions</h4>

<p>什么时候抛出异常？遇到了意料之外的情况，举起双手说，“我不知道怎么处理，谁来告诉我该怎么办！”异常机制的优越性在于，提供了一种<strong>无法被忽略</strong>的错误通知机制，其他的机制可能会导致错误在不知不觉中扩散。</p>

<p>C++ vs. Java on Exception Handling</p>

<ul>
<li>C++不支持<code>try-finally</code>，但是Java支持。</li>
<li>C++可以抛出各种数据类型，Java只能抛出Exception的派生类</li>
<li>如果异常未捕获，C++ call <code>std::unexpected()</code> - <code>std::terminate()</code> - <code>abort()</code>, Java: if it is a &#8220;checked exception&#8221; terminate the thread. If it is a <code>RuntimeException</code>, 不产生任何影响 TODO checked vs runtime exceptions in Java</li>
<li>Java必须在类的接口中定义可能会抛出/捕获的异常，而C++不用</li>
</ul>


<p>避免在构造函数和析构函数中抛出异常，除非你在同一地方把他们捕获</p>

<p>在恰当的抽象层次抛出异常</p>

<figure class='code'><figcaption><span>Coding Horror</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//                             EmployeeDataNotAvailable</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">TaxId</span> <span class="nf">GetTaxId</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">EOFException</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>避免使用空的catch语句</p>

<p>考虑创建一个集中的异常报告机制，<code>void ReportException(className, Exception)</code></p>

<p>想清楚为什么要使用异常，除了异常还有其他的error handling techniques, 不能仅仅因为编程语言提供了这种机制而使用他，这是一种典型的&#8221;Programming in a Language&#8221; 而非我们提倡的 &#8220;Programming into a Language&#8221;</p>

<h4>Barricade Your Program to Contain the Damage Caused by Errors</h4>

<p>在外部的不可信的脏数据和内部的可信的类之间搭起“防火墙”，统一负责数据的清理工作。这种清理甚至可以有多层。Barricades的外部用error-handling techniques, 内部用assertion. 如果内部assertion检测到了错误，说明错误来自于程序内部，而非外部数据的错误。</p>

<h4>Debugging Aides</h4>

<p>Don&#8217;t Automatically Apply Production Constraints to the Development Version. 为了开发便利，可以采取开发版本不允许的一些做法。</p>

<p>Introduce Debugging Aids Early</p>

<p>Use Offensive Programming: 在开发阶段让异常显现得更猛烈些吧，在产品运行阶段让它能够自我恢复。</p>

<p>Plan to Remove Debugging Aids</p>

<ul>
<li>Use version control and build tools like make</li>
<li>Use a built-in preprocessor</li>
<li>Write your own preprocessor</li>
<li>Use debugging stubs (写routine检查，完结后去掉routine里面的东西)</li>
</ul>


<h4>Determine How Much Defensive Programming to Leave in Production Code</h4>

<ul>
<li>Leave in code that checks for important errors. Remove (with verison control, precompiler switches, etc.) code that checks for trivial errors.</li>
<li>Remove code that results in hard crashes. Leave in code that helps the program crash gracefully (显示debug信息)</li>
<li>Log errors for your technical support personnel</li>
</ul>


<h4>Being Defensive About Defensive Programming</h4>

<h3>The Pseudocode Programming Process</h3>

<p><strong>Abstract</strong> 本章讲述了如何利用伪代码简化routine的编码流程。伪代码让你更明确方向，更容易修改。</p>

<p><strong>Keywords</strong> PPP</p>

<p>如何写routine，作者最喜欢 Pseudocode</p>

<ul>
<li>好的伪代码应该忽略编程语言的细节，在intent层面上编码</li>
<li>伪代码可以作为注释，在写代码的时候逐渐被删除掉</li>
</ul>


<p><strong>在通过编译后，在debugger中逐行执行代码，以检查错误</strong></p>

<p>一件事情完结的时候，不要忘记清理工作！不清理就是没做完！</p>

<p>Peer review! 绝大部分的问题出在自身</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[印度理工的手段]]></title>
    <link href="http://www.puncsky.com/blog/2014/02/16/iit/"/>
    <updated>2014-02-16T23:20:00-08:00</updated>
    <id>http://www.puncsky.com/blog/2014/02/16/iit</id>
    <content type="html"><![CDATA[<p>印度给人最初的映像是如此的“脏乱臭”：去孟买，下了飞机机场外面就是最大的贫民窟，公路不行。坐火车，里里外外全是人，被戏称为开挂了的民族。余秋雨在《<a href="http://book.sina.com.cn/longbook/1087457725_chuzou/29.shtml">我拒绝说它美丽</a>》是这样描述恒河晨浴的：</p>

<blockquote><p>这么多蚂蚁一般等死的人露宿河边，每天有多少排泄物？因此整个河岸臭气冲天……焚烧一直没停，恶臭扑鼻，工人们浇上一勺勺加了香料的油脂，气味更加让人窒息。这一切不仅让所有的人都能看到，而且居然成了恒河岸边最重要的景观。几个烧尸坑周围很大一片陋房，全被长年不断的烟火熏得油黑。 火光烟雾约十米处，浮着半头死牛，腔体在外，野狗正在啃噬。再过去几步，一排男人正刷牙咽水，一口又一口。</p></blockquote>

<p>但是，普天之下，谁不知晓印度在IT行业的地位？</p>

<p>单就我个人所见，这辈子看的第一本编程书就是印度人写的。在耶鲁大学计算机系见识到了吃素还这么圆圆的印度女同学，以及言辞敏捷的博士生。找工作面试，在硅谷遇到了一大波印度大哥、大叔和大妈。而如今，我在微软工作的组尽管比较国际化，但也有不少印度人。有朋友说，他们组几乎全是印度人……更别说Satya Nadella临危受命微软CEO。当然我们华人在IT业也有Steve Chen, Jerry Yang, Qi Lu，但是高层队伍显然是不如印度人壮大的。</p>

<p>这是什么原因呢？也许正是因为印度基础设施建设比较落后，以至于那里大量的人们群众们不得不天天宅在家里，打坐、拜神、瑜伽、编程。还有就是，人多地少、基础设施差、资源竞争激烈，移民英语国家就好处更多，生活水平能够得到极大的改善，动力也就越足。英语作为第二官方语言，融入西方肯定比我们更加容易，也更加源远流长。</p>

<p>当然，仅仅靠自己意淫是不够的，于是我怀着崇敬的心情翻开《印度理工学院的精英们》这本书，想要一窥印度工程师教育的伟大之处。隔壁的隔壁的办公室有位小哥就毕业于IIT-Bangalore，俊朗冷漠……上到Gill Gates, Jeff Bezos, Mark Chandler，下到清华贵系的普通学生们，都对IIT的校友赞不绝口。</p>

<p>纵观此书，IIT校友之强悍，特色有三：</p>

<ol>
<li><strong>最强的学生接受着最好的美式高等教育资源。</strong>印度理工学院入学考试JEE年录取率约1.25%，在校学生女生仅约3%。号称地球上最难进的理工学院。这当然意味着他的学子们极富坚忍卓绝的品质：要么刻苦勤奋学习有方，要么聪明绝顶。某些校区甚至最初直接是在MIT, Cornell, Columbia, CalTech 等大学的帮助下建立起来的。既有印度大学也有美国大学的教授。</li>
<li><strong>仰望星空（天之骄子的责任感），脚踏实地（大量的实习项目）。</strong>学生有着很高的社会认同感，不需要通过非学术平台表达呼声，除了培养“能力”，不用操心其他。承载着“中产阶级梦想”，毕业理所当然要成为领导者（思维惯性！）。良好的工学传统能在诸多方面体现出来，比如，印度理工的毕业论文需要准备300个小时，而麻省理工需要120个小时。《三个傻瓜》里面能够看到他们在车间里上课。</li>
<li><strong>适应高压力的竞争、为达到目的不择手段的务实精神。</strong>想不到这种学校也有作弊的传统，在Kharagpur校区，“考试作弊”的艺术被称为拓扑学（topology）。对高强度的工作、紧迫的deadline的高度习惯，平常对待这些压力直到最后一刻，是成功者不可或缺的品质。</li>
</ol>


<p>有趣的是，此书在强调个人的智力、心理素质之外，似乎从未涉及体育运动方面的话题。而我注意到<strong>清华建校之初就有其独特的体育传统，是很多其他学校见不到的，学生尽管如此崇尚学术、思想自由，但却又秩序井然、按部就班崇尚集体，对竞技体育热情似火fight to the finish and never say die</strong>。他们成群结队来到田径场、体育馆、篮球场、游泳池参与体育活动。当年在清华时实验室的小伙伴们就有羽毛球、轮滑、单车、游泳（其实是为了洗澡吧……）等诸多喜好。</p>

<p>另外，此书还着<strong>重强调了文科教育对领导力的重要性</strong>。IIT学子与清华北大比起来，缺乏强有力的政治理想。或许是因为课业过于繁重，而种姓和背景关系问题堪比我国更甚吧。此书有两处地方让我记忆深刻引以为戒：</p>

<blockquote><p>可悲，他们对于印度经济或者政治状况或与社会有关的任何事都漠不关心，他们是非常乏味的一群人，这真是让人气愤，那些学生们成天只知道埋头苦学计算机编程，除此之外，别无其他。而且，还成天梦想着成为硅谷的百万富翁、或者跨国公司的首席执行官。要想实现这一梦想，你至少需要了解一些除了编程或者答题技巧之外的东西吧。</p>

<p>为了考试放弃了其他一切活动，从而变得孤僻……想象一下，一个19岁的男生5年没看过电影，没读过一本课外书，没看过电视甚至连女孩都没有追过，这是怎样的一个人啊。</p></blockquote>

<p>当然，高等教育的绝大多数理想是共通的。此书强调，<strong>学术严谨，生活自由</strong>，严谨意味着高门槛，自由意味着趣味性与多样性。还有一个值得注意的点是，<strong>个人利益与国家利益的一致性</strong>。爱国不是教育出来的，国家只有把两者调和一致了，才能真正让人感受到，爱国就是爱自己。书中人物一致认为印度不因当限制“人才外流”，更有人把海外人才视为“人才银行”，是一种储备，而非损失。</p>

<p>书中开篇就提到了，印度中产阶级的两大理想，一是通过个人奋斗出类拔萃，即便“上面没人”也能够成为杰出领袖；二是到美国去。此书有不少章节谈到“美国vs回国”的问题。大体来讲，留在美国的好处是：</p>

<ol>
<li>舒适的生活；</li>
<li>追求一流的科学技术的使命；</li>
<li>强烈的正义感和公平意识。</li>
</ol>


<p>回到印度的原因：</p>

<ol>
<li>家庭；</li>
<li>机会。</li>
</ol>


<p>此处不必过多解释，在美帝打工的同志应该会深有共鸣吧。</p>

<p>最后，此书此书总体感觉略显浮夸（确实是印度人的风格），全篇没有意外，若非特别好奇，不看也罢。就交流沟通和工程能力上，中国工程师的确应该好好向印度同仁们看齐。此书翻译有些许错误，比如176页，斯坦福大学显然不在康涅狄格州，那是我大康州的Stamford!</p>

<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[心如止水不可达到]]></title>
    <link href="http://www.puncsky.com/blog/2013/12/24/unreachable-peace/"/>
    <updated>2013-12-24T18:23:00-08:00</updated>
    <id>http://www.puncsky.com/blog/2013/12/24/unreachable-peace</id>
    <content type="html"><![CDATA[<p>年关将近，不知道小伙伴们是不是忙到不可开交呢？又或者正是因为太忙，一日复一日，一睁眼上班一闭眼睡觉，突然发现，找不到人生的激情了呢？人人都称赞心如止水是何等高超的境界，可是，修行者自身一旦意识到了自己心如止水，产生了情绪，恐怕就已经偏离了这种状态吧，Shunryu Suzuki在《Zen Mind, Beginner&#8217;s Mind》便有类似的论述。电影《卧虎藏龙》中，大侠李慕白闭关修炼，一心求道而不得，也坦陈：</p>

<blockquote><p>“这次闭关静坐的时候，我一度进入了一种很深的寂静，我的周围只有光，时间空间都不存在，我似乎触到了师傅从未指点过的境界”，“我并没有得道的喜悦，相反的却被一种寂灭的悲哀环绕。”</p></blockquote>

<p>没有情绪的人应该会很无聊吧，就像没有灵魂的机器。《钢之炼金术士》中“等价交换”几乎可以帮助人们制造任何事物，但惟独无法复活生命，因为没有什么能够替代灵魂。记得有人曾经说过，情绪乃动力之源(Emotion is energy for motion)。“这个时代最杰出的心理医生” Scott Peck言，整个宇宙无可避免地走向混沌，是什么样伟大的动力才能够反熵呢？是爱。 《恋爱的犀牛》编剧廖一梅则反复强调杜拉斯的神句：“爱之于我，不是肌肤之亲，不是一蔬一饭，它是一种不死的欲望，是疲惫生活中的英雄梦想。”</p>

<p>是啊，让Sherlock Holmes never get bored的恐怕不是罪恶本身，而是与精妙犯罪斗智斗勇的乐趣而产生的爱吧，被Moriarty调戏的Sherlock暗地里应该会很开心。毛主席教导我们，与人斗其乐无穷。《纸牌屋》中Claire的追求者无数，却唯独选了最会“与人斗”Francis，为什么呢？</p>

<blockquote><p>“You know what Francis said to me when he proposed? I remember his exact words. He said, ‘Claire if all you want is happiness, say no. I’m not going to give you a couple of kids and count the days until retirement. I promise you freedom from that. I promise you you’ll never be bored.’ You know, he was the only man—and there were a lot of others who proposed—who understood me.”</p></blockquote>

<p>反念一想，驱动于情绪，never get bored，管它是好是坏。心中有了波澜，有了些动力，然后再“少想那些没用的，该干嘛干嘛去。”孔子先有了不舍昼夜的思考，才会说“吾尝终日不食，终夜不寝，以思，无益，不如学也。”</p>

<p>这样一来，波澜过后的平静，虽少了些宁谧，却反而多了几分禅的意味。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joel Spolsky: 开火中前进]]></title>
    <link href="http://www.puncsky.com/blog/2013/12/24/fire-and-motion/"/>
    <updated>2013-12-24T16:21:00-08:00</updated>
    <id>http://www.puncsky.com/blog/2013/12/24/fire-and-motion</id>
    <content type="html"><![CDATA[<p>作者：<a href="http://www.joelonsoftware.com/articles/fog0000000339.html">Joel Spolsky</a></p>

<p>译者：<a href="http://www.puncsky.com">Puncsky</a></p>

<p>总有些时候，我就是什么事都干不了。</p>

<p>当然了，我还是会去上班，走进办公室，磨磨洋工，每隔几十秒就查查电邮，上上网，甚至还做点儿不用动脑子的事情，比如付运通信用卡账单。但唯独没法回到写代码的状态。</p>

<p>这种毫无产出的异况通常会持续一两天，但在我作为软件开发者的职业生涯中，曾有数周持续如此，什么也干不了。正如他人所说，我百无聊赖、状态不佳、诸事不顺。</p>

<p><img src="http://www.joelonsoftware.com/pictures/bored-tetris.gif" alt="Tetris" /><br/><i>诸事不顺的俄罗斯方块君</i></p>

<p>人人都会有情绪波动，有人来的平和、有人来得猛烈，甚至很崩裂。没有产出的状态似乎确实和低落的情绪有关。</p>

<p>这让我想到了，有研究者称，人们基本上是无法控制自己饮食的，所以任何节食的企图都注定夭折，体重也总是会波动回到正常水平。也许作为软件开发者，我真的是无法控制自己的产出，所以我不得不任其波动，只求快慢相抵，平均下来代码的行数足够让我有口饭吃。</p>

<p><img src="http://www.joelonsoftware.com/pictures/bored-onion.gif" alt="Go read The Onion for a while." /><br/><i>来读读洋葱报吧</i></p>

<p>让人兴奋的是，自打第一份工作起，我就意识到，作为开发者，我平均下来每天只有两到三个小时的高效编程时间。当年我在微软暑期实习的时候，曾有个实习生告诉我，他实际上每天12点到、5点走。上班时间只有五小时，还包括吃午饭，但他的团队就是爱死他了，因为他仍能够顺利完成很多任务，远高出平均水平。我发现我也是这个状态，但难免稍感愧疚：其他人都好像是在忙忙碌碌的，我只不过每天花了两三个小时有效工作，却仍够久居团队中最有效率的成员之列。也许这正好解释了，为什么人件理论和极限编程一再坚持，要消灭加班，限定每周工作40小时，因为他们很清楚，这么做绝不会削减团队的产出。</p>

<p>一天“只”干两小时的活不是问题，什么都干不了才是问题。</p>

<p>我一度反复斟酌过这类问题。我想起了职业生涯产出最丰硕的时候，那时我刚搬到微软一间光鲜奢华的新办公室。透过大大的落地窗，可以俯瞰一隅石庭，遍布樱桃树一树一树的花开。万物勃发。几个月来，我马不停蹄地在打造Excel Basic的详细设计规格书——一大摞纸，涉及了庞杂的对象模型及编程环境的方方面面。我还真就没罢手过。甚至连参加麦金塔世界大会(MacWord)，不得不去波士顿的时候，我也带着笔记本电脑，坐在哈佛商学院风景怡人的露台上，为 Window 类写文档。</p>

<p>一旦你进入状态，要顺势连轴转并不困难。通常我的一天是这样子的：(1)上班。 (2)查邮件、上网等。 (3)决定开始干活前还是先吃个午饭吧。 (4)午饭归来。 (5)查邮件、上网等。 (6)终于决定得开始干活了。 (7)查邮件、上网等。 (8)决定真的得开始干活了 (9)打开该死的编辑器，然后 (10)不停地写代码，无视时间流逝，直到已然晚上七点半。</p>

<p>我并非总能逾越步骤8和步骤9之间那条鸿沟，那里似乎混进了奇怪的bug。对我来说，开始干活正是唯一困难之处。静止的物体在不受外力的作用时会保持静止。我的脑海里有个笨重的东西，极其难以加速，但是一旦全速运转，保持状态则毫不费力。正如单车越野自驾游时，全副武装的单车——刚开始骑，很难想象得费多大劲儿才能蹬转它，但是一旦骑起来，轻轻松松地就感觉不到这些装备的存在了。</p>

<p><img src="http://www.joelonsoftware.com/pictures/bike-trip.jpg" alt="bike trip" /><br/><i>单车之旅</i></p>

<p>也许这就是高产出的关键：马上开工。也许结对编程之所以成功，是因为你得安排某段时间编程，和另一个哥们一起，互相敦促对方开始。</p>

<p><img src="http://www.joelonsoftware.com/pictures/ARMY-wee.JPG" alt="Joel in the Army" /><br/><i>阿兵哥Joel</i></p>

<p>我在以色列当伞兵时，曾有一位将军造访，给我们讲授战术战略，他说，步兵战术其实只有一种：开火中前进。向敌人开火的同时接近敌人，开火迫使对方低下头来，而无法向你开火。（这也是士兵们大喊“掩护我”的原因，这话的意思是“这边，在我冲过街道的时候，向我们的敌人开火，迫使其躲入掩体，而无法向我射击。”就是这样。）你冲锋陷阵，越接近敌人，就越可能击中目标。如果你不前进，换做对方争得先手，你将大事不妙；如果你不开火，换做对方向你开火，你将寸步难行。</p>

<p>我对此记忆深刻。我注意到，几乎所有的军事策略，上至空军空战、下至海军演习，都基于开火中前进的理论。又过了十五年，我才意识到，开火中前进也是人生中做事的法门。你应当每天前进一小步。代码弱爆了、有bug、没人要，没有关系的。只要你一直前进，只要你一直写代码修bug，滴水也能穿石。当你的竞争对手向你开火的时候，要小心了，他们的目的，是不是仅仅是为了让你疲于应付，止步不前？</p>

<p>想想微软的历任数据接入方案：ODBC、RDO、DAO、ADO、OLEDB，到现在的ADO.NET，反复翻新，技术上有必要吗？还是因为某个设计组实在太渣太坑爹，不得不他娘的每过一年就重造一遍数据接入技术？(事实上，可能还当真如此。)但其终极目的，说白了仅仅是一道火力掩护，竞争对手别无他法，只能疲于奔命地移植代码，耗掉他们本可以用于开发新功能的宝贵时间。仔细观察软件业的天下大势，那些做得好的公司对大公司依赖最少，自然不必把自己一个个软件开发周期，都耗费在跟风、重写、修那些仅仅在 Windows XP上出现的bug上面。那些垮掉的公司则花费了太多时间占卜微软未来的方向。有些人见了.NET就发怵，要按.NET来重写自己的整个架构，以为自己别无选择。看清楚了，哥们儿！微软这是在向你开火呢，这仅仅是道火力掩护，以便他们大步向前，而却让你止步不前，因为这，就是游戏规则。想要支持Hailstorm? SOAP? RDF? 你支持它的原因，是你的客户当真需要它呢，还是说谁在向你开火，你不得不做出反应呢？大公司的销售部门深谙火力掩护的道理，他们见到客户就说，“好的，您不必从我这买。从最好的供应商那买。我们只是想提醒您，下单前最好确认一下产品对(XML / SOAP / CDE / J2EE)的支持，否则您将会被他们的技术套牢。”然后，当一些小公司向这些客户推销的时候，那些听话的CTO们就会喋喋不休“你们支持J2EE吗？”于是，小公司们回去埋头用J2EE构建产品，尽管这并不能够真的促进销量，连他们出类拔萃的机会也搭进去了。其实，这不过是一个复选框(checkbox)功能——你做它仅仅是因为复选框告诉你你要做，但没人真正用它、或需要它。这，就是火力掩护。</p>

<p>开火中前进，对像我们这样的小公司而言，意味着两点：第一，你要争取足够的时间；第二，你要每天向步步向前。如此这般，胜利女神就会迟早站在你身边。昨天，我做成的事情仅仅是把 FogBUGZ 的配色方案改好看了一点点，可是这没有关系，只要软件总是在向好的方向发展就行。每一天，我们的软件越来越好，每一天，我们的客户越来越多，这才是真正重要的。除非到了Oracle这种公司的规模，我们甚至都没必要有什么宏韬伟略、深谋远虑。我们需要做的仅仅是，每早来到公司，拼死拼活，打开编辑器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你做了土豪又怎样？]]></title>
    <link href="http://www.puncsky.com/blog/2013/11/06/masters-of-doom/"/>
    <updated>2013-11-06T18:33:00-08:00</updated>
    <id>http://www.puncsky.com/blog/2013/11/06/masters-of-doom</id>
    <content type="html"><![CDATA[<p>最近，美帝著名软件工程师兼企业家、Stack Overflow的联合创始人Jeff Atwood写了一篇名为《<a href="http://www.codinghorror.com/blog/2013/10/you-dont-need-millions-of-dollars.html">You Don&#8217;t Need Millions of Dollars(你做了土豪又怎样？)</a>》的博客，介绍了《<a href="http://book.douban.com/subject/1152971/">Doom启世录</a>》这本书。</p>

<p>我早年正是受到了这本书的激励，热血沸腾，走上了软件开发的道路。受到这本书和一位CS PhD的启发，你若问我的梦想是什么，我的梦想是在海边有所房子，面朝大海，春暖花开，每天躺在甲板上，望着湛蓝的天空，随着碧绿的海水飘荡，做点什么呢？写写代码写写诗…… 是不是颇有&#8221;浴乎沂，风乎舞雩，咏而归&#8221;的感觉？</p>

<p>如果你和我一样把Coding当做终身乐趣，那你一定能够在此书中找到强烈的共鸣 :D</p>

<p>以下是我的翻译。</p>

<h1>你做了土豪又怎样？</h1>

<p>作者：<a href="http://www.codinghorror.com/">Jeff Atwood</a></p>

<p>译者：<a href="http://www.puncsky.com/">Puncsky</a></p>

<p>《<a href="http://book.douban.com/subject/1152971/">Doom启世录</a>》讲述的是John Carmack和John Romero的故事，他们创造了大名鼎鼎的德军总部3D、毁灭战士、雷神之锤等游戏。此书在诸多方面皆属于上乘之作——但主要还是归功于作者详实的考据。</p>

<p><a href="http://www.amazon.com/exec/obidos/ASIN/0812972155/codihorr-20"><img src="http://www.codinghorror.com/.a/6a0120a85dcdae970b019b001c3833970b-800wi" alt="Masters of Doom" /></a></p>

<blockquote><p>为了再现两位John的故事，我在这六年里采访了数百次，同一个人也可能在不同场合采访多次。2000年的夏天，为了这本书，我搬到Dallas，名扬全镇，被称为“写这本书的那个人”。John Romero和John Carmack各自与我当面交谈了数十个小时，回答了我大多零碎的问题：他们当时感觉如何，有什么样的想法，他们说过、听到过、看见过、或者玩过些什么。如果当事者无法回忆起来，我会发掘网站、新闻组、电子邮件、聊天记录、杂志（尽管我参考这些，但是我更加重视当事人自己的观点）。我也曾经沉迷在他们的游戏世界当中，（是的，无法自拔），在家联机、或者参加联赛。</p>

<p>我花了六个月将磁带录音转录成脚本，并据此撰写了文本，尽可能地详实有据地再现当时的情况。为了让读者更好地理解，本书经常以众人不同的角度来讲故事。</p></blockquote>

<p>通常很难有一本书在讲述错综复杂的友谊与利益冲突的同时，能够得到当事人双方的认可；哪怕这本书已经风靡了十多年。这也证明了Kushner这本书之<em>好</em>。<strong>这本书正是行业人物传记之典范，考据详实，观点多元。</strong>从这点上来讲，跟《<a href="http://www.amazon.com/exec/obidos/ASIN/B004W2UBYW/codihorr-20">乔布斯传</a>》恰恰相反。《乔布斯传》尽管我还挺喜欢，但是它观点单一，考据懒散。如果真有哪本写乔布斯的书能够像此书这么优秀，我也就能够心满意足地<em>洗洗睡了</em>。</p>

<p>可以说，我跟这俩哥们是同一时代的人，我几乎与他们同岁。虽然我错过了德军总部3D，因为那个时候我还在上大学，但是到了1993年12月，我和所有早年的PC玩家一样，望眼欲穿毁灭战士的发售。那么，又是谁让毁灭战士家喻户晓的呢？说来诡异，是汤姆克鲁斯。</p>

<iframe width="560" height="315" src="http://www.puncsky.com//www.youtube.com/embed/xa2OAhf0R_g" frameborder="0" allowfullscreen></iframe>


<p>德军总部3D和毁灭战士让我成了第一人称射击的终身脑残粉——我死磕过每一款毁灭战士引擎的游戏作品，我甚至一度在拨号上网时代的线上游戏中心<a href="http://en.wikipedia.org/wiki/DWANGO">DWANGO</a>遇到过Romero本人，并“跪舔”之。95年互联网浪潮开始后，我转战互联网，穷尽所能下载每一个雷神之锤的更新包，目睹了Remoro与Carmarck的分道扬镳，GLQuake和3D加速的异军突起，一路走到雷神之锤3。</p>

<p>同时，这本书更是振奋人心的励志故事。这是一堆屌丝极客码农们筚路蓝缕，从无到有，自力更生，创造一整个产业的故事。</p>

<blockquote><p>共享软件，Remero对此并不陌生。这就得讲到Andrew Fluegelman，他是PC World杂志的创始主编。1980年，Fluegelman写了一款名为PC-Talk的软件，并将其发布在互联网上，宣称任何喜欢这款软件的人请不要客气随意送他一些辛苦钱。很快，他不得不雇佣员工帮他数支票。Fluegelman称之为“共享软件”，“一次经济学实验”。八十年代过后，其他黑客们接过共享软件的大旗，为苹果、PC和任何其他的设备写代码，遵循同样的模式：试一试，喜欢才给钱。支付的费用可以进一步给用户带来技术支持和产品升级。</p>

<p>共享软件专业协会估计，光在美国国内，就算只有10%的用户愿意支付，共享软件市场也在一两千万美元之间。1988年，福布斯杂志惊异于这一趋势，评价道，“如果你认为这都不算踏实的生意，请三思。”共享软件并不依靠狂轰滥炸的广告，而是在于口口相传，用销量说话。某顶级程序员Robert Wallace，写出共享软件PC-Write文字编辑器，竟然成就了一个百万级别的软件帝国（译者注：尽管最后还是被微软Office击败了。）但是，大多数的作者能够拿到上十万就不错了，一般还是每年获利略多于25,000美元。一年一千份的销量就可以算是很成功了，总的来说共享软件的概念当时仍旧新潮激进，多数为&#8221;实用软件&#8221;，比如用来记账、文字处理，尚未在游戏领域流行。</p></blockquote>

<p><strong>还有人记得共享软件么？</strong>我们这个年代与之类似的是什么？在互联网上发布软件么？算是，但我觉得答案更可能是各种应用商店：Google Play, Apple App Store, Windows Store。能够够直达用户。但是，他们发现，共享软件概念在游戏方面不管用，至少刚开始的情况是：</p>

<blockquote><p>到了发布游戏的时候，Scott仔细研究了共享软件市场，感觉很好，完全可以绕过中间的发行商代理商，全部自己搞定。于是他放出了两款完整的文字游戏，坐等收钱。可惜钱并不赏脸，一个铜板也没有。他发现，游戏玩家与实用软件用户很不一样，后者愿意为实用软件付费，但前者更倾向于免费获取。Scott打听之下，发现他并不孤单，其他的共享游戏作者也都破产了。他想，人们也许会诚实守信，但大多懒惰，需要激励。</p>

<p>后来他想到，<em>与其一次放出整个游戏，为什么不先放出一部分，让玩家来买剩下的部分呢？</em>没有人这样做过，但也没有理由不成功。Scott制作的游戏也颇适合这种付费模式，因为这些游戏由很多幕故事、或者多个等级组成。先放出十五级的游戏，玩家寄支票，他就送出剩下的三十级。</p></blockquote>

<p>关键是，你知道吗，当今的游戏开发商花了近五年的时间才明白这样一个道理——<strong>纯免费游戏加百分百的内置购买</strong>才是最佳的（或许也是唯一的）游戏商业模式。人家id公司的这两个家伙<em>二十七年前</em>就明白了。远方飘来了<a href="http://www.youtube.com/watch?v=bE_1tCasi_Q">历史重现的声音</a>。</p>

<p>id软件不仅仅贡献了这种革命性的商业模式，把权力之杖交还了程序员，更重要的是，一位天才程序员——<a href="http://en.wikipedia.org/wiki/John_D._Carmack">John Carmack</a>——就此横空出世，是他发明了PC游戏领域前所未有的新技术。今天听来，这或许耸人听闻、或许老生常谈，但是在Carmack创造出游戏引擎之前，横版游戏视角平滑滚动、墙面纹理贴图、灯光模型、高速3D渲染这些概念，其实是人们闻所未闻的。是他普及了这些概念。</p>

<p><img src="http://www.codinghorror.com/.a/6a0120a85dcdae970b019b001ca1e5970c-800wi" alt="John Carmack" /></p>

<p>Carmack就是编程界的传说，类似<a href="http://www.codinghorror.com/blog/2009/04/i-happen-to-like-heroic-coding.html">Abrash</a>。这本书描述Carmack之神，老实说，近乎恐怖。他痴迷于机器的极限；每周工作80小时；所谓“放假”就是抱着计算机上旅馆开房一整周——纯粹是为了<em>好玩</em>，<em>放松一下</em>。他的产出属于神的级别，但是他也很谦虚地意识到，他站在巨人的肩膀上。</p>

<blockquote><p>Al（人名）从未在PC上见过横向卷轴游戏，他对Carmack说道，你应该申请专利。</p>

<p>Carmack怒了，如果你再提起任何申请专利的事情，他突兀道，我就不干了。Al原以为Carmack会维护他自己的经济利益，但是实际上这触碰到了Carmack愈发脆弱的神经，一颗年轻气盛的、理想主义的赤诚之心。少有事情能够真正触怒他，可这一次他真的愤怒了，<a href="http://en.wikipedia.org/wiki/Hacker_ethic">骇客信条</a>早已深深地刻到了他的骨子里。一切的科学、技术、文化、学习、学术本来就是建立在前人的基础之上，而专利却宣称，这个点子是我的点子，你无论如何都不能够拓展它，因为它是我的——这是如此荒谬。专利正深深地伤害着Carmack全部生命的核心——书写代码，解决问题。如果不触犯专利就不能解决问题，如果这个世界变成了这样一个世界，他会极为难过。</p></blockquote>

<p>本着这样的精神，Carmack常常<a href="https://github.com/id-Software">基于GPL发布旧的引擎</a>，以供其他程序员学习。比如，不要错过Fabien Sanglard的<a href="http://fabiensanglard.net/doom3/">这篇史诗级Doom3代码解析</a>，这款引擎比<a href="http://en.wikipedia.org/wiki/Id_Tech_5">现在最新的id引擎</a>(即将应用在Rage和Doom 4)仅仅落后一代。</p>

<p>我最喜欢的格言便来自此书的结尾：</p>

<blockquote><p>Carmack鄙视冠冕堂皇、夸夸其谈，但是非要他说些什么的话，他会说，“信息时代本无极限，障碍尽在人心。如果你打算扬帆起航、开发伟大的新产品，你不必拥有百万资本，你需要的仅仅是披萨和无糖可乐常驻冰箱、廉价PC伴你左右、以及为事业献身的决心。我们在地板上睡过，我们从河水中趟过。”</p></blockquote>

<p>确实，他们做到了，如同此书所证明。<a href="https://twitter.com/ID_AA_Carmack">@ID_AA_Carmack</a>和<a href="https://twitter.com/romero">@romero</a>两人仍旧是游戏和编程社区的终身成员，影响显赫，鼓舞人心，因为爱，所以常在。</p>

<p><a href="http://www.amazon.com/exec/obidos/ASIN/0812972155/codihorr-20">《Doom启世录》</a>的终极启示在于，<strong>时至今日，想要成功，你都没有必要像John Carmack那般聪明</strong>，John Carmack自己就是最好的证明，当时坐在德州Mesquite某小办公隔间的John，辛苦悲催，在勉强能用的破电脑上，从零开始写代码，每周工作80个小时。而如今，你口袋里装着超级计算机，桌上摆着超级计算机，有大把大把的开源框架、开源库能够帮你干90%的工作，你有Github、维基百科、Stack Overflow，你拥有整个互联网。</p>

<p>你所要做的仅仅是，<a href="http://www.codinghorror.com/blog/2004/11/good-programmers-get-off-their-butts.html">开始写代码</a>、<a href="http://www.codinghorror.com/blog/2007/07/yes-but-what-have-you-done.html">一直写代码</a>。</p>

<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[白先勇: 从台北人到父亲与民国]]></title>
    <link href="http://www.puncsky.com/blog/2013/10/06/bai-xian-yong/"/>
    <updated>2013-10-06T13:30:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/10/06/bai-xian-yong</id>
    <content type="html"><![CDATA[<p>初识白先勇先生是源于三四年前北大的昆曲课，当时受挚友邀请，意图共赏如此高雅的艺术；可惜如我这般坐不住的男孩自然是对这等慢节奏的戏曲毫无兴趣、甚至是厌恶至极的，因此白先勇讲昆曲给我留下了极为深刻的印象。我至今还清楚得记得当时北大的某阶梯教室座无虚席，但是我却坐在那里百无聊奈，心中反复叨念着，真正属于年轻人的，应该是分秒必争的奋斗、高潮迭起的美剧、节奏欢快的摇滚。当然我也喜欢或舒缓唯美、或忧伤至死的New Age，但昆曲之缓慢、之细腻、之典雅，是我这种粗人极为不待见的：不要指望习惯川菜湘菜的年轻人会迷上过于原始的马赛鱼汤，尽管后者是那么的高雅。事有定期，物有定时，或许，等老到慢下来的时候，我才会去喜欢吧。</p>

<p>再次结缘则是今年春天，那个时候我正在为毕业发愁，心绪苍凉无处排遣，极其迷恋<a href="http://www.youtube.com/watch?v=UPF3IOMwq7w&amp;list=PLENvO5m4t66zfjjV17TJh2YJY46OKT-rY">范宗沛</a>的曲子，其中一曲<a href="http://www.xiami.com/song/10914">《戏水》</a>出自《范宗沛与孽子》；而<a href="http://book.douban.com/subject/1076654/">《孽子》</a>正是白先勇先生唯一的长篇小说。</p>

<p>既然游学美帝，就不得不提到华人第一代移民。短篇小说集<a href="http://book.douban.com/subject/5337243/">《纽约客》</a>讲述的就是他们的故事。尽管十几年后的今天，白净的手套、丝滑的礼服、夸张的首饰、锃亮的银器早已不再常见，但是即便是今天，在我们读书的学校，学子们仍然是踩着木地板，关门的时候会有好听的吱呀的声音，一尘不染的老钢琴汩汩流淌纯净恬淡的音符，混合着咖啡的芬芳…… 我们似乎依稀还能够看到他们当年的背影，可惜早已物是人非，他们已经垂垂老矣：英雄末路、美人迟暮。而又一代的年轻人，又在同样的大礼堂、同样的角度、抬头欣赏同样的大吊灯映出的、同样的穹顶、同样的精美的花纹……</p>

<blockquote><p>前不见古人</p>

<p>后不见来者</p>

<p>念天地之悠悠</p>

<p>独怆然而涕下</p></blockquote>

<p>雄心壮志的年轻人独自在异国开启一段新的生活，偶有闲隙静下来想一想，上面这首诗竟然是如此地贴切。此诚古之人不余欺也。至于<a href="http://zh.wikipedia.org/wiki/%E8%AC%AB%E4%BB%99%E8%A8%98">《谪仙记》</a>那位孤傲得让人怜爱的公主，死亡或许是她最好的归宿。</p>

<p>上周末，白先勇先生来到华盛顿大学西雅图分校，讲述<a href="http://book.douban.com/subject/10758695/">《父亲与民国: 白崇禧将军身影集》</a>写作的心路历程(<a href="http://books.google.com/books?id=dZmcAAAAQBAJ&amp;printsec=frontcover&amp;source=gbs_ge_summary_r&amp;cad=0#v=onepage&amp;q&amp;f=false">点此阅读该书</a>)。我将他的演讲，加上流传在互联网《从台北人到父亲与民国》的<em>公开资料</em>，以及自己的理解，整理而成以下部分。<strong>考虑到这些都是白先生的一面之词，以及我个人的解读，难免有失偏颇、或者有所疏漏。</strong></p>

<!--more-->


<blockquote><p>《乌衣巷》(唐) 刘禹锡</p>

<p>朱雀桥边野草花，乌衣巷口夕阳斜；</p>

<p>旧时王谢堂前燕，飞入寻常百姓家。</p></blockquote>

<p>中国自古就有文史不分的悠久传统，比如史记，被称为史家之绝唱，无韵之离骚。中国历史，悠久厚重，以至于大国兴衰更迭朝代，相似的情景一再重现。文人墨客们总是对“眼看他起高楼，眼看他宴宾客，眼看他楼塌了”这种沧桑感唏嘘不已。白先生最喜欢的是杜甫的秋兴八首。而刘禹锡《乌衣巷》凭吊的西晋东迁恰似民国从南京迁往台北，由胜而衰。随着年纪的增长，愈是感受得深切。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/baichongxi.png" height="450" width="300" align="middle"></p>

<p>为什么会有这样的感受？因为它是国民党国民革命军著名指挥官、一级上将<a href="http://zh.wikipedia.org/wiki/%E7%99%BD%E5%B4%87%E7%A6%A7">白崇禧</a>之子。毛主席称其为“中国境内第一个狡猾阴险的军阀”。白崇禧自从青年时期参加武昌起义以来，一生戎马倥偬，最后谢世于台北，已然见证了中华民国从无到有、极盛而衰的历史。父亲与民国，两者都是非常沉重的话题，白先勇先生的这本书正是为了纪念那个父辈忧患重重的时代。</p>

<h3>1. 辛亥革命</h3>

<p>戊戌变法失败，清廷腐朽，仁人志士们深刻地意识到了改良派只有死路一条。师从梁启超、唐才长的蔡锷，自日本留学归国后，辗转广西兼任广西陆军小学堂总办。白崇禧则是这所学校的学生。当时，年轻人受到改革的影响，纷纷涌向军校研习救国图强之道。</p>

<p>辛亥革命时期，武昌起义的消息传来，白崇禧参加了在广西成立的学生军敢死队，才18岁，就奔赴武昌参与革命。白崇禧见证了民国的诞生，一生对民国有着视如己出的深厚感情，这种感情绝不是领导者所能够左右的，所以他一生与蒋有着复杂的恩怨。</p>

<p>辛亥革命后，白崇禧考入保定军校三期，毕业后计划赴新疆屯边，他在学术上对中国边防研究颇深，欲效法左宗棠。</p>

<h3>2. 北伐</h3>

<p>北伐时期，白崇禧任国民革命军东路军总指挥。图为北伐最后阶段，在唐山召开军民大会。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/qixincijiu.png" align="middle"></p>

<p>白崇禧虽是南方人，但颇擅长马术，最爱名驹《回头望月》。此马原为张宗昌所有，全身金黄，日行八百华里，是关外第一宝马。马背近马尾处，有饭碗大小圆形白毛，故名。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/huitouwangyue.png" align="middle"></p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/tiejiache.png" align="middle"></p>

<p>北伐成功。广西军队打入北京，是历史上第一次。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/beifachenggong.png" align="middle" height="450" width="300"></p>

<p>白崇禧与北京故宫崇禧门。35岁的白崇禧到达了军旅生涯的第一次巅峰。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/chongximen.png" height="450" width="300" align="middle"></p>

<h3>3. 蒋桂战争</h3>

<p>招兵容易裁兵难。蒋桂战争爆发，中央军打入广西，白崇禧、李宗仁、黄绍竑流往海外。图为白入境越南的登记照。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/taofan.png" height="450" width="300" align="middle"></p>

<p>同年，三人返回广西，多次参与与蒋的内战。直至三一年九一八事变。</p>

<h3>4. 建设广西</h3>

<p>白崇禧、李宗仁、黄旭初将广西建设成为三民主义模范省，被称为“广西三杰”。图为徐悲鸿所作。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/guangxisanjie.png" align="middle"></p>

<h3>5. 全面抗战</h3>

<p>台儿庄大捷后，白崇禧成为抗日英雄，图为当时著名的《良友》画报的封面。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/liangyou.png" height="450" width="300" align="middle"></p>

<p>昆仑关大战。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/kunlunguan.png" height="450" width="300" align="middle"></p>

<h3>6. 胜利与内战</h3>

<p>冷欣中将代表将日本降书献中国战区统帅蒋介石。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/shengli.png" align="middle"></p>

<p>中山陵谒陵。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/yeling.png" align="middle"></p>

<p>至中山陵谒陵并至灵谷寺祭拜阵亡将士后，蒋介石（中）与白崇禧（右），何应钦（左）席地而坐共进野餐。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/yecan.png" align="middle"></p>

<p>至于为什么国民党会失败？白先勇先生认为主要是因为军事上的失败。蒋迫于马歇尔调停的压力、及其个人的判断错误，制止了白在东北对林彪赶尽杀绝的军事政策。图为蒋介石、白崇禧、杜聿明巡视沈阳东陵。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/dongbei.png" align="middle"></p>

<p>宋美龄举办圣诞派对宴请马歇尔，图片中的马歇尔却并不是那么开心。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/marshall.png" align="middle"></p>

<p>国党错失了遏制共党的黄金时期，蒋只会任人唯亲，搞派系斗争。杜聿明言，国民党将领只求对蒋个人效忠，而白崇禧则讲求战略战术。蒋一错再错，最后失掉了整个大陆。</p>

<p>图为白与蒋在大陆的最后一张合影，两人表情都不大好。</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/bai-chong-xi/chongqing.png" align="middle"></p>

<p>限于篇幅，此处只摘录了部分公开的图片，此书的正文可以在<a href="http://books.google.com/books?id=dZmcAAAAQBAJ&amp;printsec=frontcover&amp;source=gbs_ge_summary_r&amp;cad=0#v=onepage&amp;q&amp;f=false">这里看到</a>，演讲的课件可以在<a href="http://ocw.aca.ntu.edu.tw/ocw_files/100S227/100S227_AA07L01.pptx">这里下载</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Call-of-Duty Weekend Reading: Scaling Memcache at Facebook (NSDI '13)]]></title>
    <link href="http://www.puncsky.com/blog/2013/09/23/scaling-memcache-at-facebook/"/>
    <updated>2013-09-23T07:37:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/09/23/scaling-memcache-at-facebook</id>
    <content type="html"><![CDATA[<p>I felt a little under the weather last week, which prevented me from being productive. After a serious consideration over the last month (the first month I undertook a full-time job), I set up a new schedule for myself &#8211; get up earlier so that I can have at least four hours in the morning for my own work without any distractions. Hope I can persist with the amazing plan.</p>

<p>At the same time, as I have planned long ago, a new paper-reading project will be launched. Day after day, I find myself now soaked in technical details. It is good for improving my engineering skills, but not so good for seeing the big picture. Moreover, reading papers may be the best way to collect excellent ideas. At least, it is much better than reading newspapers, SNS feeds, and disappointing books (e.g. <a href="http://book.douban.com/subject/24335672/">淘宝技术这十年</a> ).</p>

<p>This paper comes from Facebook ( <a href="https://www.usenix.org/conference/nsdi13/scaling-memcache-facebook">video</a>, <a href="https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">paper</a>, <a href="https://www.usenix.org/sites/default/files/conference/protected-files/nishtala_nsdi13_slides.pdf">slides</a> ), and introduces how the KV store evolves at Facebook in these years.</p>

<p>Months ago, I posted a similar paper review, <a href="http://www.puncsky.com/blog/2013/04/06/dynamo-kv-store/">Dynamo: Amazon&#8217;s Highly Available Key-value Store (SOSP&#8217;07)</a>. Different from Amazon, Facebook built the KV store on the basis of existing open-source memcached (memcached refers to the source code, while memcache refers to the store system). One thing I notice to be in common is that both of them push complexity into the client whenever possible, because a lighter data store is more flexible. Both of them add additional marks along with the cached content for future processing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Essential C# 4.0: Advanced]]></title>
    <link href="http://www.puncsky.com/blog/2013/09/15/essential-c-sharp-advanced/"/>
    <updated>2013-09-15T13:58:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/09/15/essential-c-sharp-advanced</id>
    <content type="html"><![CDATA[<p>This is the third and final part of my series of notes on learning C#.</p>

<ol>
<li><a href="http://www.puncsky.com/blog/2013/08/14/essential-c-sharp-basics/">Essential C# 4.0: Basics</a></li>
<li><a href="http://www.puncsky.com/blog/2013/09/05/essential-c-sharp-intermediate/">Essential C# 4.0: Intermediate</a></li>
<li>Essential C# 4.0: Advanced(this post)</li>
</ol>


<p>In general, C# leaves me an unpleasant impression of redundancy and tyranny. The designers of the language seem to be always mocking &#8220;oh my stupid boy, we have to spare no effort to prevent you from making stupid mistakes~&#8221; However, this idea of design is <em>good</em> to some extend.</p>

<p>My passion on coding is mostly inspired by the colorful vim on Ubuntu. <em>It is amazing fun. I love it!!</em> So the first app I install on my new Windows workstation is, of course, cygwin. Now I have to use Visual Studio, so the first plugin I install on it is surely vsvim. Moreover, maybe I am not a guy of Eclipse. I can see no beauty and usability in it, although it is much more extensible than Visual Studio. The experience of configuring the build environment of Android and later Hadoop is awful and drives me crazy.</p>

<p>As to the last chapters of this book, I am not interested in muti-processing/multi-threading in Windows OS, which is much slower than *nix OS and thus somewhat boring. Windows was not designed to be a multiprocessing and multi-user platform in the first place; instead, it was originally intended for <em>personal</em> usage. So I just skimmed this chapter. Maybe I will revisit it someday when I have to exhaust the computing power on Windows. May that not happen.</p>

<p>At last, C# is not designed for manipulating pointers and addresses directly. Why do we bother to study it? We have C/C++ already. So I also just skimmed the last two chapters. :D</p>

<p>The following is my notes.</p>

<!--more-->


<h2>14 Collection Interfaces with Standard Query Operators 535</h2>

<ol>
<li>Anonymous Types

<ul>
<li><code>var patent = new {Title = "Bifocals", YearOfPublication = "1784"}</code></li>
</ul>
</li>
<li>Implicit Typed Local Variables (<code>var</code>)

<ul>
<li>There is no difference in the resultant CIL code for implic- itly typed variables whose assignment is not an anonymous type (such as string) and those that are declared as type string.</li>
<li><strong><em>still strongly typed as well by the compiler.</em></strong>

<ul>
<li><em>Language Contrast</em>: JavaScript&#8217;s var is dynamically typed. <a href="http://stackoverflow.com/questions/8457813/difference-between-the-implementation-of-var-in-javascript-and-c-sharp">See here</a>. C# is (usually) a statically typed language.</li>
</ul>
</li>
<li>You should use implicitly typed variable declarations sparingly

<ul>
<li>To accomplish this with implicitly typed local variables, use them only when the type assigned to the implicitly typed variable is entirely obvious and makes themselves more readable.</li>
<li>e.g. <code>var items = new Dictionary&lt;string, List&lt;Account&gt;&gt;();</code></li>
<li>e.g. <code>Dictionary&lt;string, List&lt;Account&gt;&gt; dictionary = GetAccounts();</code></li>
<li>the requirements for two anonymous types to be type-compatible within the same assembly are a match in property names, data types, and order of properties.</li>
</ul>
</li>
</ul>
</li>
<li>Collection Initializers</li>
<li>Collections

<ul>
<li>Arrays(length fixed, index operator supported)

<ul>
<li><code>foreach(TItem item in array) {}</code></li>
</ul>
</li>
<li>IEnumerable<T> (such as <code>Stack&lt;T&gt;</code>, <code>Queue&lt;T&gt;</code>, <code>Dictionary&lt;Tkey, Tvalue&gt;</code>)

<ul>
<li><code>while (stack.MoveNext()) {number = stack.Current; Console.WriteLine(number)}</code></li>
<li><strong>The state of moving to the next is shared.</strong> So we need <code>Enumerator</code> and <code>GetEnumerator()</code></li>
<li><code>Dispose()</code> the enumerator&#8217;s state. A more simplified version in the example.</li>
</ul>
</li>
<li><code>foreach</code> without <code>IEnumerable</code>?

<ul>
<li>&#8220;duck typing&#8221;: if no IEnumerable/IEnumerable<T> method is found, it looks for the <code>GetEnumerator()</code> method to return a type with Current() and MoveNext() methods. Duck typing involves searching for a method by name rather than relying on an interface or explicit method call to the method.</li>
</ul>
</li>
<li><strong><em>compiler prevents assignment of the foreach variable</em></strong> Do not modify the collection during a foreach loop.</li>
</ul>
</li>
<li><strong>Standard Query Operators</strong>

<ul>
<li>Each method on <code>IEnumerable&lt;T&gt;</code> is a standard query operator</li>
<li>Filtering with <code>Where()</code>

<ul>
<li>A delegate expression that takes an argument and returns a Boolean is called a <strong>predicate</strong></li>
</ul>
</li>
<li>Projecting with <code>Select()</code>

<ul>
<li><code>IEnumerable&lt;FileInfo&gt; files = fileList.Select(file =&gt; new FileInfo(file))</code></li>
<li>PLINQ(Parallel LINQ): <code>.AsParallel().</code> See CH18, CH19</li>
</ul>
</li>
<li>Counting with <code>Count()</code></li>
<li><strong><em>Deferring Execution</em></strong>: One of the most important concepts to remember when using LINQ

<ul>
<li>At the time of declaration(&#8220;.Where()&#8221;), lambda expressions do not execute. It isn’t until the lambda expressions are invoked (<code>foreach</code>) that the code within them begins to execute.</li>
<li><strong>To avoid such repeated execution, it is necessary to cache the data that the executed query retrieves.</strong> To do this, you assign the data to a local collection using one of the “To” method’s collection methods.</li>
</ul>
</li>
<li>Sorting with <code>OrderBy()</code> and <code>OrderBy().ThenBy()</code>

<ul>
<li>return a <code>IOrderedEnumerable&lt;T&gt;</code> instead of <code>IEnumerable&lt;T&gt;</code></li>
</ul>
</li>
<li><code>IEnumerable&lt;IGrouping&lt;int, Employee&gt;&gt; groupedEmployees = employees.GroupBy((employee) =&gt; employee.DepartmentId);</code></li>
<li><code>GroupJoin()</code>, <code>SelectMany()</code>&#8230;</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">using</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">.</span><span class="n">Generic</span><span class="p">.</span><span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">.</span><span class="n">Enumerator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="n">enumerator</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">enumerator</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">number</span> <span class="o">=</span> <span class="n">enumerator</span><span class="p">.</span><span class="n">Current</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">number</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>15 LINQ with Query Expressions 589</h2>

<ul>
<li><strong>More readable and SQL-like query expressions</strong>, when compared to Standard Query Operators</li>
</ul>


<h2>16 Building Custom Collections 611</h2>

<ol>
<li>More Collection Interfaces

<ul>
<li><code>IList&lt;T&gt;</code></li>
<li><code>IDictionary&lt;TKey, TValue&gt;</code></li>
<li><code>IComparable&lt;T&gt;</code></li>
<li><code>ICollection&lt;T&gt;</code></li>
</ul>
</li>
<li>Primary Collection Classes

<ul>
<li><code>List&lt;T&gt;</code></li>
<li><code>Dictionary&lt;TKey, TValue&gt;</code></li>
<li><code>SortedDictionary&lt;TKey, TValue&gt;</code> and <code>SortedList&lt;T&gt;</code></li>
<li><code>Stack&lt;T&gt;</code></li>
<li><code>Queue&lt;T&gt;</code></li>
<li><code>LinkedList&lt;T&gt;</code></li>
</ul>
</li>
<li>Providing an Index Operator <code>[]</code>

<ul>
<li><code>public T1 this[T2 index] {}</code> and <code>public T this[params PairItem[] branches] {}</code></li>
</ul>
</li>
<li>Returning null or an Empty Collection

<ul>
<li>The better choice in general is to return a collection instance with no items.</li>
<li>One of the few times to deviate from this guideline is when <code>null</code> is intentionally indicating something different from zero items. e.g. telephone number, <code>null</code> for not set, empty for no phone number</li>
</ul>
</li>
<li>Iterators, <code>IEnumerator&lt;T&gt;</code> and <code>IEnumerator</code>

<ul>
<li>If classes want to support iteration using the foreach loop construct, they must implement the enumerator pattern.</li>
<li>Defining</li>
<li>Syntax

<ol>
<li>the class should derive from <code>IEnumerable&lt;T&gt;</code></li>
<li><code>public IEnumerator&lt;T&gt; GetEnumerator() {}</code> method</li>
</ol>
</li>
<li><strong><em>yield</em></strong>

<ul>
<li>Iterators are like functions, but instead of returning values, they yield them. 生成一个个即将被iterate 的结果？</li>
<li><code>yield return SomeObject;</code> you can use yield only in <code>GetEnumerator()</code> methods that return <code>IEnumerator&lt;T&gt;</code>, or in methods that return <code>IEnumerable&lt;T&gt;</code> but are not called GetEnumerator().

<ul>
<li>C# compiler generates the code to maintain the state machine for the iterator.</li>
</ul>
</li>
<li><code>yield break;</code></li>
<li>some other restrictions: P649</li>
</ul>
</li>
</ul>
</li>
</ol>


<h2>17 Reflection, Attributes, and Dynamic Programming 651</h2>

<p><strong>Reflection</strong> is the process of examining the metadata within an assembly.</p>

<ol>
<li>Accessing Metadata Using <code>System.Type</code>

<ul>
<li><code>GetType()</code></li>
<li><code>typeof()</code></li>
</ul>
</li>
<li>Member Invocation

<ul>
<li><code>type.GetProperty()</code> and <code>property.SetValue()</code> see examples</li>
</ul>
</li>
<li>Reflection on Generics

<ul>
<li><code>type.IsGenericType</code></li>
<li><code>foreach(Type type in t.GetGenericArguments()) {}</code></li>
</ul>
</li>
<li>Custom Attributes

<ul>
<li>attributes are a means of associating additional data with a property (and other constructs).</li>
<li><em>Language Contrast</em>: Attributes are to C# what annotations are to Java</li>
<li>2 ways to combine

<ol>
<li><code>[Attr1] [Attr2]</code></li>
<li><code>[Attr1, Attr2]</code></li>
</ol>
</li>
<li>custom attributes

<ul>
<li><code>public class CLISwitchRequiredAttribute : Attribute {}</code></li>
</ul>
</li>
<li>get custom attributes

<ul>
<li><code>Attribute[] a = (Attribute[])property.GetCustomAttributes(...)</code></li>
</ul>
</li>
</ul>
</li>
<li>Attribute Constructors

<ul>
<li><code>public class CLISwitchRequiredAttribute : Attribute { CLISwitchAliasAttribute(string alias) {Alias = alias;}}</code></li>
</ul>
</li>
<li>Named Parameters</li>
<li>Predefined Attributes

<ul>
<li><code>AttributeUsageAttribute</code> before the attribute class to set target properties</li>
<li><code>ConditionalAttribute("CONDITION_BLAH")</code> before the methods to call on condition of <code>#define CONDITION_BLAH</code></li>
<li><code>ObsoleteAttribute</code> causes a compile-time warning, optionally an error.</li>
<li><code>Serializable</code> before class for storage

<ul>
<li><code>NonSerializable</code></li>
<li>version problem? <code>System.Runtime.Serialization.OptionalFieldAttribute</code></li>
</ul>
</li>
</ul>
</li>
<li>Dynamic Objects

<ul>
<li>Dynamic object support provides a common solution for talking to runtime environments that don’t necessarily have a compile-time-defined structure.</li>
<li>The key difference when using a dynamic object is that it is necessary to identify the signature at compile time, rather than determine things such as the member name at runtime (like we did when parsing the command-line arguments).</li>
<li>TODO</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Using Type.GetProperties() to Obtain an Object&#39;s Public Properties</span>
</span><span class='line'><span class="n">DateTime</span> <span class="n">dateTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">Type</span> <span class="n">type</span> <span class="o">=</span> <span class="n">dateTime</span><span class="p">.</span><span class="n">GetType</span><span class="p">();</span>
</span><span class='line'><span class="n">foreach</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Reflection</span><span class="p">.</span><span class="n">PropertyInfo</span> <span class="n">property</span> <span class="n">in</span> <span class="n">type</span><span class="p">.</span><span class="n">GetProperties</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">property</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>18 Multithreading 701</h2>

<p>thread, time slicing.</p>

<p>In .NET Framework 4, the task requests a thread from the thread pool.</p>

<ul>
<li><p><code>Task</code> in <strong>Task Parallel Library</strong></p>

<ul>
<li><code>class Task(Delegate Func);</code> and <code>class Task&lt;TResult&gt;(Delegate Func)</code></li>
<li><code>task.Result</code>, <code>task.IsCompleted</code>, <code>task.Id</code>, <code>task.AsyncState</code>, static <code>Task.CurrentId</code>,</li>
</ul>
</li>
<li><p>Parallel Loops</p>

<ul>
<li><code>Parallel.For()</code></li>
<li><code>Parallel.ForEach&lt;T&gt;()</code></li>
</ul>
</li>
<li>Unhanded Exceptions</li>
<li><strong>Parallel LINQ</strong></li>
<li>Multithreaded Programming with Tasks

<ul>
<li>Task Basiscs</li>
<li><code>ContinueWith()</code></li>
<li>Unhandled Exceptions</li>
</ul>
</li>
<li>TPL Cancellation Requests

<ul>
<li>Canceling a Task</li>
<li>Canceling Parallel Loops</li>
<li>Canceling a Task</li>
</ul>
</li>
<li><del>Multithreaded Programming before TPL (Before .NET 4)</del></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Task</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Tasks</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int</span> <span class="n">repetitions</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Task</span><span class="p">(</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">repetitions</span><span class="p">;</span> <span class="n">count</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">repetitions</span><span class="p">;</span> <span class="n">count</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Wait until the Task completes</span>
</span><span class='line'>    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>19 Multithreading Patterns 749</h2>

<ul>
<li><p>Thread-safe: Code or dada synchronized for simultaneous access by multiple threads.</p></li>
<li><p><a href="http://msdn.microsoft.com/en-us/library/ff963559.aspx">torn read</a>. When reading a variable requires more than one machine instruction, and another task writes to the variable between the read instructions.</p></li>
<li><p>Local variables are loaded onto the stack and each thread has its own logical stack. (But they can still be accessed by other threads.)</p></li>
<li><p>Synchronization</p>

<ul>
<li>Monitor

<ul>
<li>use a monitor to block the second thread from entering a protected code section before the first thread has exited that section. See the example.</li>
<li><code>_Sync</code> object, <code>try</code>/<code>finally</code></li>
</ul>
</li>
<li>Lock

<ul>
<li>Monitor is fallible with <code>try</code>/<code>finally</code> (forgettable)</li>
<li>use a per-synchronization context instance of type object for the lock target.</li>
<li>avoid locking <code>this</code>, <code>typeof(type)</code>, and <code>string</code>  TODO:??我的理解是不要从instance内部锁，一律从外部锁，防止死锁。</li>
</ul>
</li>
<li><p>Volatile <em>Language Contrast</em>:</p>

<ul>
<li>C#: ensures that code accessing the field is not subject to some thread unsafe optimizations that may be performed by the compiler, the CLR, or by hardware. (forces all reads and writes to the volatile field to occur at the exact location the code identifies instead of at some other location that the) optimization produces.</li>
<li>Java: read its current value before continuing, instead of (potentially) using a cached value. Volatile reads and writes establish a happens-before relationship, much like acquiring and releasing a mutex.</li>
<li>C: volatile exists for specifying special treatment for such locations, specifically: (1) the content of a volatile variable is &#8220;unstable&#8221; (can change by means unknown to the compiler), (2) all writes to volatile data are &#8220;observable&#8221; so they must be executed religiously, and (3) all operations on volatile data are executed in the sequence in which they appear in the source code.

<ul>
<li>usage of volatile keyword as a portable synchronization mechanism <strong>is discouraged</strong> by many C/C++ groups.</li>
</ul>
</li>
</ul>
</li>
<li><p><code>System.Threading.Interlocked</code></p>

<ul>
<li>synchronization with System.Threading.Monitor is a relatively expensive operation</li>
<li>If <code>_Data</code> is <code>null</code> then set it to <code>newValue</code>

<ul>
<li><code>Interlocked.CompareExchange(ref _data, newValue, null);</code></li>
</ul>
</li>
</ul>
</li>
<li>Synchronization Best Practices

<ul>
<li>avoid deadlocks. Deadlock&#8217;s 4 conditions:

<ol>
<li>Mutual exclusion</li>
<li>Hold and wait</li>
<li>No preemption</li>
<li>Circular wait condition</li>
</ol>
</li>
<li>All static data should be thread-safe.

<ul>
<li>programmers should declare private static variables and then provide public methods for modifying the data. Such methods should internally handle the synchronization.</li>
</ul>
</li>
</ul>
</li>
<li><code>Mutex</code></li>
<li>WaitHandle</li>
<li>Reset Events

<ul>
<li> reset events have nothing to do with C# delegates and events. Instead, reset events are a way to <strong>force code to wait for the execution of another thread until the other thread signals</strong></li>
<li>Favor <code>ManualResetEvent</code> and <code>Semaphores</code> over <code>AutoResetEvent</code></li>
</ul>
</li>
<li>Concurrent Collection Classes

<ul>
<li>designed to include built-in synchronization code so that they can support simultaneous access by multiple threads without concern for race conditions.</li>
<li><code>BlockingCollection&lt;T&gt;</code></li>
<li><code>ConcurrentBag&lt;T&gt;</code></li>
<li><code>ConcurrentDictionary&lt;TKey, TValue&gt;</code></li>
<li><code>ConcurrentQueue&lt;T&gt;</code></li>
<li><code>ConcurrentStack&lt;T&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>Thread Local Storage

<ul>
<li><code>ThreadLocal&lt;T&gt;</code></li>
<li><code>ThreadStaticAttribute</code></li>
</ul>
</li>
<li>Timers</li>
<li>Asynchronous Programming Model (APM)

<ul>
<li>the key aspect of the APM is the pair of <code>IAsyncResult BeginX()</code> and <code>EndX()</code> methods with well-established signatures.</li>
<li><code>WaitHandle</code> to determine when the asynchronous method completes.</li>
<li><code>EndX()</code>

<ol>
<li>block further execution until the successful complete</li>
<li>get the return data</li>
<li>receive the exception</li>
<li>clean up resources</li>
</ol>
</li>
</ul>
</li>
<li>Background Worker Pattern

<ul>
<li>TODO</li>
</ul>
</li>
<li>Windows UI Programming

<ul>
<li>TODO</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// monitor</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Tasks</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Note that calls to Monitor.Enter() and Monitor.Exit() are associated </span>
</span><span class='line'>  <span class="c1">// with each other by sharing the same object reference passed as the </span>
</span><span class='line'>  <span class="c1">// parameter (in this case _Sync).</span>
</span><span class='line'>  <span class="n">readonly</span> <span class="k">static</span> <span class="n">object</span> <span class="n">_Sync</span> <span class="o">=</span> <span class="k">new</span> <span class="n">object</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">_Total</span> <span class="o">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">long</span> <span class="n">_Count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">StartNew</span><span class="p">(</span><span class="n">Decrement</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Increment</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_Total</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">lockTaken</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Monitor</span><span class="p">.</span><span class="n">Enter</span><span class="p">(</span><span class="n">_Sync</span><span class="p">,</span> <span class="n">ref</span> <span class="n">lockTaken</span><span class="p">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_Count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="n">finally</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">lockTaken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Monitor</span><span class="p">.</span><span class="n">Exit</span><span class="p">(</span><span class="n">_Sync</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Count = {0}&quot;</span><span class="p">,</span> <span class="n">_Count</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">Decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_Total</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">bool</span> <span class="n">lockTaken</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Monitor</span><span class="p">.</span><span class="n">Enter</span><span class="p">(</span><span class="n">_Sync</span><span class="p">,</span> <span class="n">ref</span> <span class="n">lockTaken</span><span class="p">);</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_Count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="n">finally</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">lockTaken</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Monitor</span><span class="p">.</span><span class="n">Exit</span><span class="p">(</span><span class="n">_Sync</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// lock</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Tasks</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">readonly</span> <span class="k">static</span> <span class="n">object</span> <span class="n">_Sync</span> <span class="o">=</span> <span class="k">new</span> <span class="n">object</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">_Total</span> <span class="o">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">long</span> <span class="n">_Count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="n">Task</span><span class="p">.</span><span class="n">Factory</span><span class="p">.</span><span class="n">StartNew</span><span class="p">(</span><span class="n">Decrement</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Increment</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_Total</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lock</span> <span class="p">(</span><span class="n">_Sync</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_Count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span><span class="p">.</span><span class="n">Wait</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Count = {0}&quot;</span><span class="p">,</span> <span class="n">_Count</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="kt">void</span> <span class="n">Decrement</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_Total</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">lock</span> <span class="p">(</span><span class="n">_Sync</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_Count</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// mutex</span>
</span><span class='line'><span class="c1">// It cannot run correctly on Ubuntu with mono.</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Reflection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Indicates whether this is the first</span>
</span><span class='line'>    <span class="c1">// application instance</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">firstApplicationInstance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Obtain the mutex name from the full</span>
</span><span class='line'>    <span class="c1">// assembly name.</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">mutexName</span> <span class="o">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="n">GetEntryAssembly</span><span class="p">().</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">Mutex</span> <span class="n">mutex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mutex</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="n">mutexName</span><span class="p">,</span> <span class="n">out</span> <span class="n">firstApplicationInstance</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">firstApplicationInstance</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;This application is already running.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;ENTER to shut down&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// APM </span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">Linq</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">(</span><span class="n">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://www.puncsky.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">url</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class='line'>    <span class="n">WebRequest</span> <span class="n">webRequest</span> <span class="o">=</span> <span class="n">WebRequest</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// puncsky: `BeginX` method call</span>
</span><span class='line'>    <span class="n">IAsyncResult</span> <span class="n">asyncResult</span> <span class="o">=</span> <span class="n">webRequest</span><span class="p">.</span><span class="n">BeginGetResponse</span><span class="p">(</span><span class="n">null</span><span class="p">,</span> <span class="n">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">asyncResult</span><span class="p">.</span><span class="n">AsyncWaitHandle</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// puncsky: `EndX` method call</span>
</span><span class='line'>    <span class="c1">// Retrieve the results when finished</span>
</span><span class='line'>    <span class="c1">// downloading</span>
</span><span class='line'>    <span class="n">WebResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">webRequest</span><span class="p">.</span><span class="n">EndGetResponse</span><span class="p">(</span><span class="n">asyncResult</span><span class="p">);</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="n">StreamReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">GetResponseStream</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">reader</span><span class="p">.</span><span class="n">ReadToEnd</span><span class="p">().</span><span class="n">Length</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">FormatBytes</span><span class="p">(</span><span class="n">length</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="k">public</span> <span class="n">string</span> <span class="n">FormatBytes</span><span class="p">(</span><span class="kt">long</span> <span class="n">bytes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">string</span><span class="p">[]</span> <span class="n">magnitudes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;GB&quot;</span><span class="p">,</span> <span class="s">&quot;MB&quot;</span><span class="p">,</span> <span class="s">&quot;KB&quot;</span><span class="p">,</span> <span class="s">&quot;Bytes&quot;</span> <span class="p">};</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">max</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="n">magnitudes</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{1:##.##} {0}&quot;</span><span class="p">,</span> <span class="n">magnitudes</span><span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">(</span>
</span><span class='line'>        <span class="n">magnitude</span> <span class="o">=&gt;</span> <span class="n">bytes</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">max</span> <span class="o">/=</span> <span class="mi">1024</span><span class="p">))</span><span class="o">??</span> <span class="s">&quot;0 Bytes&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">decimal</span><span class="p">)</span><span class="n">bytes</span> <span class="o">/</span> <span class="p">(</span><span class="n">decimal</span><span class="p">)</span><span class="n">max</span><span class="p">).</span><span class="n">Trim</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>20 Platform Interoperability and Unsafe Code 815</h2>

<ul>
<li>What if the memory addresses and pointers have be used?</li>
<li>3 ways

<ul>
<li>Platform Invoke (P/Invoke)</li>
<li><strong>unsafe code</strong></li>
<li><strong>COM</strong></li>
</ul>
</li>
</ul>


<h2>21 The Common Language Infrastructure 843</h2>

<ul>
<li>TODO</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[H-Quincy: Fair Scheduling for Hadoop Clusters]]></title>
    <link href="http://www.puncsky.com/blog/2013/09/14/h-quincy/"/>
    <updated>2013-09-14T16:49:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/09/14/h-quincy</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/puncsky/H-Quincy">H-Quincy</a> implements the paper <a href="http://www.sigops.org/sosp/sosp09/papers/isard-sosp09.pdf">Quincy: Fair Scheduling for Distributed Computing Clusters</a> on Hadoop, which improves the mapreduce scheduler by replacing the default queue-based one with a flow-based one. A min cost flow is calculated and updated to assign map tasks among the cluster, according to the size of the data split and the communication overhead in the cluster&#8217;s hierarchy.</p>

<h2>Install</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/puncsky/H-Quincy.git
</span></code></pre></td></tr></table></div></figure>


<p>You can either build from source code or user the JAR directly.</p>

<ul>
<li><em>Build from Source Code</em>. Replace your <code>$HADOOP_HOME/src/mapred/org/apache/hadoop/mapred</code> with files in <code>src/</code>. Enter <code>$HADOOP_HOME</code> and build with <code>ant</code>.</li>
<li><em>utilize the JAR directly</em>. Replace your <code>$HADOOP_HOME/hadoop-core-{version}.jar</code> with <code>hadoop-core-1.0.4-SNAPSHOT.jar</code></li>
</ul>


<hr />

<p>The <a href="http://www.sigops.org/sosp/sosp09/papers/isard-sosp09.pdf">Quincy paper</a> is rather theoretical organized and involves a large number of mathematical details, which reasonably makes itself hard to understand. The following sections explains our implementation.</p>

<h2>1. Architecture</h2>

<p><em>Figure 1</em> displays an outline of our architecture. There exist three kinds of nodes and accordingly three levels of hierarchy in the cluster. Computing nodes are connected via a rack switch, and placed in the same rack. Rack switches are connected via a core switch. Core switches and rack switches do not undertake computing works but can still be presented in the Hadoop system as nodes.</p>

<p align="middle"><img src="https://raw.github.com/puncsky/H-Quincy/master/doc/architecture.png" alt="architecture"></p>




<p align="middle"><i>Figure 1: A sample architecture with simplified preferred lists.</i></p>




<!--more-->


<p>As we know, Hadoop takes a master/slave architecture, which includes a single master and multiple worker nodes. The master node in general consists of a JobTracker and a NameNode. The slave worker consist of a TaskTracker and a DataNode. Nevertheless, the master can also play the role of the slave at the same time. JobTracker assigns tasks to the TaskTrackers for execution, and then collects the result. NameNode manages the index for blocks of data storing in DataNodes among the Hadoop Distributed File System.</p>

<p>In our cluster, each computing node is both a TaskTracker and a DataNode, which means they are all slaves. And we select one of them as a master, which is both a JobTracker and a DataNode simultaneously. The master maintains the relationship with slaves through heartbeat, whose overhead is ignorable when compared to the data transfer or the execution of tasks.</p>

<p>There may be many jobs sharing the cluster resources at the same time. When a job comes into the JobTracker&#8217;s job queue, the JobTracker resorts the queue by the priority and the start time of these jobs. A job is composed of the map tasks and the reduce tasks. When the job comes out of the queue and starts to run, the JobTracker will analyze the input data&#8217;s distribution over those TaskTrackers and initialize a list of preferred tasks for each TaskTracker, rack switch, and core switch, as shown in <em>figure 1</em>. A task will occur on the preferred list of some node if its data splits are stored in that node <em>or</em> in any of its child nodes. Then the JobTracker&#8217;s scheduler matches tasks to the TaskTrackers and launch them to run the tasks on their own newly-assigned lists. At the same time, the JobTracker keeps collecting status information from TaskTrackers until all the tasks finish. If failure happens in the TaskTracker, the JobTracker will restart the task from that TaskTracker or enable a new TaskTracker to execute the task. The scheduler can kill a task on a TaskTracker with preemption if there is a more suitable arrangement.</p>

<h2>2. Hadoop Default Scheduler</h2>

<p>After the initialization of preferred lists, the JobTracker assign a series of actions, including the tasks waiting for execution, into the response to heartbeat from the matched TaskTracker. The matched TaskTracker receives the heartbeat response and adds the actions to the task queue.</p>

<h3>2.1 Queue-based Greedy Scheduler without Fairness</h3>

<p>In the task assignment, the JobTracker&#8217;s task scheduler first calculates the max workload for every job, and leaves certain padding slots for speculative tasks. The speculative task backs up some running task, in case that the running task is too slow and impede the job&#8217;s progress. Map tasks are assigned before reduce tasks. Data-local and rack-local tasks are assigned before non-local tasks.</p>

<p>The default setup for Hadoop is a queue-based greedy scheduler. The preferred task lists of every node can be deemed as queues. Each computing node has a queue of tasks which can be executed without pulling data from other places. Each computing node in a rack shares a rack queue in case that computing node can execute tasks with pulling data splits from other nodes in the same rack, when the local list has already been finished. Since racks are connected with a core switch, racks also share a global queue. For every assignment, node will compute the previously failed tasks first, then the non-running local and non-local tasks, and finally the speculative tasks.</p>

<h3>2.2 Queue-based Greedy and Fair Scheduler</h3>

<p>When only one job is running on the cluster, that job will use the entire cluster. What will happen if multiple jobs are submitted? The default&#8217;s sorting by priority and start time only ensures that more significant and earlier submitted jobs are dequeued first. However, the Hadoop fair scheduler arranges jobs into pools. Computing resources are divided fairly between these pools. A pool can be occupied by only one user (by default) or shared by a user group. Within the pool, jobs can be scheduled evenly or first-in-first-serve.</p>

<p>Assume we have $M$ computers and $K$ running jobs, and job $j$ has $N_{j}$ tasks in total. Each job $j$ will be allocated $A_{j} = min(\lfloor M/K\rfloor, N_{j})$ task slots. If there are still resting slots, divide them evenly. After finishing the running tasks, a TaskTracker will follow the new allocation $A_{j}$. However, if the process is not preemptive, the running tasks will definitely not be affected when new jobs are submitted irrespective of the changed allocation $A_{j}$. If the fairness is ensured with preemption, the running tasks will be killed while a new quota $A_{j}$ shows up.</p>

<p>Hadoop default scheduler sets up a wait time to enable a portion of the cluster wait to get better locality, preventing a job&#8217;s tasks from becoming sticky to a TaskTracker.</p>

<h2>3. Quincy Scheduler</h2>

<p><a href="Quincy:%20Fair%20Scheduling%20for%20Distributed%20Computing%20Clusters">Quincy</a> introduces a new framework transforming the scheduling into a global min cost max flow problem. Running a particular task on some machine incurs a data calculation cost and, potentially, a data transfer cost. Killing a running task also incurs a wasted time cost. If different kinds of costs can be expressed in the same unit, then we can investigate an algorithm to minimize the total cost of the scheduling.</p>

<h3>3.1 Min Cost Max Flow</h3>

<p>In a flow network, a directed graph $G=(V, E)$ has $source \in V$ and $sink \in V$. For each edge $(u,v)\in E$, there are $capacity(u,v)\in\mathbb{N}$, $flow(u,v)\in\mathbb{N}$ and $cost(u,v)\in\mathbb{R}$.</p>

<p>The problem is to calculate the min cost flow</p>

<p>$min(\sum_{E}flow\cdot cost)$</p>

<p><a href="http://web.mit.edu/~ecprice/acm/acm08/MinCostMaxFlow.java">Edmonds-Karp algorithm</a> is used to calculate the min cost flow with $O(V\cdot E ^ 2)$ in our implementation.</p>

<h3>3.2 Initialization of the Matrix</h3>

<p><em>Figure 2</em> shows the graph along with the same topology in <em>Figure 1</em>. Since supplies are from a variety of sources &#8211; task nodes and unscheduled nodes, the graph is a multi-source single-sink flow. Our implementation adds a virtual source to transform the flow into a single-source one.</p>

<p align="middle"><img src="https://raw.github.com/puncsky/H-Quincy/master/doc/mincostflow.png" alt="flow graph"></p>




<p align="middle"><i>Figure 2: Min-Cost Max Flow Graph</i></p>


<h4>3.2.1 Capacity</h4>

<p>Each task node has a supply of 1, so $capacity(source, task) = 1$. The <em>unscheduled</em> is used to control the fairness. Tasks flowing to the unscheduled will not be assigned to computing nodes at this time. Each job must have and only has one unscheduled node with $$capacity(source, unscheduled) = F_j - N_j$$ where $F_j$ is the max number of running tasks job j may has. $N_j$ is the number of TaskTrackers assigned to this job.</p>

<p>From each task node, there are edges to the core switch, preferred rack, and preferred computing nodes. By default, every split of data has three replicas, so the number of preferred computing nodes is usually 3. So we can yield $$capacity(task, core switch) = 1$$ $$capacity(task, preferredRackSwitch) = 1$$  $$capacity(task, preferredComputingNode) = 1$$</p>

<p>From the unscheduled, there is only one edge to sink with $capacity(unscheduled, sink) = F_j - E_j$, where $E_j$ is the min number of running tasks job j may have.</p>

<p>From the core switch, there are edges to every rack with capacities of $$capacity(coreSwitch, rackSwitch) = numberOfTaskTrackersInThatRack$$</p>

<p>From each rack switch, there are edges to every computing node with capacity of $capacity(rackSwitch, computingNode) = 1$.</p>

<p>From each computing node, there is only one edge with $capacity(computing node, sink) = numberOfTaskSlots$. The number of task slots is 2 by Hadoop&#8217;s default for map tasks. The value is 1 for reduce tasks.</p>

<h4>3.2.2 Cost</h4>

<p>The cost of scheduling a task $t_n ^ j$ job $j$ with $n$ tasks onto a computing node is $\alpha_n ^ j = \psi  R ^ X(t_n ^ j) + \xi  X ^ X(t_n ^ j)$, where $\psi$ is the cost to transfer one GB across a rack switch, $\xi$ is the cost to transfer one GB across the core switch. $(R ^ X(t_n ^ j), X ^ X(t_n ^ j))$ is the upper bounds of the transferred data size across a rack switch and across a core switch.</p>

<p>The cost of scheduling a task onto a preferred rack is $\rho ^ j_{n,l} = \psi  R ^ R_l(t_n ^ j) + \xi  X ^ R_l(t_n ^ j)$.</p>

<p>The cost of scheduling a task onto a preferred computer is $\gamma ^ j_{n,m} = \psi  R ^ C_m(t_n ^ j) + \xi  X ^ C_m(t_n ^ j)$. However, if the computer is now executing the same task, the cost should be  $\gamma ^ j_{n,m} = \psi  R ^ C_m(t_n ^ j) + \xi  X ^ C_m(t_n ^ j) - \theta ^ j_n$, where $\theta$ is the number of seconds for which the task has been running.</p>

<p>The cost of scheduling a task onto the unscheduled is $\upsilon ^ j_n = \omega \nu ^ j_n$, where $\omega$ is a wait-time factor and $\nu ^ j_n$ is the total number of seconds that task $n$ in job $j$ has spent unscheduled.</p>

<p>In our current version for testing, the wait-time factor $\omega=0.5$, $\psi = 1$ per GB, $\xi = 2$ per GB. $\psi$ and $\xi$ can be set larger to achieve a better locality.</p>

<h3>3.3 Assignment and Update</h3>

<p>After initialization, the min cost flow matrix will be recalculated every time before a new task is assigned to a TaskTracker. When the job is running on the cluster, the capacity matrix and cost matrix will be updated if a task is finished. An edge from the finished task to the sink will be set with a capacity 1 and cost $-1000-\nu ^ j_n$.</p>

<h3>3.4 Preemption and Fairness</h3>

<p>There exist four versions of quincy.</p>

<ul>
<li>Quincy without Preemption and without Fairness(Q).</li>
<li>Quincy with Preemption and without Fairness(QP).</li>
<li>Quincy without Preemption and with Fairness(QF).</li>
<li>Quincy with Preemption and with Fairness(QPF).</li>
</ul>


<p>Limited to the time, our current implementation does not include preemption and fairness. Preemption is easy to achieve but there are more classes and source codes to modify for fairness control.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trip to Mt. Rainier and San Juan Islands]]></title>
    <link href="http://www.puncsky.com/blog/2013/09/07/trips-to-mt-rainier-and-san-juan-islands/"/>
    <updated>2013-09-07T18:30:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/09/07/trips-to-mt-rainier-and-san-juan-islands</id>
    <content type="html"><![CDATA[<p>Travel in person is of no importance to me at all.</p>

<p>Surely I have already known that the world is wonderful and full of unexpected surprises. Like many other groups of people, traveling around the world is also one of my childhood dreams. Wandering around leads to stumbling upon. Travel is admittedly the right way to discover <a href="http://en.wikipedia.org/wiki/Black_swan_theory">&#8220;the black swan&#8221;</a>, in which an unpredictable slight event can make a significant difference.</p>

<p>However, for an Internet guy like me, of course, Internet is exactly the greatest treasure and playground. Everything I read and work on everyday comes from it &#8211; books, papers, SNS news feed, blogs, source code, etc. So, how dare I still shamelessly claim that I would love to travel?</p>

<p><strong>It is the person I travel with that really matters to me.</strong> Reading is a personal issue. Thinking is a personal issue. Deep love is also a personal issue. Like the Protoss (a kind of aliens) in Starcraft, it seems that the highest state of human society tends to be highly independent. And even better or worse, loneliness seems to be our final fate. Hardly are there a chance like this for friends to get together and enjoy a journey in life.</p>

<p>Personally, exhausted with my CS profession, I have little friends in the US. My social life in Yale is almost zero. It is a trade-off, so you know my choice under my weak CS background.</p>

<p>Last week, we visited Mt. Rainer and San Juan Islands. I had long admired the breathtaking beauty of the Emerald City, and with <a href="https://www.google.com/search?site=imghp&amp;tbm=isch&amp;q=space+needle+mount+rainier">a unforgettable view of the space needle accompanied by the Mt. Rainier in the far-away background</a>. Actually, that is one of my postcards serving as bookmarks for my GRE-related materials. Years later, Hmm, doesn&#8217;t it taste so nice to have a small dream come true? :D</p>

<p>Thank you my friends, not for the wonderful trip, but for you.</p>

<h2>Day 1 Mt. Rainer</h2>

<p>It is better to reach the visitor center early for a better parking position. Otherwise, the queue will be meandering down the hill&#8230; It sounds funny, but trust me; you won&#8217;t like it.</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/mt_rainier.jpg" alt="Mt Rainier" /></p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/reflection_lake.jpg" alt="The Reflection Lake" /></p>

<!--more-->


<p>It was quite common to see parents climbing with cute babies or kids, which is so heartwarming&#8230;</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/parent_and_kid.jpg" alt="Parent and Kid" height="450" width="300"></p>

<h2>Day 2 San Juan Islands</h2>

<p>San Juan Islands are located to the north coast of the Washington State and near to Canada. They are famous for sea-kayaking and orca whale-watching.</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/san_juan_islands.jpg" alt="San Juan Islands" /></p>

<p>Our top priority was to watch the whales. Fortunately, and most importantly, thanks to Miss Yang, we saw THREE KINDS OF WHALES! <strong>It was the first time ever in the past over 25 years in this region!</strong> Wasn&#8217;t it amazing? However, a whale watching without a powerful long-focus lens was just a disaster!</p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/orca_whales.jpg" alt="ORCA Whales: A Family" /></p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/whale.jpg" alt="Whale" /></p>

<p><img src="https://raw.github.com/puncsky/puncsky.github.com/source/images/beautiful_sea.jpg" alt="Beautiful Sea" /></p>

<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Essential C# 4.0: Intermediate]]></title>
    <link href="http://www.puncsky.com/blog/2013/09/05/essential-c-sharp-intermediate/"/>
    <updated>2013-09-05T14:00:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/09/05/essential-c-sharp-intermediate</id>
    <content type="html"><![CDATA[<p>This is the second part of my serials of notes on learning C#.</p>

<ol>
<li><a href="http://www.puncsky.com/blog/2013/08/14/essential-c-sharp-basics/">Essential C# 4.0: Basics</a></li>
<li>Essential C# 4.0: Intermediate (this post)</li>
<li><a href="http://www.puncsky.com/blog/2013/09/15/essential-c-sharp-advanced/">Essential C# 4.0: Advanced</a></li>
</ol>


<p>A productive-focused language like C# has so much <em>syntax sugar</em> that I feel not so comfortable with, because I used to be a C++ programmer and everything in the C++ kingdom appears to be straight forward, although, at the same time, tend to be fallible.</p>

<p>The most serious problem I find about Microsoft&#8217;s tools is that up there exist so many auto-generated codes that I cannot know them all in details. I mean, that is good, you can ship as much stuff as possible within limited time. The problem is, it is not good for curious people like me, nor for the beginner. Back in school, when we build something, we build it <em>from scratch</em>. Perhaps, <em>reinvent the wheel</em> is the best way to learn the wheel. IEDs such as Visual Studio and Eclipse make people so lazy and forget to remember and to think.</p>

<p>Consequently, in my spare time, I would do write every code with VIM.</p>

<p>The following is my notes from Chapter 9 through Chapter 13.</p>

<!--more-->


<h2>9 Well-Formed Types 357</h2>

<ol>
<li>Overriding Object Members

<ul>
<li> Guidelines for overriding <code>System.Object</code> members. Reference on request.</li>
<li> <code>GetHashCode()</code></li>
<li> <code>ReferenceEquals()</code> Object Identity vs. <code>Equals()</code> Equal Object Values</li>
<li> Calling <code>ReferenceEquals()</code> on <em>value types</em> will always return false since</li>
</ul>
</li>
<li>Operator Overloading

<ul>
<li> <code>public static</code>

<ul>
<li>avoid recursive loop <code>(leftHandSide == null)</code> when check equality</li>
<li>One of the parameters of a operator must be the containing type</li>
</ul>
</li>
</ul>
</li>
<li>Referencing other Assemblies

<ul>
<li> Assembly Target: <code>csc /target:library /out:Coordinates.dll Coordinate.cs IAngle.cs</code>

<ul>
<li>console executable</li>
<li>class library</li>
<li>windows executable</li>
<li>module</li>
</ul>
</li>
<li> Reference an Assembly <code>csc /R:Coordinates.dll Program.cs</code></li>
<li> By default, a class without any access modifier is defined as <code>internal</code> (accessible from within the assembly only).</li>
</ul>
</li>
<li>Defining Namespaces

<ul>
<li> <strong><em>namespace alias qualifier</em></strong>

<ul>
<li><code>csc /R:CoordPlus=CoordinatesPlus.dll /R:Coordinates.dll Program.cs</code></li>
<li><code>extern alias CoordPlus;</code> before all <code>using</code> statements</li>
<li><code>using CoordPlus:
  Blah.Blah;</code> equally or <code>using CoordPlus.Blah.Blah;</code></li>
<li>How about global scope? <code>using global::Blah.Blah</code> (different from <code>using global.Blah.Blah</code> which means the real namespace of <code>global</code>)</li>
</ul>
</li>
</ul>
</li>
<li>XML Comments

<ul>
<li> <code>///</code>, <code>&lt;summary&gt;</code>, <code>&lt;remarks&gt;</code>, <code>&lt;param name="blah"&gt; &lt;param&gt;</code>, <code>&lt;returns&gt;</code>, <code>&lt;date&gt;</code></li>
<li> Generate an XML doc file <code>csc /doc:Comments.xml DataStorage.cs</code></li>
<li> tools to generate docs: GhostDoc, NDoc</li>
</ul>
</li>
<li>GC

<ul>
<li> <strong>Weak reference</strong> save the reference for future reuse (memory cache) <code>private WeakReference Data;</code></li>
<li> Finalizer: <code>~ClassName()</code> (注意，不是Dispose) like <a href="http://www.puncsky.com/blog/2013/01/14/gc-garbage-collection-in-java/">Java&#8217;s <code>finalize()</code></a>一般<code>~ClassName()</code>会检查<code>Dispose</code>是否已经被调用</li>
<li> Deterministic finalization with the <code>using</code> statement

<ul>
<li>The <code>IDisposable</code> interface defines the details of the pattern with a single method called <code>Dispose()</code>, which developers call on a resource class to “dispose” of the consumed</li>
<li>HOWEVER, there is a chance that an exception will occur before the dispose call resources. If this happens, Dispose() will not be invoked and the resource cleanup will have to rely on the finalizer.</li>
<li>SO 2 ways:

<ol>
<li>try / finally</li>
<li><code>using</code> statement and <strong>all variables are of the same type and they implement <code>IDisposable</code></strong></li>
</ol>
</li>
</ul>
</li>
<li> The <strong><em>f-reachable queue</em></strong> is a list of all the objects that are ready for
garbage collection and that also have finalization implementations. <code>System.GC.SuppressFinalize(reference)</code> can remove reference instance from f-reachable queue.</li>
<li> Resource Utilization and Finalization Guidelines. Refer the book page 400.</li>
<li> Generally, <code>~Destructor()</code> calls <code>Dispose()</code></li>
<li> <strong>Lazy Initialization</strong>: Defer the init of an object until it is required.

<pre><code> - `System.Lazy&lt;T&gt;`
</code></pre></li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Lazy Initialization</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DataCache</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">DataCache</span><span class="p">(</span><span class="n">string</span> <span class="n">FileStreamName</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">_FileStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="o">&lt;</span><span class="n">TemporaryFileStream</span><span class="o">&gt;</span><span class="p">(</span>
</span><span class='line'>      <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">new</span> <span class="n">TemporaryFileStream</span><span class="p">(</span><span class="n">FileStreamName</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// the lambda expression provides a means of passing the</span>
</span><span class='line'>  <span class="c1">// instructions for what will happen, but not actually performing those</span>
</span><span class='line'>  <span class="c1">// instructions until explicitly requested.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="n">TemporaryFileStream</span> <span class="n">FileStream</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">get</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_FileStream</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">Lazy</span><span class="o">&lt;</span><span class="n">TemporaryFileStream</span><span class="o">&gt;</span> <span class="n">_FileStream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>10 Exception Handling 405</h2>

<ol>
<li>Multiple Exception Types</li>
<li>Catching Exception</li>
<li>General Catch Block</li>
<li>Guidelines</li>
<li>Custom Exceptions</li>
</ol>


<h2>11 Generics 421</h2>

<ol>
<li>Generics

<ul>
<li>name rule as <code>EntityCollection&lt;TEntity&gt;</code></li>
<li><code>public class Tuple&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt;: ... {...}</code>, <code>TRest</code> can be used to store another tuple.</li>
<li><code>Tuple.Create("555-55-5555", new Contact("Tim Pan"));</code> == <code>new Tuple&lt;string, Contact&gt;("555-55-5555", new Contact("Tim Pan"));</code></li>
</ul>
</li>
<li><strong><em>Constraints</em></strong>: To avoid a runtime exception and instead provide a compile-time error, C# enables you to supply an optional list of <strong>constraints</strong> for each type parameter declared in the generic class by using <code>where</code>.

<ul>
<li>Interface Constraints</li>
<li>Base Class Constraints</li>
<li><code>struct</code>/<code>class</code> Constraints</li>
<li>Multiple Constraints</li>
<li><strong>Constructor Constraints</strong>: ensure default ctor like <code>new ctor()</code></li>
</ul>
</li>
<li>Generic Methods

<ul>
<li>explicit cast is preferred at most of the times.</li>
</ul>
</li>
<li>Variance <code>Type1&lt;Type2&gt;</code> and <code>Type3&lt;Type2&gt;</code> are not <em>covariant</em>.

<ul>
<li>Covariance TODO: Read Again

<ul>
<li>with <code>out</code> for getters</li>
<li>with <code>in</code> for setters</li>
</ul>
</li>
<li>Contra variance</li>
</ul>
</li>
<li>Generic Internals

<ul>
<li><em>Language Contrast</em>: Sun&#8217;s implementation of generics for Java occurs within the compiler entirely, not within the JVM. JVM cannot support generics for value types.</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Needing the type parameter to support an interface or exception thrown</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">SubItems</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_SubItems</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">set</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">IComparable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>          <span class="n">first</span> <span class="o">=</span> <span class="p">(</span><span class="n">IComparable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">)</span><span class="n">value</span><span class="p">.</span><span class="n">First</span><span class="p">.</span><span class="n">Item</span><span class="p">;</span>
</span><span class='line'>              
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">CompareTo</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">Second</span><span class="p">.</span><span class="n">Item</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// first is less than second.</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// second is less than first.</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">_SubItems</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">_SubItems</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Declaring the interface constrant</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">where</span> <span class="nl">T:</span> <span class="n">System</span><span class="p">.</span><span class="n">IComparable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">SubItems</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">get</span><span class="p">{</span> <span class="k">return</span> <span class="n">_SubItems</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">set</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">IComparable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// Notice that the cast can now be eliminated.</span>
</span><span class='line'>          <span class="n">first</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="n">First</span><span class="p">.</span><span class="n">Item</span><span class="p">;</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">CompareTo</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">Second</span><span class="p">.</span><span class="n">Item</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// first is less than second</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="c1">// second is less than or equal to first</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">_SubItems</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">_SubItems</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// multiple constraints</span>
</span><span class='line'><span class="c1">// an AND relationship is assumed</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">EntityDictionary</span><span class="o">&lt;</span><span class="n">TKey</span><span class="p">,</span> <span class="n">TValue</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">TKey</span><span class="p">,</span> <span class="n">TValue</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">where</span> <span class="n">TKey</span> <span class="o">:</span> <span class="n">IComparable</span><span class="o">&lt;</span><span class="n">TKey</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">IFormattable</span>
</span><span class='line'>  <span class="n">where</span> <span class="n">TValue</span> <span class="o">:</span> <span class="n">EntityBase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// constructor constraints ensure default ctors only</span>
</span><span class='line'><span class="c1">// Ctors with parameters are NOT supported</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">EntityDictionary</span><span class="o">&lt;</span><span class="n">TKey</span><span class="p">,</span> <span class="n">TValue</span><span class="o">&gt;</span> <span class="o">:</span>
</span><span class='line'>  <span class="n">Dictionary</span><span class="o">&lt;</span><span class="n">TKey</span><span class="p">,</span> <span class="n">TValue</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">where</span> <span class="nl">TKey:</span> <span class="n">IComparable</span><span class="o">&lt;</span><span class="n">TKey</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">IFormattable</span>
</span><span class='line'>  <span class="n">where</span> <span class="n">TValue</span> <span class="o">:</span> <span class="n">EntityBase</span><span class="o">&lt;</span><span class="n">TKey</span><span class="o">&gt;</span><span class="p">,</span> <span class="k">new</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="n">TValue</span> <span class="n">newEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TValue</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>12 Delegates and Lambda Expressions 469</h2>

<ol>
<li>Introducing Delegates

<ul>
<li>Why Delegates

<ul>
<li>C/C++ method pointer == <strong><em>delegate</em></strong>, which encapsulates methods as objects, enabling an indirect method call bound at runtime.</li>
</ul>
</li>
<li>Delegate As Data Types

<ul>
<li>Although all delegate data types derive indirectly from <code>System.Delegate</code>, the C# compiler does not allow you to define a class that derives directly or indirectly (via <code>System.MulticastDelegate</code>) from <code>System.Delegate</code>.</li>
</ul>
</li>
<li>Delegate Internals

<ul>
<li>TODO</li>
</ul>
</li>
<li>Instantiating Delegates</li>
</ul>
</li>
<li>Anonymous Methods

<ul>
<li><code>BubbleSort(items, delegate(int first, int second){return first&lt;second})</code></li>
<li>can be <em>parameterless</em>: Parameterless Anonymous Methods</li>
<li>System-Defined Delegates: <code>Func&lt;&gt;</code>

<ul>
<li><code>Func&lt;&gt;</code> can also be used for generic delegate.</li>
<li><code>Func&lt;int, int, bool&gt;</code> the last type is the return type.</li>
<li><code>System.Action</code> should be used for delegates that have no return.</li>
<li>However, the delegate&#8217;s name provides a more explicit indication of what it is for, whereas Func&lt;> provides nothing more than an understanding of the method signature.</li>
<li><strong><em>Generic <code>Func</code> delegate and explicitely defined delegate are not compatible</em></strong>. e.g. <code>Func&lt;int, int, bool&gt;</code> and <code>ComparisonHandler</code> are not compatible. <strong><em>But some degree of casting is allowed.</em></strong></li>
</ul>
</li>
<li>All anonymous delegates are immutable.</li>
</ul>
</li>
<li>Lambda Expressions

<ul>
<li>anonymous functions = lambda expressions (expression lambda + statement lambda) + anonymous methods</li>
<li>Statement Lambdas

<ul>
<li><code>BubbleSort(items, (int first, int second) =&gt; {return first &lt; second;})</code>

<ul>
<li><em>go/goes to</em>, <em>becomes</em>, <em>such that</em>: &#8220;integers <code>first</code> and <code>second</code> <em>go</em> to returning the result of <code>first</code> less than <code>second</code>&#8221;</li>
</ul>
</li>
<li><code>BubbleSort(items, (first, second) =&gt; {return first &lt; second;})</code>

<ul>
<li>statement lambdas can omit parameter types as long as the compiler can infer the types</li>
</ul>
</li>
<li>typically a statement lambda uses only two or three statements in its statement block.</li>
</ul>
</li>
<li>Expression Lambdas

<ul>
<li>no statement block, only an expression</li>
<li><code>names.Where(name =&gt; name.Contains(" "))</code>, &#8220;names where names dot contains a space&#8221;</li>
</ul>
</li>
<li>you cannot use the typeof() operator (see Chapter 17) on an anonymous method, and calling GetType() is possible only after assigning or casting the anonymous method to a delegate variable.</li>
<li>TODO: internals

<ul>
<li>Closure—a data structure (class in C#) that contains an expression and the variables (public fields in C#) necessary to evaluate the expression.</li>
</ul>
</li>
</ul>
</li>
<li>Expression Trees

<ul>
<li>Used to store lambda expressions as data for passing or translating.</li>
<li>Expression trees are object graphs</li>
<li>composed of read-only collection of parameters, a return type, and a body&#8211; which is another expression.</li>
<li>Lambda Expressions vs. Expression Trees

<ul>
<li>compiled into a delegate in CIL</li>
<li>compiled into a data structure of type &#8220;System.Linq.Expressions.Expression&#8221;</li>
</ul>
</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">DelegateSample</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">BubbleSort</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span> <span class="n">items</span><span class="p">,</span> <span class="n">ComparisonHandler</span> <span class="n">comparisonMethod</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">items</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">comparisonMethod</span> <span class="o">==</span> <span class="n">null</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;comparisonMethod&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">items</span><span class="p">.</span><span class="n">Length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">comparisonMethod</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">temp</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">items</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                    <span class="n">items</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">delegate</span> <span class="kt">bool</span> <span class="n">ComparisonHandler</span><span class="p">(</span><span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">GreaterThan</span><span class="p">(</span><span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">first</span> <span class="o">&gt;</span> <span class="n">second</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">AlphabeticalGreaterThan</span><span class="p">(</span><span class="kt">int</span> <span class="n">first</span><span class="p">,</span> <span class="kt">int</span> <span class="n">second</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">comparison</span><span class="p">;</span>
</span><span class='line'>      <span class="n">comparison</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">ToString</span><span class="p">().</span><span class="n">CompareTo</span><span class="p">(</span><span class="n">second</span><span class="p">.</span><span class="n">ToString</span><span class="p">()));</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">comparison</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="p">[]</span> <span class="n">items</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BubbleSort</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">GreaterThan</span><span class="p">);</span>
</span><span class='line'>      <span class="c1">// In C# 2.0, we can also use BubbleSort(items, new ComparisonHandler(GreaterThan))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">items</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>13 Events 507</h2>

<p>publish-subscribe design pattern</p>

<ol>
<li>Coding the Observer Pattern with Multicast Delegates (with operator+, +=, &#8230;)

<ul>
<li>See the examples below</li>
<li>TODO: P518 Multicast Delegate Internals</li>
<li>How to handle exceptions from subscribers?

<ul>
<li><code>foreach(TDelegate handler in delegates.GetInvocationList())</code>See examples below</li>
</ul>
</li>
<li>How to handle multiple returns from multicast delegates?

<ul>
<li>Also <code>foreach(TDelegate handler in delegates.GetInvocationList())</code></li>
</ul>
</li>
</ul>
</li>
<li>Events

<ul>
<li>introduced to overcome 2 delegate shortages

<ol>
<li>Encapsulating the Subscription

<ul>
<li>User may use <code>=</code> instead of <code>+=</code> by mistake</li>
</ul>
</li>
<li>Encapsulating the publication

<ul>
<li>Delegates may be invoked outside the containing class</li>
</ul>
</li>
<li>easy to forget to check for null before invoking the delegate</li>
</ol>
</li>
<li><code>event</code> keyword before the delegate type and follows a empty delegate assignment

<ul>
<li>e.g. <code>public event TemperatureChangeHandler OnTemperatureChange = delegate { };</code></li>
<li><code>event</code> ensures that any reassignment of the delegate could occur only from within the class.</li>
<li>an empty delegate <code>delegate {}</code> represents a collection of zero listeners.</li>
</ul>
</li>
<li>customize with <code>add</code> and <code>remove</code></li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// delegate&#39;s implementation of subscriber-publisher</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Heater and Cooler Event Subscriber Implementations</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Cooler</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Cooler</span><span class="p">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">Temperature</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_Temperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span> <span class="n">_Temperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">float</span> <span class="n">_Temperature</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">void</span> <span class="n">OnTemperatureChanged</span><span class="p">(</span><span class="kt">float</span> <span class="n">newTemperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">newTemperature</span> <span class="o">&gt;</span> <span class="n">Temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Cooler: On&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Cooler: Off&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Heater</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Heater</span><span class="p">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">Temperature</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_Temperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span> <span class="n">_Temperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">float</span> <span class="n">_Temperature</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">void</span> <span class="n">OnTemperatureChanged</span><span class="p">(</span><span class="kt">float</span> <span class="n">newTemperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">newTemperature</span> <span class="o">&lt;</span> <span class="n">Temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Heater: On&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Heater: Off&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defining the Event Publisher, `Thermostat`</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Thermostat</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Define the delegate data type</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">delegate</span> <span class="kt">void</span> <span class="n">TemperatureChangeHandler</span><span class="p">(</span><span class="kt">float</span> <span class="n">newTemperature</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Define the event Publisher</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TemperatureChangeHandler</span> <span class="n">OnTemperatureChange</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_OnTemperatureChange</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span> <span class="n">_OnTemperatureChange</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">TemperatureChangeHandler</span> <span class="n">_OnTemperatureChange</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">CurrentTemperature</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_CurrentTemperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="n">CurrentTemperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">_CurrentTemperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">TemperatureChangeHandler</span> <span class="n">localOnChange</span> <span class="o">=</span> <span class="n">OnTemperatureChange</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">localOnChange</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// call subscribers</span>
</span><span class='line'>                    <span class="n">OnTemperatureChange</span><span class="p">(</span><span class="n">value</span><span class="p">);</span> <span class="c1">// multicast delegates</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">CurrentTemperatureHandlingError</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_CurrentTemperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="n">CurrentTemperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">_CurrentTemperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">OnTemperatureChange</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">foreach</span> <span class="p">(</span><span class="n">TemperatureChangeHandler</span> <span class="n">handler</span> <span class="n">in</span> <span class="n">OnTemperatureChange</span><span class="p">.</span><span class="n">GetInvocationList</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">handler</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">float</span> <span class="n">_CurrentTemperature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Thermostat</span> <span class="n">thermostat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thermostat</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Heater</span> <span class="n">heater</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Heater</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Cooler</span> <span class="n">cooler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cooler</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Register subscribers</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">OnTemperatureChange</span> <span class="o">+=</span> <span class="n">heater</span><span class="p">.</span><span class="n">OnTemperatureChanged</span><span class="p">;</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">OnTemperatureChange</span> <span class="o">+=</span> <span class="n">cooler</span><span class="p">.</span><span class="n">OnTemperatureChanged</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;Enter temperature: &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">temperature</span> <span class="o">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">CurrentTemperature</span> <span class="o">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">temperature</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Delegate Operators +=, -=, +, -</span>
</span><span class='line'>        <span class="n">Thermostat</span><span class="p">.</span><span class="n">TemperatureChangeHandler</span> <span class="n">delegate1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Thermostat</span><span class="p">.</span><span class="n">TemperatureChangeHandler</span> <span class="n">delegate2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Thermostat</span><span class="p">.</span><span class="n">TemperatureChangeHandler</span> <span class="n">delegate3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">delegate1</span> <span class="o">=</span> <span class="n">heater</span><span class="p">.</span><span class="n">OnTemperatureChanged</span><span class="p">;</span>
</span><span class='line'>        <span class="n">delegate2</span> <span class="o">=</span> <span class="n">cooler</span><span class="p">.</span><span class="n">OnTemperatureChanged</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Invoke both delegates:&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">delegate3</span> <span class="o">=</span> <span class="n">delegate1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">delegate3</span> <span class="o">+=</span> <span class="n">delegate2</span><span class="p">;</span>
</span><span class='line'>        <span class="n">delegate3</span><span class="p">(</span><span class="mi">90</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Invoke only delegate2&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">delegate3</span> <span class="o">-=</span> <span class="n">delegate1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">delegate3</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Error handling</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">OnTemperatureChange</span> <span class="o">+=</span> <span class="p">(</span><span class="n">newTemperature</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">ApplicationException</span><span class="p">();</span> <span class="p">};</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">CurrentTemperatureHandlingError</span> <span class="o">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">temperature</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// event implementation of subscriber-publisher</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Heater and Cooler Event Subscriber Implementations</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Cooler</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Cooler</span><span class="p">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">Temperature</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_Temperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span> <span class="n">_Temperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="kt">float</span> <span class="n">_Temperature</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">void</span> <span class="n">OnTemperatureChanged</span><span class="p">(</span><span class="n">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">Thermostat</span><span class="p">.</span><span class="n">TemperatureArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">NewTemperature</span> <span class="o">&gt;</span> <span class="n">Temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Cooler: On&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Cooler: Off&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Heater</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Heater</span><span class="p">(</span><span class="kt">float</span> <span class="n">temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Temperature</span> <span class="o">=</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">Temperature</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_Temperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span> <span class="n">_Temperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">float</span> <span class="n">_Temperature</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">void</span> <span class="n">OnTemperatureChanged</span><span class="p">(</span><span class="n">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">Thermostat</span><span class="p">.</span><span class="n">TemperatureArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">NewTemperature</span> <span class="o">&lt;</span> <span class="n">Temperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Heater: On&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">System</span><span class="p">.</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Heater: Off&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Defining the Event Publisher, `Thermostat`</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Thermostat</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">class</span> <span class="nc">TemperatureArgs</span><span class="o">:</span> <span class="n">System</span><span class="p">.</span><span class="n">EventArgs</span> <span class="p">{</span> <span class="c1">// conventions</span>
</span><span class='line'>        <span class="k">public</span> <span class="n">TemperatureArgs</span><span class="p">(</span><span class="kt">float</span> <span class="n">newTemperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NewTemperature</span> <span class="o">=</span> <span class="n">newTemperature</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">public</span> <span class="kt">float</span> <span class="n">NewTemperature</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_newTemperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="n">set</span> <span class="p">{</span> <span class="n">_newTemperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">private</span> <span class="kt">float</span> <span class="n">_newTemperature</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Define the delegate data type</span>
</span><span class='line'>    <span class="c1">// It is a norm:</span>
</span><span class='line'>    <span class="c1">//      sender: reference of the to the object that invoke the delegate </span>
</span><span class='line'>    <span class="c1">//      args:   if of type `System.EventArgs` or derives from `System.EventArgs` but contains additional data</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">delegate</span> <span class="kt">void</span> <span class="n">TemperatureChangeHandler</span><span class="p">(</span><span class="n">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">TemperatureArgs</span> <span class="n">newTemperature</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Define the event publisher</span>
</span><span class='line'>    <span class="c1">// delegate类型之前加event，赋一个空的delegate</span>
</span><span class='line'>    <span class="c1">// an empty delegate represents a collection of zero listeners</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">event</span> <span class="n">TemperatureChangeHandler</span> <span class="n">OnTemperatureChange</span> <span class="o">=</span> <span class="n">delegate</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">float</span> <span class="n">CurrentTemperature</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_CurrentTemperature</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="n">CurrentTemperature</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">_CurrentTemperature</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>                <span class="c1">// If there are any subscribers</span>
</span><span class='line'>                <span class="c1">// then notify them of changes in </span>
</span><span class='line'>                <span class="c1">// temperature</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">OnTemperatureChange</span> <span class="o">!=</span> <span class="n">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// Call subscribers</span>
</span><span class='line'>                    <span class="n">OnTemperatureChange</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">TemperatureArgs</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">float</span> <span class="n">_CurrentTemperature</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">Main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Thermostat</span> <span class="n">thermostat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thermostat</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Heater</span> <span class="n">heater</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Heater</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Cooler</span> <span class="n">cooler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cooler</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">temperature</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Register subscribers</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">OnTemperatureChange</span> <span class="o">+=</span> <span class="n">heater</span><span class="p">.</span><span class="n">OnTemperatureChanged</span><span class="p">;</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">OnTemperatureChange</span> <span class="o">+=</span> <span class="n">cooler</span><span class="p">.</span><span class="n">OnTemperatureChanged</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;Enter temperature: &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">temperature</span> <span class="o">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span><span class='line'>        <span class="n">thermostat</span><span class="p">.</span><span class="n">CurrentTemperature</span> <span class="o">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">temperature</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Define the event publisher</span>
</span><span class='line'><span class="k">public</span> <span class="n">event</span> <span class="n">TemperatureChangeHandler</span> <span class="n">OnTemperatureChange</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">add</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">System</span><span class="p">.</span><span class="n">Delegate</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span><span class="n">_OnTemperatureChange</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">remove</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">System</span><span class="p">.</span><span class="n">Delegate</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">_OnTemperatureChange</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">protected</span> <span class="n">TemperatureChangeHandler</span> <span class="n">_OnTemperatureChange</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的iPad安装的应用]]></title>
    <link href="http://www.puncsky.com/blog/2013/09/02/ipadmini/"/>
    <updated>2013-09-02T18:06:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/09/02/ipadmini</id>
    <content type="html"><![CDATA[<p>我是电子设备阅读控，曾经使用过Kindle 3, Kindle DXG, Meizu 1, Motorola Milestone 1, Macbook Pro, AOC USB Portable Monitor，文曲星 等等一系列不同尺寸的设备阅读各色书籍。<strong>但是迄今为止，还从未有一款能够像iPad mini这般赏心悦目</strong>。为什么？因为我也同几乎所有人一样，都喜欢控制的感觉，都喜欢色彩丰富的体验；而iPad mini正是如此的流畅(responsive)，小巧，绚丽。流畅之处在于，轻轻一划便可做笔记、摘录、翻页、查词典；小巧之处在于，在保证舒适阅读的前提，尽可能地缩小尺寸，你可以在任何地方享受阅读的乐趣。</p>

<p>至于色彩，不要开玩笑LCD屏幕伤眼睛了，盯着过于明亮或者过于晦暗的事物过久都会伤眼睛；而绝大多数人可以用电脑屏幕目不转睛地看一整天视频，却抱怨不过几小时的阅读伤眼睛……真滑稽。</p>

<p>iPad不适合严肃阅读？阅读行为从来就和阅读手段没有直接的关系。<strong>认为平板游戏让人分心的人们或许从未体验过电子游戏的真正魅力</strong>。当然，对于论文这种需要前后高频率反复对照、有大量图表公式、需要用不同尺寸颜色的笔来即时标注的读物，尤其当这篇论文是双栏排版（在计算机各大会议中最为流行）的时候，打印机仍旧是最佳选择。</p>

<p>据称，人们绝大多数使用的应用只有七个，所以在此我强烈推荐我最喜欢的七个应用：</p>

<h3>1. Duokan (Free)</h3>

<p>书籍购买与阅读的一体化解决方案，你所想象得到的阅读需求它几乎都能够满足：买正版书、讨论、整理、摘录、笔记、阅读数据统计等等一系列贴心的设计。数据排版精美、价格合理，整个应用赏心悦目。最重要的是，多看书城支持国际行用卡支付，对于我们这些海外游子而言，着实是一处令人热泪盈眶的存在。唯一可惜的是，阅读器没有网页浏览器的版本，尽管它支持iOS/Android/Kindle等移动设备。</p>

<h3>2. GoodReader (Free/$4.99)</h3>

<p>既然阅读，就必然需要对任何文本格式做任何可能的处理，GoodReader似乎支持绝大部分的文本格式。而对我而言，PDF足矣。此前还从未有任何体验会让我惊呼：这货在PDF上做标注如有神助！</p>

<h3>3. Kindle (Free)</h3>

<p>某些资源在互联网上死也搜不到开放的版本，这时候只能求助于亚马逊了；尽管设计体验一般，书籍略贵，但是全平台支持，绝对够用。</p>

<h3>4. 豆瓣阅读 HD (Free)</h3>

<p>与豆瓣无缝衔接，与Duokan（多看）书城互为补充。有比较强大的网页版本的阅读器，尽管iOS的应用暂时不好用，不支持笔记等操作。不支持国际信用卡支付。</p>

<h3>5. 读知乎 (Free)</h3>

<p>尝试了解“我不知道自己不知道什么事情”对我来说很重要，而知乎能够帮助我发现更大的世界。</p>

<h3>6. TeamViewer (Free)</h3>

<p>极为方便的远程桌面应用，无论是自己在多台电脑间交互、还是远程协助他人，这个都是不二之选。</p>

<h3>7. StumbleUpon (Free)</h3>

<p>原理同5，同样是为了尝试了解“我不知道自己不知道什么事情”。人生往往需要不期而遇的惊喜！</p>

<p>最后，我已经放弃了阅读新闻的习惯：几乎所有人都知道的新闻99%对我是没有价值的，不看也罢。至于Google Reader的替代品，Feedly原来做得极差，最新版本的好了许多，Digg Reader和<a href="http://theoldreader.com/">the Old Reader</a>都不错.</p>

<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Essential C# 4.0: Basics]]></title>
    <link href="http://www.puncsky.com/blog/2013/08/14/essential-c-sharp-basics/"/>
    <updated>2013-08-14T10:23:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/08/14/essential-c-sharp-basics</id>
    <content type="html"><![CDATA[<p>No one can ever master a programming language (PL) by studying it only without looking into and comparing it with other ones. Modern application software often requires a variety of components written in different PLs. Most importantly, language itself is not important at all; at least not important when compared to the fundamental ideas on architectures, frameworks, the design of the PL. A competing programmer can always get the hang of any PLs quickly.</p>

<p>Consequently, I make a list of PLs I would study seriously in the future.</p>

<ol>
<li>C# or Java

<ul>
<li>A serious pure OOP and enterprise level PL is always necessary for the reason of productivity.</li>
</ul>
</li>
<li>C/C++

<ul>
<li>The most powerful PL, which can be used to create almost everything.</li>
<li>Help to understand things under the hood.</li>
<li>C++: semi-OOP version of C, a horrible language which requires a life long time to study.</li>
</ul>
</li>
<li>Bash/Python

<ul>
<li>Scripts make your life easier.</li>
</ul>
</li>
<li>Javascript

<ul>
<li>Everything could be written in Javascript will be eventually written in Javascript.</li>
</ul>
</li>
<li>Lisp

<ul>
<li>Help to understand the beauty of functional PL.</li>
</ul>
</li>
</ol>


<p>The following part is the first part of my series notes on the book <em>Essential C#</em>, which is redeemed as the best book for C# learners.</p>

<ol>
<li>Essential C# 4.0: Basics(this post)</li>
<li><a href="http://www.puncsky.com/blog/2013/09/05/essential-c-sharp-intermediate/">Essential C# 4.0: Intermediate</a></li>
<li><a href="http://www.puncsky.com/blog/2013/09/15/essential-c-sharp-advanced/">Essential C# 4.0: Advanced</a></li>
</ol>


<!-- more -->


<h1>Essential C# 4.0</h1>

<h2>1 Introducing C# 1</h2>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/6/6f/CLR_diag.svg" alt="CLR converts CIL to native code" /></p>

<p>HelloWorld.exe is an <em>assembly</em>.</p>

<p>Dynamic Link Library (DLL) is also an <em>assembly</em>.</p>

<p><em>Language Contrast</em>: Java—Filename Must Match Class Name</p>

<p>keywords, identifiers. keywords may be used as identifiers if they include “@” as a prefix.</p>

<ul>
<li><strong>Pascal Casing</strong>: Type&#8217;s name should begin with a capital letter and a <em>noun</em>&#8230;</li>
<li><strong>Camel Casing</strong>: same except that the first letter is lowercase.</li>
</ul>


<p>method, statement</p>

<p><em>Language Contrast</em>: C++/Java &#8211; <code>main()</code> is all lowercase</p>

<p><strong>Strings are immutable.</strong></p>

<p>composite formatting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>System.Console.WriteLine("Your full name is {0} {1}.", firstName, lastName);
</span><span class='line'>//                        -------format string-------  ----format item-----
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Comment Types

<ul>
<li>Delimited comments</li>
<li>Single-line comments</li>
<li>XML delimited comments <code>/**comment**/</code></li>
<li>XML single-line comments <code>///comment</code></li>
</ul>
</li>
</ul>


<p>C# src &#8211;(C# compiler)&#8211;> common intermediate language(CIL) &#8211;(justintime compiling)&#8211;> machine code</p>

<p>Virtual Execution System(VES)</p>

<ul>
<li>whether require runtime to execution?

<ul>
<li>managed code and managed execution</li>
<li>unmanaged code and unmanaged execution</li>
</ul>
</li>
</ul>


<h2>2 Data Types 31</h2>

<ol>
<li>Numeric Types

<ul>
<li> Integer Types

<ul>
<li>Base Class Library (BCL)</li>
</ul>
</li>
<li> Float-Point Types</li>
<li> Decimal

<ul>
<li>greater precision than the floating-point types, but a smaller range.</li>
<li>conversions from floating-point types to the decimal type may result in overflow errors.</li>
<li>calculations with decimal are slightly slower.</li>
</ul>
</li>
<li> Literal Values

<ul>
<li>a representation of a constant value within source code.</li>
<li><strong>hardcoding</strong>: place a value directly into src

<ul>
<li>numbers with a decimal point will default to <code>double</code></li>
<li><code>decimal</code>? append an m (or M): <code>1.32525456874526m</code>

<ul>
<li>no suffix -> <code>int</code> <code>uint</code>, <code>long</code>, <code>ulong</code>.</li>
<li>suffix <code>U</code>/<code>L</code>/<code>UL</code>/<code>LU</code></li>
<li>infix <code>E</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>More Types

<ul>
<li> Boolean</li>
<li> Character

<ul>
<li>Escape Sequence: <code>\uxxxx</code> unicode char in hex, e.g. <code>\u0029</code></li>
</ul>
</li>
<li> Strings

<ul>
<li>verbatim string (with prefix <code>@</code>)

<ul>
<li>signify that a backslash should not be interpreted as the beginning of an escape sequence.</li>
<li>a newline cannot be placed directly within a string that is not prefaced with the @ symbol.</li>
<li>The only escape sequence the verbatim string does support is &#8220;&#8221;, which signifies double quotes and does not terminate the string.</li>
</ul>
</li>
<li><strong>immutable</strong>

<ul>
<li>How to modify? <code>System.Text.StringBuilder</code></li>
</ul>
</li>
<li>New Line

<ul>
<li>Win : <code>\r\n</code></li>
<li>*nix: <code>\n</code></li>
<li><code>Console.WriteLine()</code> or <code>Console.Write(Environment.NewLine);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>null and void

<ul>
<li> In C++, void is a data type commonly used as void<em><em>. In C#, <code>void</code> </em>is not
considered a data type</em> in the same way. Rather, it is used to identify that a
method does not return a value.</li>
<li> <code>var</code> introduced to support anonymous types, e.g. <code>var patent1 = new { Title = "Bifocals", YearOfPublication = "1884" };</code>. Avoid to use in other cases.

<ul>
<li>avoid anonymous types until working with lambda and query expressions that associate data from different types or you you are horizontally projecting the data so that for a particular type, there is less data overall.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Categories of Types</strong>

<ul>
<li> Value Types: all the C# primitive types except <code>string</code> and <code>object</code>, all derive from <code>System.ValueType</code>

<ul>
<li>data copied by value</li>
<li>for &lt; 16 bytes</li>
<li>stack</li>
</ul>
</li>
<li> Reference Types: <code>string</code>, <code>object</code>, any custom classes, most classes

<ul>
<li><strong><em>IMPORTANT</em></strong> string is passed by value and cloned when pass it to a method, BUT</li>
<li>data copied by reference</li>
<li>heap</li>
</ul>
</li>
<li> <strong>Nullable Modifier</strong>, value types can be null, like <code>int? count = null;</code></li>
</ul>
</li>
<li>Conversions

<ul>
<li> Explicit Cast

<ul>
<li><strong><em>checked and unchecked block</em></strong> whether to throw overflow exceptions</li>
<li>No numbers to booleans conversion</li>
</ul>
</li>
<li> Implicit Cast</li>
<li> Conversion Without Casting

<ul>
<li><code>Parse(T1 to, T2 from)</code></li>
<li><code>System.Convert</code></li>
<li><code>bool TryParse(T1 to,T2 from, T1 number)</code></li>
</ul>
</li>
</ul>
</li>
<li>Arrays

<ul>
<li> Declaring

<ul>
<li><code>string[] languages;</code> square brackets identify the <strong>rank</strong> (# of dimensions)</li>
<li>before the variable. <em>Language Contrast</em>: different from C++/JAVA, <code>int numbers[]</code> is not allowed.</li>
</ul>
</li>
<li> Instantiating

<ul>
<li><strong>IMPORTANT the same applied to other similar cases</strong>

<ul>
<li>If only one statement: <code>string[] languages = { "C#", "COBOL", "Java" };</code></li>
<li>If multiple lines: <code>string[] languages; languages = new string[]{"C#", "COBOL", "JAVA" };</code></li>
</ul>
</li>
<li><code>new string[size];</code></li>
</ul>
</li>
<li><p> Assigning</p>

<ul>
<li>multi-dimensional

<ol>
<li><strong><em>consistently sized array</em></strong> <code>int[,,,]</code></li>
<li><strong><em>jagged array</em></strong> <code>int[][][]</code></li>
</ol>
</li>
</ul>
</li>
<li><p> Using</p>

<ul>
<li><code>Sort()</code>, <code>BinarySearch()</code>, <code>Reverse()</code>, <code>Clear()</code>, &#8230;</li>
<li>Redimension? <code>System.Array.Resize()</code></li>
</ul>
</li>
<li> String as Arrays

<ul>
<li><code>.ToCharArray()</code></li>
</ul>
</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// instantiating
</span><span class='line'>int[,] cells = {
</span><span class='line'>{1, 0, 2},
</span><span class='line'>{0, 2, 0},
</span><span class='line'>{1, 2, 1}
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>int[][] cells = {
</span><span class='line'>new int[]{1, 0, 2},
</span><span class='line'>new int[]{0, 2, 0},
</span><span class='line'>new int[]{1, 2, 1}
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// handle conversion overflow with checked and unchecked
</span><span class='line'>checked {
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>unchecked {
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h2>3 Operators and Control Flow 83</h2>

<ol>
<li>Operators

<ul>
<li> Thread-Safe Incrementing and Decrementing, use thread-safe <code>Increment()</code> and <code>Decrement()</code> in <code>System.Threading.Interlocked</code> class</li>
</ul>
</li>
<li>Boolean Expressionn

<ul>
<li> XOR for eXclusive OR</li>
<li> Conditional Operator (?)

<ul>
<li>Shortcut to the conditional operator: <strong>Null Coalescing Operator (<code>??</code>)</strong> evaluates an expression for null and returns a second expression if the value is null.</li>
</ul>
</li>
</ul>
</li>
<li>Bitwise Operators</li>
<li>Control Flow Statements

<ul>
<li> <code>foreach (type variable in collection) { /* do something */ }</code>

<ul>
<li><code>variable</code> is read-only, and its scope is limited to the <code>foreach loop</code></li>
</ul>
</li>
</ul>
</li>
<li>Jump Statements

<ul>
<li> <em>Language Contrast</em>: Unlike C++, C# does not allow a <code>switch</code> statement to fall through from one <code>case</code> block to the next if the <code>case</code> includes a statement. A jump statement is always required following the statement within a case.</li>
<li> <em>Language Contrast</em>: C# prevents using goto into something, and allows its use only within or out of something.</li>
</ul>
</li>
<li><strong><em>Preprocessor Directives</em></strong>

<ul>
<li> <em>Language Contrast</em>: C/C++ contain a preprocessor. Preprocessor directives generally tell the compiler how to
compile the code in a file and do not participate in the compilation process
itself. In contrast, the C# compiler handles preprocessor directives as part
of the regular lexical analysis of the source code. As a result, C# does not
support preprocessor macros beyond defining a constant. In fact, the term
preprocessor is generally a misnomer for C#.</li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Null Coalescing Operator
</span><span class='line'>string fileName;
</span><span class='line'>// ...
</span><span class='line'>string fullName = fileName??"default.txt";
</span><span class='line'>// ...</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Preprocessor Directives
</span><span class='line'>
</span><span class='line'>#if CSHARP2
</span><span class='line'>System.Console.Clear();
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>#if LINUX
</span><span class='line'>...
</span><span class='line'>#elif WINDOWS
</span><span class='line'>...
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>// you can define a preprocessor symbol in two way
</span><span class='line'>// first,
</span><span class='line'>#define CSHARP2
</span><span class='line'>// second, in CLI
</span><span class='line'>// &gt;csc.exe /define:CSHARP2 TicTacToe.cs
</span><span class='line'>
</span><span class='line'>#warning "Some move allowed multiple times."
</span><span class='line'>// Performing main compilation...
</span><span class='line'>// ...\tictactoe.cs(471,16): warning CS1030: #warning: ’"Same move allowed
</span><span class='line'>// multiple times."’
</span><span class='line'>// Build complete -- 0 errors, 1 warnings
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// Note that warning numbers are prefixed with the letters CS in the compiler output.
</span><span class='line'>// to disable warnings, first,
</span><span class='line'>#pragma warning disable 1030
</span><span class='line'>// second,
</span><span class='line'>// &gt; csc /doc:generate.xml /nowarn:1591 /out:generate.exe Program.cs
</span><span class='line'>
</span><span class='line'>#pragma warning restore 1030
</span><span class='line'>// one of the most common warnings to disable is CS1591, as this appears when you elect to
</span><span class='line'>// generate XML documentation using the /doc compiler option, but you neglect to document
</span><span class='line'>// all of the public items within your program.
</span><span class='line'>
</span><span class='line'>// specify line numbers
</span><span class='line'>#line 113 "TicTacToe.cs"
</span><span class='line'>#warning "Same move allowed multiple times."
</span><span class='line'>#line defualt
</span><span class='line'>// display line 113 and then restore
</span><span class='line'>
</span><span class='line'>// for visual editors to open/collapse
</span><span class='line'>#region Display Tic-tac-toe Board
</span><span class='line'>...
</span><span class='line'>#endregion Display Tic-tac-toe Board
</span></code></pre></td></tr></table></div></figure>


<h2>4 Methods and Parameters 149</h2>

<ol>
<li>Calling a Method

<ul>
<li> Namespace

<ul>
<li>Everything should appear within a class definition.</li>
</ul>
</li>
<li> Type Name</li>
<li> Scope</li>
<li> Method Name</li>
<li> Parameters</li>
<li> Method Return

<ul>
<li><em>Language Contrast</em>:Unlike C++, C# classes never separate the implementation from the declaration. Cleaner and more readable.</li>
</ul>
</li>
</ul>
</li>
<li>Declaring a Method</li>
<li>The Using Directive

<ul>
<li> <em>Language Contrast</em> Java uses wildcards in <code>import</code> directive, while C# requires each namespace to be imported explicitly.</li>
<li> <code>using</code> could be nested in other namespaces but seldom used in this way.</li>
<li> <strong><em>Aliasing</em></strong> a namespace or type: <code>using CountDownTimer = System.Timers.Timer;</code></li>
</ul>
</li>
<li>Parameters

<ul>
<li> Value Parameters

<ul>
<li><code>static int Main(string[] args)</code> By convention, a return other than zero indicates an error.

<ul>
<li><em>Language Contrast</em>, CLI arguments start from <code>args[0]</code>. The name of the program is omitted.</li>
<li>access the CLI arguments through <code>args</code> or <code>System.Environment.GetCommandLineArgs()</code></li>
<li><strong><em>Multiple <code>Main()</code> Methods in a program</em></strong>? use <code>&gt;csc.exe /m main.cs</code></li>
</ul>
</li>
<li>call stack, <em>stack unwinding</em>, <em>call site</em>调用地点</li>
<li><code>string</code> as parameters are passed by value</li>
<li>By default, parameters are passed by value</li>
</ul>
</li>
<li> <strong><em>Reference Parameters (<code>ref</code>)</em></strong>

<ul>
<li>declare <code>ref Type variable</code> in the function&#8217;s list of args and call it with <code>ref variable</code></li>
</ul>
</li>
<li> <strong><em>Output Parameters (<code>out</code>)</em></strong></li>
<li> <strong><em>Parameter Arrays (<code>params</code>)</em></strong></li>
<li> Optional Parameters

<ul>
<li>optional parameters
must appear after all required parameters (those that don’t have default
values). Also, the fact that the default value needs to be a constant, compile-
time-resolved value</li>
<li><strong>named parameters</strong></li>
</ul>
</li>
</ul>
</li>
<li>Method Overloading</li>
<li>Exception Handling

<ul>
<li> <strong><em>generic catch</em></strong>: <code>try { } catch { }</code> <em>Language Contrast</em> C++: <code>try { } catch (...) { }</code>. JAVA: <code>Exception</code> is the base class for all exceptions, so <code>try { } catch (Exception e) { }</code>.</li>
<li> Avoid using exception handling to deal with expected situations</li>
<li> <code>bool int.TryParse(textVariable, out number)</code></li>
</ul>
</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Aliasing a namespace or type
</span><span class='line'>using Timer = System.Timers.Timer;
</span><span class='line'>
</span><span class='line'>class HelloWorld
</span><span class='line'>{
</span><span class='line'>  static void Main()
</span><span class='line'>  {
</span><span class='line'>    Timer timer;
</span><span class='line'>  // ...
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Refrence Parameters
</span><span class='line'>class Program
</span><span class='line'>{
</span><span class='line'>  static void Main() {
</span><span class='line'>    string first = "first";
</span><span class='line'>  string second = "second";
</span><span class='line'>  Swap(ref first, ref second);
</span><span class='line'>
</span><span class='line'>    System.Console.WriteLine(@"first = ""{0}"", second = ""{1}""", first, second);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  static void Swap(ref string first, ref string second) {
</span><span class='line'>    string tmp = first;
</span><span class='line'>  first = second;
</span><span class='line'>  second = tmp;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Parameter Arrays
</span><span class='line'>class PathEx
</span><span class='line'>{
</span><span class='line'>  static void Main()
</span><span class='line'>  {
</span><span class='line'>    string fullName;
</span><span class='line'>  fullName = Combine(
</span><span class='line'>      Directory.GetCurrentDirectory();
</span><span class='line'>      "bin", "config", "index.html");
</span><span class='line'>    Console.WriteLine(fullName);
</span><span class='line'>  fullName = Combine(
</span><span class='line'>      Environment.SystemDirectory,
</span><span class='line'>      "Temp", "index.html");
</span><span class='line'>    Console.WriteLine(fullName);
</span><span class='line'>  fullName = Combine(
</span><span class='line'>      new string[] {
</span><span class='line'>          "C:\", "Data",
</span><span class='line'>          "HomeDir", "index.html"} );
</span><span class='line'>  Console.WriteLine(fullName);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>    static string Combine(params string[] paths)
</span><span class='line'>  {
</span><span class='line'>      string result = string.Empty;
</span><span class='line'>      foreach (string path in paths) {
</span><span class='line'>          result = System.IO.Path.Combine(result, path);
</span><span class='line'>      }
</span><span class='line'>      return result;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// named arguments
</span><span class='line'>class Program
</span><span class='line'>{
</span><span class='line'>  static void Main()
</span><span class='line'>  {
</span><span class='line'>    DisplayGreeting(firstName: "Tim", lastName: "Pan");
</span><span class='line'>  }
</span><span class='line'>  public void DisplayGreeting(
</span><span class='line'>    string firstName,
</span><span class='line'>  string middleName = default(string),
</span><span class='line'>  string lastName = default(string))
</span><span class='line'>  {
</span><span class='line'>    // ...
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>5 Classes 201</h2>

<ol>
<li>Declaring and Instantiating a Class</li>
<li>Instance Fields

<ul>
<li> Declaring</li>
<li> Accessing</li>
<li> Const and readonly modifiers</li>
</ul>
</li>
<li>Instance Methods</li>
<li>Access Modifiers

<ul>
<li> <code>public</code>, <code>private</code>, <code>protected</code>, <code>internal</code>, <code>protected internal</code></li>
</ul>
</li>
<li>Properties

<ul>
<li> Declaring

<ul>
<li><em>Language Contrast</em> Programmers should view <code>new</code> as a call to instantiate an object, <em>not as a call to allocate memory</em>. It just retrieves memory from the memory manager.</li>
</ul>
</li>
<li> Naming Conventions

<ul>
<li>property name <code>FirstName</code>, then field name <code>_FirstName</code>(preferred), <code>_firstName</code>, or <code>m_FirstName</code>(C++ style).</li>
</ul>
</li>
<li> Using Properties with Validation</li>
<li> Read-Only and Write-Only</li>
<li> Access Modifiers on Getters and Setters

<ul>
<li>e.g. <code>private set()</code></li>
</ul>
</li>
<li> Properties as Virtual Fields

<ul>
<li>They can even do not exist physically</li>
</ul>
</li>
<li> Properties and Method Calls <strong>Not Allowed</strong> as <code>ref</code> or <code>out</code> Parameter Values</li>
</ul>
</li>
<li>Constructors &amp; Finalizers

<ul>
<li> Declaring</li>
<li> Default constructors

<ul>
<li>Once there is a explicitely defined constructor, the default one (without parameters) is no longer provided.</li>
</ul>
</li>
<li> Object Initializers <code>Employee emp1 = new Employee("Inigo", "Montoya") { Title = "Computer Nerd", Salary = "Not Enough"};</code>

<ul>
<li>Collection Initializers</li>
</ul>
</li>
<li> Overloading Constructors</li>
<li> Constractor Chaining: Calling another Constructor Using <code>this</code>

<ul>
<li><code>public Employee(int id, string fristName, string lastName): this(firstName, lastName) { Id = id ; }</code></li>
</ul>
</li>
<li> Generalize initialization: Refactor init process in the ctor into a private init method</li>
<li> Finalizers

<ul>
<li>Like JAVA, unlike C++</li>
</ul>
</li>
</ul>
</li>
<li>Static

<ul>
<li> <em>Language Contrast</em> The equivalent of a global field or function within the realm of C# is a static field or function</li>
<li> Static Fields</li>
<li> Static Methods</li>
<li> Static Constructors</li>
<li> Static Classes

<ol>
<li>it prevents a programmer from writing code that
instantiates the SimpleMath class.</li>
<li>it prevents the declaration of any
instance fields or methods within the class. Since the class cannot be
instantiated, instance members would be pointless.</li>
</ol>
</li>
<li> <code>const</code> fields are <code>static</code> automatically, and declaring a <code>const</code> field as <code>static</code> explicitly will cause a compile error</li>
<li> <strong><em><code>readonly</code> modifier is available only for fields (not for local variables)</em></strong> it is modifiable only from inside the constructor or directly during declaration. 似乎是把C++中<code>const</code>可以ctor初始化的功能拆成<code>readonly</code>了.</li>
</ul>
</li>
<li><strong><em>Extension Methods</em></strong> requirements

<ul>
<li> The first parameter corresponds to the type on which the method
extends or operates.</li>
<li> To designate the extension method, prefix the extended type with the
this modifier.</li>
<li> To access the method as an extension method, import the extending
type’s namespace via a using directive (or place the extending class in
the same namespace as the calling code).</li>
</ul>
</li>
<li>Special Classes

<ul>
<li> <code>partial</code> Classes

<ul>
<li>the general purpose of a partial class is to allow the splitting of a class definition across multiple files</li>
<li><code>partial</code> methods allow for a declaration of a method without requiring
an implementation. However, when the optional implementation is
included, it can be located in one of the sister partial class definitions,
likely in a separate file.</li>
</ul>
</li>
<li> Nested Classes

<ul>
<li>One unique characteristic of nested classes is the ability to specify private
as an access modifier for the class itself</li>
<li>Another interesting characteristic of nested classes is that they can
access any member on the containing class, including private members.</li>
<li>treat public nested classes suspiciously;
they indicate potentially poor code that is likely to be confusing
and hard to discover.</li>
</ul>
</li>
</ul>
</li>
</ol>


<h2>6 Inheritance 269</h2>

<ol>
<li>Derivation

<ul>
<li> Extension methods are also inherited.</li>
<li> <em>Language Contrast:</em> Different from C++, C# is a <strong>single-inheritance</strong> programming language, as is the CIL. Derive from only one class a time.

<ul>
<li>avoid using a multiple-inheritance class</li>
<li><code>sealed</code> class cannot be derived. <em>Language Contrast:</em> C# sealed class = Java final class. In java, <code>final</code> can be applied to

<ol>
<li>classes. = C# sealed class</li>
<li><strong>methods, cannot be overridden in a derived class. This is default in C#, unless you declare a method as <code>virtual</code></strong>, and in a derived class this can be prevented for further classes with <code>sealed</code> again.</li>
<li>fields and variables, can be initialized only once. = C# readonly</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>Overriding

<ul>
<li> <em>Language Contrast:</em> Java &#8211; Virtual Methods by Default. Java and C++ &#8211; Implicit Overriding. However, in C#, in order to override a method, both the base class and the derived class members must match and have corresponding <code>virtual</code> and <code>override</code> keywords.</li>
<li> ctor: <em>Language Contrast:</em> Dispatch Method Calls during Construction

<ul>
<li>C++: the type is associated with the base type rather than the derived type, and virtual methods call the base implementation.</li>
<li>C#: dispatches virtual method calls to the most derived type.</li>
</ul>
</li>
<li> only instance members can be virtual. The CLR uses the concrete
type, specified at instantiation time, to determine where to dispatch a
virtual method call, so static virtual methods are meaningless and the
compiler prohibits them.</li>
<li> <code>new</code> modifier for methods. <strong><em>If neither <code>override</code> nor <code>new</code> is specified, then <code>new</code> will be assumed, thereby maintaining the desired version safety.</em></strong></li>
<li> <em>upcasting</em>: please see the example codes below. <em>downcasting</em>: ?dangerous?</li>
<li> <em>sealed</em> modifier for methods. prevent overriding</li>
<li> <em>base</em> member

<ul>
<li>ctor <code>public Contact(string name) : base(name) { Name = name; }</code></li>
</ul>
</li>
</ul>
</li>
<li>Abstract Classes

<ul>
<li> <em>Language Contrast</em>

<ul>
<li>C++ pure virtual function with <code>=0</code>. It does not require the class itself to have any special declaration.</li>
<li>C# and Java require <code>abstract</code> if the class has <code>abstract</code> member</li>
</ul>
</li>
<li> polymorphism.

<ul>
<li>base.foo() to derived1.foo(), derived2.foo(), derived3.foo() overriding</li>
</ul>
</li>
</ul>
</li>
<li><code>System.Object</code>

<ul>
<li> Every class is derived from <code>System.Object</code></li>
</ul>
</li>
<li><strong><em><code>is</code> operator</em></strong>

<ul>
<li> verify the underlying type with <code>is</code> operator, e.g. <code>if (data is string) data = Encrypt((string) data);</code></li>
</ul>
</li>
<li><strong><em><code>as</code> operator</em></strong>

<ul>
<li> conversion to a data type, and assign null if the source type is not inherently (within the inheritance chain). Avoid additional try/catch handling code. e.g. <code>Print(data as Document);</code></li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// C++ Dispatch method calls during construction</span>
</span><span class='line'><span class="c1">// It will call method in the same class although it is virtual</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">A</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;A ctor()&quot;</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;A Foo()&quot;</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="o">:</span> <span class="k">public</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">B</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B ctor()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;B Foo()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="o">:</span> <span class="k">public</span> <span class="n">B</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">C</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;C ctor&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;C Foo()&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">A</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">C</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">delete</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// output&gt;</span>
</span><span class='line'><span class="c1">// A ctor()</span>
</span><span class='line'><span class="c1">// A Foo()</span>
</span><span class='line'><span class="c1">// B ctor()</span>
</span><span class='line'><span class="c1">// B Foo()</span>
</span><span class='line'><span class="c1">// C ctor</span>
</span><span class='line'><span class="c1">// C Foo()</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// C#</span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Tmp</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">Main</span><span class="p">(</span><span class="n">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">C</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">A</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;A ctor&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;A Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="o">:</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">B</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;B ctor&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;B Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="o">:</span> <span class="n">B</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">C</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C ctor&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// output&gt;</span>
</span><span class='line'><span class="c1">// A ctor</span>
</span><span class='line'><span class="c1">// C Foo()</span>
</span><span class='line'><span class="c1">// B ctor</span>
</span><span class='line'><span class="c1">// C Foo()</span>
</span><span class='line'><span class="c1">// C ctor</span>
</span><span class='line'><span class="c1">// C Foo()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// upcasting in C#</span>
</span><span class='line'><span class="c1">// `new` modifier for methods </span>
</span><span class='line'><span class="k">using</span> <span class="n">System</span><span class="p">;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Tmp</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">int</span> <span class="n">Main</span><span class="p">(</span><span class="n">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">D1</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D1</span><span class="p">();</span>
</span><span class='line'>        <span class="n">D2</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D2</span><span class="p">();</span>
</span><span class='line'>        <span class="n">C</span> <span class="n">c</span> <span class="o">=</span> <span class="n">d1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>        <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">d1</span><span class="p">.</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>        <span class="n">d2</span><span class="p">.</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>        <span class="n">c</span><span class="p">.</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>        <span class="n">b</span><span class="p">.</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>        <span class="n">a</span><span class="p">.</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;A Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">B</span><span class="o">:</span> <span class="n">A</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">new</span> <span class="k">virtual</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// warning if without new</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;B Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span><span class="o">:</span> <span class="n">B</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">override</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;C Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D1</span><span class="o">:</span> <span class="n">C</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">new</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;D1 Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">D2</span><span class="o">:</span> <span class="n">C</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">void</span> <span class="n">Foo</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// warning to add `new` by default</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;D2 Foo()&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// D1 Foo()</span>
</span><span class='line'><span class="c1">// D2 Foo()</span>
</span><span class='line'><span class="c1">// C Foo()</span>
</span><span class='line'><span class="c1">// C Foo()</span>
</span><span class='line'><span class="c1">// A Foo()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// upcasting in C++</span>
</span><span class='line'><span class="c1">// A -&gt; B -&gt; C -&gt; D</span>
</span><span class='line'><span class="c1">// A::Foo()</span>
</span><span class='line'><span class="c1">// virtual B::Foo()</span>
</span><span class='line'><span class="c1">// virtual C::Foo()</span>
</span><span class='line'><span class="c1">// D:Foo()</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">D</span><span class="o">*</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="n">D</span><span class="p">();</span>
</span><span class='line'>     <span class="n">C</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>     <span class="n">B</span><span class="o">*</span> <span class="n">b</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>     <span class="n">A</span><span class="o">*</span> <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">d</span><span class="o">-&gt;</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>     <span class="n">c</span><span class="o">-&gt;</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>     <span class="n">b</span><span class="o">-&gt;</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>     <span class="n">a</span><span class="o">-&gt;</span><span class="n">Foo</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">delete</span> <span class="n">d</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// D Foo()</span>
</span><span class='line'><span class="c1">// D Foo()</span>
</span><span class='line'><span class="c1">// D Foo()</span>
</span><span class='line'><span class="c1">// A Foo()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>7 Interfaces 305</h2>

<ul>
<li><code>IPascalCase</code>, no implementation, no data (no fields, but properties)</li>
<li>Polymorphism</li>
<li>Interface Implementation

<pre><code>- Declaring a class to implement an interface is similar to deriving from a
base class in that the implemented interfaces appear in a comma-separated
list along with the base class (order is not significant between interfaces).
***The only difference is that classes can implement multiple interfaces.***
- The base class specifier (if there is one) must come first: `public class Contact : PdaItem, IListable, IComparable {...`
- ***Explicit(more often) vs Implicit*** [Stackoverflow](http://stackoverflow.com/questions/143405/c-sharp-interfaces-implicit-implementation-versus-explicit-implementation) ??
  - Explicit: mechanism code, or avoid overriding,
    - `ITrace.Dump()` to save info to files in `Person`
  - Implicit: semantic/model/core code
    - Including an implicit `Compress()` implementation on a `ZipCompression`
    class is a perfectly reasonable choice, since `Compress()` is a core
    part of the `ZipCompression` class’s behavior.
</code></pre></li>
<li>Interface Inheritance

<ul>
<li>upcasting is always successful (<code>Base b = new Derived()</code>)</li>
<li>downcasting is not, so requires an explict cast</li>
<li>Explicit Implementation should match the exact corresponding level in the hierachy.</li>
</ul>
</li>
<li>Versioning</li>
<li>Extension Methods on Interfaces</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Explicit interface implementation</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Contact</span> <span class="o">:</span> <span class="n">PdaItem</span><span class="p">,</span> <span class="n">IListable</span><span class="p">,</span> <span class="n">IComprarable</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">string</span><span class="p">[]</span> <span class="n">IListable</span><span class="p">.</span><span class="n">ColumnValues</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>    <span class="n">values</span> <span class="o">=</span> <span class="p">((</span><span class="n">IListable</span><span class="p">)</span><span class="n">contact2</span><span class="p">).</span><span class="n">ColumnValues</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>8 Value Types 331</h2>

<p>All the C# primitive types are value types except <code>string</code> and <code>object</code>. How to define user&#8217;s own value types? <code>struct</code></p>

<ol>
<li>Structs (derive from <code>System.Object</code> -> <code>System.ValueType</code>)

<ul>
<li> Recommend: Once you have instantiated a value type, you should not be able to modify the same instance.</li>
<li> *C# prevents explict definition of default constructors (parameterless)</li>
<li> <code>struct</code> fields can not be initialized at declaration time.</li>
<li> Unlike <code>class</code>, <code>struct</code> does not support finalizers. There is no need for the GC.</li>
<li> <em>Language Contrast</em>: In C++, the difference between structs and classes is simply that by
default, a struct’s members are public. C# doesn’t include this subtle distinction.
The contrast is far greater in C#, where struct significantly
changes the memory behavior from that of a class.</li>
<li> <code>T default(T)</code> to get the default value</li>
</ul>
</li>
<li><strong><em>Boxing</em></strong>: upcasting <code>ValueType</code> to <code>Object</code>

<ol>
<li>First, memory is allocated on the heap that will contain the value
type’s data and a little overhead (a SyncBlockIndex and method
table pointer).</li>
<li>Next, a memory copy occurs from the value type’s data on the stack,
into the allocated location on the heap.</li>
<li>Finally, the object or interface reference is updated to point at the
location on the heap.</li>
<li> <strong><em>unboxing</em></strong> TODO start from page 339</li>
<li> <strong><em><code>lock</code> statement</em></strong></li>
</ol>
</li>
<li>Enums

<ul>
<li> An enum always has an underlying type, which may be <code>int</code>(default), <code>uint</code>, <code>long</code>,
or <code>ulong</code>, but not <code>char</code>.</li>
<li> Cast between enums via <code>System.Array</code></li>
<li> Cast between enums and strings via

<ul>
<li><em>enum -> string</em>.</li>
<li><em>string -> enum</em>. <code>Enum.Parse()</code></li>
</ul>
</li>
<li> Enums as bit flags with <code>[Flags]</code> FlagsAttribute to perform bit operations.</li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中国工程师在初创公司的经验总结--《打造Facebook》]]></title>
    <link href="http://www.puncsky.com/blog/2013/06/11/%5B%3F%5D-ben-chu-chuang-gong-si-de-hui-yi-lu-%3C%3Cda-zao-facebook%3E%3E/"/>
    <updated>2013-06-11T20:38:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/06/11/[?]-ben-chu-chuang-gong-si-de-hui-yi-lu-<<da-zao-facebook>></id>
    <content type="html"><![CDATA[<p>这是一本无趣的书，甚至都不能被称作一本书，而更像是国内某大学老师上课的讲义，兼具冗余繁杂、事后诸葛亮。不可否认，的确有一些新奇的东西在里面，但无论怎么看都不禁让人疑惑：是不是原作者根据工作心得列了一份提纲，然后随意找了个写手照本宣科地添加了些文字？难道作者的目标群体仅仅就是些大一大二的学生么？</p>

<p>当然，无论这本书水平如何，毕竟来自大名鼎鼎的Facebook，我们这些后生们怎么着也得战战兢兢地读完啊……</p>

<p>以下是我的阅读笔记：</p>

<!-- more -->


<ul>
<li>扎克伯格每年都会给自己制定一项挑战，为了学习中文他每周在公司里搞一次小规模的中文讨论会。</li>
<li>社交网络只有百分之二是真的&#8211;穿的T恤和拖鞋</li>
<li>作者在Yahoo工作一年半之后,收到了来自谷歌和Facebook的猎头的邀请。当时他还在斯坦福大学半工半读管理科学和工程硕士学位。</li>
<li>要求大涨工资的最好方法就是,从外面拿一个offer,证明自己的市场价值比在公司里的价值更高,然后跟公司进行协商。如果你对公司或者老板有很深的感情，就不建议这么做，因为这样体现了对公司的不忠诚。</li>
<li>雅虎公司的公司政治问题比较严重，小组之间的隔阂盖过了公司的整体利益。</li>
<li>一流人才组成的团队有很多好处：

<ul>
<li>让你更加容易的被委以重任,如果你还没有证明自己和他们一样出色甚至更出色他们宁愿独自辛苦工作也不愿意接受你的帮助,因为他们担心你会搞砸。</li>
<li>通过完成艰巨任务,一流人才相互之间成为榜样。</li>
<li>一流人才喜欢互相挑战。</li>
<li>一流人才可以相互学到很多东西。</li>
</ul>
</li>
<li>如何远离非一流人才呢?

<ul>
<li>招人要慢。</li>
<li>炒人要快。</li>
</ul>
</li>
<li>与做研究不同的是,公司想要的是把想法迅速地、高质量的实现出来,然后在实践中不断改进。</li>
<li>如何找到一流人才?

<ol>
<li>鼓励内部推荐。尽量多出现在未来的老板经常出没的活动场所之中，尝试去认识他们。让他们对你感兴趣,然后做内部推荐。参加这些公司举办的编程比赛。</li>
<li>收购。</li>
</ol>
</li>
<li>截止到2011年9月, Facebook的工程师队伍里,人数最多的是MIT的毕业生,其次是Stanford 和CMU 。</li>
<li><p>黑客文化</p>

<ul>
<li>最核心的价值观是所有的信息都应该是自由传播的。黑客们的驱动力不是偷窃和破坏,而是学习和创造。</li>
<li>黑客仅仅意味着快速开发,或者是挑战能力的极限。大多数黑客都是理想主义者,希望对世界做出积极贡献。</li>
<li>很可能迅速发布小规模更新,并从中汲取经验教训,而不是试图一蹴而就。Done is better than perfect.</li>
</ul>
</li>
<li><p>产品开发的三个准则。</p>

<ol>
<li>迅速发布再进行检测。所谓灰度发布,是不让一次性所有的用户接触到新产品,而是先开放给一部分用户,然后观测关键数据。如果反应良好,再逐步提高用户开放比例达百分之百。</li>
<li>坦然面对不确定性。</li>
<li>不追求极致而是不断发布达到目标。</li>
</ol>
</li>
<li>硅谷盛行工具文化,公司内部的工具可以极大的提高每个员工的工作效率,可以减少运营人员的数量。

<ul>
<li>Code Review的工具<a href="http://phabricator.org/">Phabricator</a></li>
<li>除了自动化工具,还有一种工具是人为的,就是把最最重要的目标及相关的任务、目标日期、负责人等信息写到白板上,挂在离我们最近的墙上。每天一抬头就可以看到,每次开会都会路过,时刻提醒我们最最重要的事情是什么,这种工具对我们组非常有效。</li>
</ul>
</li>
<li>所谓黑卡都好就是非法盗用的信用卡。互联网上有线下黑卡交易体系,你可以去购买大量的信用卡信息,有些丢失信用卡的人还没有来得及注销,信用卡就仍然可以用,。黑卡体系就是利用这样的时间缝隙,赚取差价。最后的赔偿还是由收款方支付。</li>
<li>搭建团队过程中对于招人的体会

<ol>
<li>项目目标对于招人的需求是有理有据的</li>
<li>把招人看作约会,需要互相欣赏。要珍惜一起合作的机会。</li>
<li>需要多方沟通。</li>
</ol>
</li>
<li>如何开展一对一碰头会? Happy PIG

<ul>
<li>工作开不开心 happy</li>
<li>效率高不高 Productivity</li>
<li>工作的影响大不大 Impact</li>
<li>当前的工作有没有提供学习成长的机会 Growth Opportunity</li>
</ul>
</li>
<li>如果决定从工程师向管理者转变，一个关键因素一定是对“管理”感兴趣。你如果只是对技术感兴趣，那么“升职”为经理不但没有帮助，反而有害，因为这么一来，你花在技术钻研上面的时间减少了。成为经理之后，很多时间要花在激励团队、项目管理、对外沟通上。如果你没有这方面的兴趣，做起来也是很痛苦的。</li>
<li>导师(mentor)文化：寻找一位可以信赖的导师帮你提高

<ol>
<li>双方是朋友。</li>
<li>导师在某一领域能够帮你提高自己的价值。</li>
<li>要积极主动去寻找。</li>
<li>对每次和导师的交流进行总结、记录。</li>
</ol>
</li>
<li>产品开发流程

<ol>
<li>Vision &amp; Goals

<ul>
<li>SMART</li>
<li>6-2-2 Expected Jobs, Framework &amp; Quality, Controversial</li>
<li>120% Principle</li>
</ul>
</li>
<li>Prioritize</li>
<li>Align Across Teams</li>
<li>Let Others Know</li>
<li>Design Product</li>
<li>Pinpoint the Person</li>
<li>Scrum</li>
<li>Sync &amp; Report (Brief)</li>
<li>Launch &amp; Monitor

<ul>
<li>Post-mortem</li>
</ul>
</li>
</ol>
</li>
<li>风投

<ul>
<li>创业者要靠谱、有激情、有能力，最佳创业团队是三人组</li>
<li>四大指导原则，回避纯电商、游戏

<ol>
<li>额度有限</li>
<li>六大领域：Mobile/Payment/CloudApp(Dropbox,Evernote) not IaaS/Education/Travel&amp;Food/Big Data</li>
<li>做好最坏打算</li>
<li>只跟投或合投</li>
</ol>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年9月至2013年5月阅读记录]]></title>
    <link href="http://www.puncsky.com/blog/2013/06/01/2013nian-wu-yue-fen-yue-du-ji-lu/"/>
    <updated>2013-06-01T21:12:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/06/01/2013nian-wu-yue-fen-yue-du-ji-lu</id>
    <content type="html"><![CDATA[<p>在来到耶鲁的九个月中，迫于自高中以来最大的学习压力，阅读量较小，总共读了约莫13本书，其中4、6、10、11算是重读。一度赶在停产之前购置了Kindle DXG ，意图博览盗版书，后来才发现系统与Kindle 3 相比 简直烂到了极致，不仅不能做笔记，更加凶残的是无法原生支持中文。连多看系统都已经不再为DXG更新。</p>

<p>现在我来简单讲讲这些书的读后感。</p>

<!--more-->


<ol>
<li>《目送》 龙应台

<ul>
<li><strong>反念一想，或许只有那些不懂事、不耐烦和无可奈何的错过才会让爱和亲情更加刻骨铭心。我们就站在这里目送一切远去，默默地自言自语：不必追。</strong></li>
</ul>
</li>
<li>《百年思索》 龙应台

<ul>
<li>跟《目送》截然相反，《百年思索》的笔调冷峻而沉重</li>
<li>印象最为深刻的一篇是《有什么副刊，就有什么社会》

<ul>
<li>在德文报纸里，副刊是非常重要的传统，首屈一指的是《法兰克福汇报》（FAZ）的副刊。作者极尽所能地渲染了该刊物虽然仅仅是一份副刊，但是信实稳重，内容之深刻，话题之纷繁，文化水平之高超，读者之精英。</li>
<li>我所好奇的是这篇文章成于1997年，那个时候谷歌还没有成立，互联网浪潮和信息大爆炸才刚刚开始；16年过去了，这份报纸如今还在保持这当年的传统吗？当年那些精英的读者们如今还在订阅这份报纸吗？“乱花渐欲迷人眼，在瞎子的世界，独眼龙就是国王。””由奢入简易，由俭入奢难。“<strong>在这个时代，要保持专注与深刻是在是太过困难了，以至于我们不得不反复拷问自己——你又忘却了那些亘古的优秀的传统了吗？</strong>至少我有经常在没有意识的情况下迷迷糊糊地打开浏览器登陆人人或者微博的坏习惯……</li>
</ul>
</li>
<li>其次是讲述巴以冲突的一系列文章，例如《走过疲惫的巴勒斯坦》

<ul>
<li>我想，是什么样的一种力量，让早已散落在世界各地多少年代的犹太人不辞劳苦千里迢迢地凝聚到一个全新的国家？是什么让他们毅然放弃了自己原本衣食无忧的生活，来到这片原本贫瘠的土地上筚路蓝缕以启山林？是什么让他们勇敢地直面来自阿拉伯人死亡的威胁，在这片苦难的土地上和炮火、地雷、手榴弹生活在一起？是<strong>信仰</strong>。</li>
<li><strong>以牙还牙以血还血这种惨剧如果发生在自己身上的时候，我还会站着说着宽容而不腰疼吗？</strong></li>
</ul>
</li>
</ul>
</li>
<li>《超爆魔鬼经济学》 Steven David Levitt

<ul>
<li>这本书的主题是很多传统的智慧(Conventional Wisdom)其实是不可靠的。比如，酒后驾车要比酒后步行安全八倍之多。电视是印度女性自我权利意识觉醒的重要原因。在汽车兴盛之前拉车的马匹造成了非常严重的环境污染，汽车反而是极其环保的选择。</li>
<li>严峻复杂的问题很可能有一个超级简单的解决方案，十七世纪的欧洲医院医生洗手可以极大地（至少60倍）降低产褥热致死的可能；包皮环切手术可以降低异性性交中男性感染艾滋病的可能性，降幅达到60%。看似有益的活动可能会间接导致坏的结果，911恐怖袭击后许多人选择不坐飞机，自己开车出行，各种因素综合，导致更多的交通致死事故。</li>
<li>可是，政府不喜欢寻求更便宜，更简单的解决方案，相反，往往倾向于选择代价高昂、麻烦棘手的策略。</li>
<li>统计分析出的Pattern可以揭示很多意想不到的、有趣的甚至有巨大作用的结论，比如帮助政府发现恐怖分子。</li>
<li>卖肉行为也需要讲究经济学原理……</li>
</ul>
</li>
<li>《激荡三十年（上）》吴晓波 &amp;</li>
<li><p>《激荡三十年（下）》吴晓波</p>

<ul>
<li>自1978年改革开放以来，中国经济突飞猛进，摸着石头过河让这片蓝海充满了危险、机遇以及不确定性，然而混沌孕新生，乱世出英雄，一大批企业家们迅速地完成了原始积累；当然，我们也不能忘记路边的累累白骨：他们都是国富民强最直接的功臣，是新时代最伟大的英雄。</li>
<li>他们要么是想人之不敢想，打改革的擦边球，有勇气面对风险，风险有多大，他们最后就能取得了多大的成就；要么是运用专业头脑，引进外国的先进技术或者理念，步步为营。后生们想要有所建树，最简单直接的办法就是单点快速突破，继而精益求精。</li>
<li>书摘请见——<a href="http://www.puncsky.com/blog/2013/06/01/bo-lan-zhuang-kuo-de-gai-ge-kai-fa-shi-hua-%3C%3Cji-dang-san-shi-nian-%3E%3E-du-hou-gan/">波澜壮阔的改革开放史话——《激荡三十年》读后感</a></li>
</ul>
</li>
<li><p>《山居笔记》 余秋雨</p>

<ul>
<li>这本书我估计总共读了十来遍。我很喜欢余秋雨写文章的风格：阅读大量的文献，甚至实地考察，厚积而薄发，同时自己炽热的人文关怀也喷薄而出，最后落笔生花。</li>
<li>我很讨厌因为所谓的“道德问题”而否认一个人艺术成就的喷子。学者不拿纳税人的钱，不需要向人民大众负责，欺负手无缚鸡之力的老实人，很好玩么？真要想做点什么，前面右转是政府。</li>
</ul>
</li>
<li><p>《大败局》 吴晓波</p>

<ul>
<li>我始终觉得，失败的经验比所谓的成功的经验或许更加难能可贵。</li>
<li>以下是简短的书摘：

<ul>
<li>在摆脱旧体制铁链束缚的改革之初，激情——一代百无禁忌的弄潮儿的激情曾经拯救了整个中国企业界的脸面，然而很快，激情所散发的负面作用，令中国企业陷入前所未有的迷茫与冲动之中。</li>
<li>随着中国市场的开放及知名跨国品牌的进入，随着市场的日趋规范及竞争台阶的提高，随着网络年代的到来及知识更新速度的加快，中国企业界终于迎来了激情年代的终结，一代草创型的民营企业家也将面临被集体淘汰的命运。</li>
<li>共同的“失败基因”

<ol>
<li>普遍缺乏道德感和人文关怀意识，功利的、不择手段的理想主义者</li>
<li>普遍缺乏对规律和秩序的尊重。如果人人都不按牌理出牌，那么还要牌理干什么？一个老是不按牌理出牌的人，还有谁愿意跟他玩牌？</li>
<li>普遍缺乏系统的职业精神。中国企业家要真正成为这个社会和时代的主流力量，那么首先必须完成的一项工作&#8211;一项比技术升级、管理创新乃至种种超前的经营理念更为关键的工作，是塑造中国企业家的职业精神和重建中国企业的道德秩序。</li>
</ol>
</li>
<li>任何一家企业已不可能仅仅靠一个创意或一则神话取得成功。知识、理性成了新经济年代最重要的生存法则。</li>
<li>企业的成长经验与行业是无关的。无论你是一家传统的生产果冻的工厂，还是一家吸引风险投资的网络公司，企业在成长过程中面临的台阶，有很多是具有共性的。每一个企业、每一个新兴的产业都有自己的狂飙期，有自己的激情年代。我们现在正身临其境的数字化年代，不也处在一个激情的洪流中吗？此起彼伏的网站公司、令人眼花缭乱的网络概念、给自己冠以CEO、COO或首席执行官等新鲜名词的新兴企业家，谁能告诉我们，究竟要过多久，他们中的多少人以及他们的企业也将会出现在失败者的名单中呢？</li>
<li>在一个有点阴冷的深秋，在令人揪心的淫雨中，中国第一个立志打造电动轿车的中年人向陌生的我喋喋不休地述说着他的梦想，一个注定了将一无所获的荒唐梦想。一个只有小学文化程度的中国农民耗尽了他的前途、生命和金钱，无怨无悔地用原始的榔头和机床去奋力摘取现代工业的明珠。在那个时候，我背过身去，禁不住潸然泪下。</li>
<li><strong>斯蒂芬·茨威格曾在《人类群星闪耀时》中写道：&#8221;一个人命中最大的幸运，莫过于在他的人生中途，即在他年富力强的时候发现了自己生活的使命。&#8221;</strong></li>
</ul>
</li>
</ul>
</li>
<li><p>《神雕侠侣》 金庸</p>

<ul>
<li>某天海神波塞冬同学表示最近在重温神雕侠侣。后来我也就跟着看看，因为我武侠小说读得太少，尽管金庸群侠传已经玩了好几十遍了。</li>
<li>感觉金庸小说大多是一种种打怪升级的模式，剧情由一个个委屈或者误会牵着人往前走。古龙的小说像满级之后的网络游戏，需要去未知的世界探险，剧情由一个个谜团诱惑着人向前探索。</li>
</ul>
</li>
<li>《自控力》 Kelly McGonigal

<ul>
<li>虽然原始冲动对我们并不总是有利，但不应该彻底摆脱他们，如果没有了欲望，人们就会变得沮丧；如果没有了恐惧，人们就无法保护自己；如果你心里在想其他事，那么冲动就会主导你的选择。查邮件是为了缓解不安，人们还以为自己是在获取信息呢。观察自己是如何屈服于冲动的，甚至都不用设置目标，关键是及早意识到自己在做什么，有怎样的想法、感受或者情况让你最容易让你有冲动。想些什么最容易让你放弃冲动。</li>
<li>意志力是可以锻炼的，甚至是可以被欺骗的。</li>
<li>可以为那些容易放纵去做的事情增加难度，提前纳税。</li>
<li>冥想是提高注意力的极佳方式。</li>
<li>遇到诱惑时三思而后行，把动作放慢，想清楚了再行动。</li>
<li>心率变异度能很好得反应意志力的程度。比如，当我看到牛排的时候心率升高很多，说明我的意志力很强。</li>
</ul>
</li>
<li>《欢喜》 吴伯凡、梁冬

<ul>
<li>一直很喜欢“冬吴相对论”，跑步的时候会听。当然他们会讲得很玄，或者讲得不对，但是总觉得<strong>两个文化人用知识耍宝，还真是相当有趣相当可爱的一件事情呢！</strong></li>
<li>“欢喜”的秘密是，承认现实如来，然后立马去改！从此我又多了一个人生法门。</li>
</ul>
</li>
<li>《黑客与画家》 Paul Graham

<ul>
<li><strong>这本书当然是需要反复咀嚼的……</strong> 值得单独做书摘。</li>
</ul>
</li>
<li><p>《了不起的盖茨比》 Francis Scott Key Fitzgerald</p>

<ul>
<li>第一次了解这本书是因为译者巫宁坤先生曾经是我们国际关系学院的教授，他曾写过一本控诉体制的回忆录《一滴泪》。第二次了解这本书是我的发小，肖中正同学，他曾读过这本书。第三次了解这本书是在耶鲁的伯克利学院吃饭的时候，免费获取了刻着&#8221;Drop it like F Scott&#8221;的腕带。当大家都涌向电影院的时候，我觉得是时候细细品味原著了。</li>
<li>作为一个替《飞越疯人院》主角分析如何成功逃离疯人院的无聊的人，我会不自觉的思考，盖茨比如何才能活下来。整个故事的叙述者“我”应该负很大的责任，如果那个“我”是我的话，我肯定第一时间就把我知道的关于黛西和汤姆的情况告诉盖茨比了……</li>
<li>彭老师当然地就很深刻地谈论起了“旧钱永远融不进新钱”之类的 insights（高见）。</li>
<li>最喜欢的是最后一句话，“<strong>于是，我们奋力向前划，逆流向上的小舟，不停地倒退，进入过去。</strong>”(So we beat on, boats against the current, borne back ceaselessly into the past.) 与我的座右铭(He who strives on and lives to strive can earn redemption still.)非常契合！<strong>一个人的不断努力奋进，最后其实能做到的仅仅是救赎自己罢了，但是即便这样，也足够了吧。</strong></li>
</ul>
</li>
<li><p>《观念的水位》 刘瑜</p>

<ul>
<li>我最推崇刘瑜的一点是，<strong>把真正有用的道理说得有趣</strong>。关键是“真正有用”，什么是”有用”？愤怒的青年有理有据的吐槽有用么？有一点点用。可是难道不是<strong>在指出问题的同时附带解决方案更有用</strong>么？不要跟我谈道德，一方面，道德不需要谈，道德本身大多数就是一目了然、不言自明的；另一方面，一心让臣民行善的暴君可能是最专制的暴君。即便是臣子，当年看《窃明》一书的时候，就深感明末时期东林党人之可恶，拿道德当令箭，谋一己之私。所以<strong>我很喜欢看刘瑜和龙应台的文章，不仅告诉你什么是丑，更重要的是告诉你什么是美，如何去做到美；与之相对的是，我是如此恶心798那群只会展现丑恶的艺术作品。</strong>这个值得单独写一篇文章，题目我都想好了，叫《淡淡的愚昧不忧伤——点亮一支蜡烛，胜过无数次的咒骂黑夜》。</li>
</ul>
</li>
</ol>


<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[波澜壮阔的改革开放史话——《激荡三十年》读后感]]></title>
    <link href="http://www.puncsky.com/blog/2013/06/01/bo-lan-zhuang-kuo-de-gai-ge-kai-fa-shi-hua-%3C%3Cji-dang-san-shi-nian-%3E%3E-du-hou-gan/"/>
    <updated>2013-06-01T11:32:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/06/01/bo-lan-zhuang-kuo-de-gai-ge-kai-fa-shi-hua-<<ji-dang-san-shi-nian->>-du-hou-gan</id>
    <content type="html"><![CDATA[<p>自1978年改革开放以来，中国经济突飞猛进，摸着石头过河让这片蓝海充满了危险、机遇以及不确定性，然而混沌孕新生，乱世出英雄，一大批企业家们迅速地完成了原始积累；当然，我们也不能忘记路边的累累白骨：他们都是国富民强最直接的功臣，是新时代最伟大的英雄。</p>

<p>他们要么是想人之不敢想，打改革的擦边球，有勇气面对风险，风险有多大，他们最后就取得了多大的成就；要么是运用专业头脑，或者引进外国的先进技术或者理念，步步为营。后生们想要有所建树，最简单直接的办法就是单点快速突破，继而精益求精。</p>

<p>以下是我整理的一些摘录。</p>

<!-- more -->


<h2>《激荡三十年》摘录</h2>

<p>作者：吴晓波</p>

<p>1</p>

<p>到(1982年)8月，一个被隐瞒了大半年的重大企业事故突然遭到处理，这无疑又成为当年最引人注目的新闻事件。这个企业事故是发生于上一年11月24日的渤海2号钻井船翻沉事故。在那次恶性事件中，因为管理和指挥上的不当（当时的用词是“官僚主义”），造成72名石油工人的死亡。公布的材料显示，渤海2号钻井船从国外购买后，在7年时间里，很多技术资料和操作规程都没有被翻译过来，工人对科学操作根本没有概念，而上级则动不动搞“大会战”或“打擂比武”，“用过去搞政治运动中的某些不恰当办法来搞生产建设”。在翻船事件发生后，各个管理层面又互相推诿以致耽误了抢救时间，让70多个工人被活活冻死在海上。国务院以一种超乎寻常的高调来处理“渤海2号事件”，全国几乎所有的媒体都对此进行了声讨式报道。石油部长被免职，主管石油的副总理、50年代大庆会战的功臣康世恩被公开处以记大过处分。在石油部的公开检讨中甚者还披露，“自1975年以来，海洋局曾经发生各类大小事故1042起，其中重大事故33起，但是我们一直没有严肃对待”。</p>

<p>2</p>

<p>因走私而完成灰色的原始积累，是当年东南沿海乡土经济萌芽的重要推动因素，关于这一点始终未被学界注意到。1980年前后，全国走私最猖獗的地方，一是浙江温州、台州地区，二是福建的潮汕地区，它们也因而成为当时商品经济起步最快、民营经济最活跃的区域。新华社记者魏运亨曾这样描述福建沿海的走私景象：当时每天停泊和游弋于东沙岛海域的港台走私船达几十艘，前往交换的大陆走私船则多达上百艘。电子表和尼龙布料涨潮般涌进内地，黄金和银元则退潮般滚滚外流。成千上万的群众如痴如狂，沿海城乡形成了好几个远近闻名的私货集散市场。</p>

<p>3</p>

<p>陈春先去了著名的硅谷和波士顿128号公路，他深深为那两个地方高科技公司的繁荣而心动不已。报国心切的陈春先直觉地认为，中国也应该有自己的硅谷，让那些沉睡在实验室里的科技成果可以转化成为市场价值的商品。回国后，他多次在各种场合发言呼吁。在他的方案中，甚至已经圈定了“中国硅谷”的地点，那就是他工作所在的中关村。</p>

<p>4</p>

<p>通过“三产”和“停薪留职”所带来的人员飞流固然可以让迫在眉睫的冗员难题得到暂时的缓解，但是却从根本上造成了国有企业内部的人心涣散，没有人愿意再老老实实地专注于自己的工作岗位，企业的核心能力被轻易地放弃在一边。所有的人在八小时内懒懒散散，下班之后却如鱼得水，十分活跃。如一位经济学家所观察到的：“工作单位”的工人一般都缺乏进取心、懒惰怠慢，要睡三小时的午觉。但在家里，这些人却会忙于养鸡或制造家具或其他工艺，以留做自用或出售给朋友和亲友。</p>

<p>5</p>

<p>通用电气公司新上任的CEO杰克·韦尔奇前去洛杉矶边上的一个小城市拜访当世最知名的管理学家彼得·德鲁克，求教应该如何整合上千家下属公司，德鲁克教了他一个小招式：“你手下的公司有没有价值，你只要看有没有人愿意花钱来买它就是。”回去后，韦尔奇就提出了“第一第二”战略：通用旗下各公司如果不能成为行业第一或第二，就将被清除出局。在英特尔公司，总裁格鲁夫开始构筑高度组织化和整体化的公司架构，他甚至提出了“唯有偏执狂才能生存”的理念。</p>

<p>6</p>

<p>通用电气公司新上任的CEO杰克·韦尔奇前去洛杉矶边上的一个小城市拜访当世最知名的管理学家彼得·德鲁克，求教应该如何整合上千家下属公司，德鲁克教了他一个小招式：“你手下的公司有没有价值，你只要看有没有人愿意花钱来买它就是。”回去后，韦尔奇就提出了“第一第二”战略：通用旗下各公司如果不能成为行业第一或第二，就将被清除出局。在英特尔公司，总裁格鲁夫开始构筑高度组织化和整体化的公司架构，他甚至提出了“唯有偏执狂才能生存”的理念。</p>

<p>7</p>

<p>步鑫生很快发明了一些朗朗上口的“改革顺口溜”：分配原则是“日算月结，实超实奖，实欠实赔，奖优罚劣”，生产方针是“人无我有，人有我创，人赶我转”，管理思想是“生产上要紧，管理上要严”，经营思路是“靠牌子吃饭能传代、靠关系吃饭要垮台”、“谁砸我的牌子，我就砸谁的饭碗”、“治厂不严、不逼，办不出立足坚稳的企业。不管、不紧，到头来，工厂倒闭，大家都受害”。这些朴素而容易背诵的改革格言迅速传遍全国，成为许多企业挂在厂内的标语口号和企业精神。步鑫生的这些观念对于无数白手起步的民营企业主算得上是一堂最最生动的启蒙课，日后，很多在那个时期创业的企业家都回忆说，正是步鑫生的这些话让他们第一次接受了市场化商业文化的洗礼。</p>

<p>8</p>

<p>日本汽车最大的创新是“精益生产”和“零库存”。戴维·加文发表在9月号《哈佛商业评论》上的论文《处于危险中的质量》更是证实了这个判断，他在论文中披露了一个让人很吃惊的数据：根据他对所有美国和日本空调生产商的研究，日本公司的平均装配线差错率比美国公司低70倍，最差日本公司的故障率也要比最优的美国制造商故障率的一半还要低；在矿工率方面，美国公司平均为3.1%，而日本公司则为零。很显然，这些年日本崛起不是偶然的原因，他们在制造线的严谨和苛刻得到了回报。从戴维·加文及很多经济学者的调研来看，美国要在质量、现场管理和成本上战胜日本人几乎是不可能的事情——最多也就打一个平手。这是一个让人近乎绝望的结论。美国的企业家还将在这种绝望中沉浸多年，直到七年后他们在信息产业重新找回自信和优势。</p>

<p>9</p>

<p>戴尔和思科的出现，基本上代表了日后新技术公司的两种成长路径：独一无二的商业渠道模式，或高度垄断的核心技术优势。由此我们可以看到，中国公司与美国公司之间的距离，并不在于创始资本的大小，而在于各自对产业成长的视野和理解的差距。</p>

<p>10</p>

<p>”国有企业家“既要找市场，又要找市长”——这句妙论就是从这里出来的，它后来成了所有国有企业经营者的不二法门。</p>

<p>11</p>

<p>温州商品的质量低劣，在很早的时候就被人所诟病。此地与福建晋江、广东石狮被并列为全国“三大制假中心”（还有人将充斥低劣电脑产品的中关村也列入其中，并称“四大假”），其中尤以温州名声最大。早在1985年前后，温州出产的皮鞋、皮带便以质量低劣而闻名。1987年8月8日，不堪其忧的杭州人在闹事中心的武林门广场点起一把大火，将5000多双温州的假冒劣质鞋一起烧掉，构成一桩轰动全国的新闻。</p>

<p>12</p>

<p>20年前的北京亚运会对北京政府是一个福音，体育再次展现出它推动经济繁荣的能力。”在这一届的运动会上，年轻的计算机产业展示了自己的成果，长城、联想等公司自主开发了运动会所需的软件系统，90%的计算机采用了国产货。不过，为了防止出现意外，组委会还是请IBM公司来承担信息备份的工作。</p>

<p>13</p>

<p>牟其中将他的这套理论一再地付诸行动，他策划了一大堆听上去就吓死人的“宏大计划”，其中包括将喜马拉雅山炸开一个宽50公里、深2 000多米的口子，把印度洋的暖湿气流引入中国干旱的西北地区，使之变成降雨区。在整个90年代，牟其中一直是媒体的焦点，他获得了“中国十大民营企业家”、“中国改革风云人物”、“中国十大实业家”等众多称号；南德集团被称为“中国改革开放的试验田”、“中国真正的民营企业”；在1994年，美国《福布斯》杂志将牟其中列入当年度的全球富豪龙虎榜，位居大陆富豪第四位；同年，中国的一本名为《财富》的民间杂志把他定为“中国第一民间企业家”和“大陆超级富豪之首”，这位充满商业想象力和改革空想热情的四川人也因此成为第一个被冠以“中国首富”的企业家。</p>

<p>14</p>

<p>安德鲁·S·瑞普波特和S·哈利维在《哈佛商业评论》上发表了《不生产计算机的计算机公司》，瑞普波特和哈利维在开始就断言，“这种竞争力的减弱是不确定的，但是这种恐惧却是不应该有的”。而随后他们做出的预言在十年后看来几乎就是事实本身：“到2000年，最成功的计算机公司将不再是那些生产计算机的公司，而是那些购买计算机的公司，这些领导者将充分利用价格低、性能高的硬件来创造和提供新的应用。” 他们尖锐地指出，美国在生产份额上的减少，“对于众多顶级的计算机公司来说是个好消息&#8211;假如它们忘记过去，并对技术、生产和营销战略进行重新定位来迎接新的现实。美国计算机公司的战略目标不应该是制造计算机，而应该是在计算机中创造永恒的价值”。</p>

<p>15</p>

<p>毛振华是陈东升在武汉大学经济系读书时的同班同学，他在中南海的国务院政策研究室上班，到了周末经常晃晃悠悠地骑着自行车到崇文门陈东升的家瞎聊，夜深了便抵足而眠。就在陈东升办嘉德的半年后，他下海创办了中国第一家评估公司——中国诚信证券评估有限公司，他的目标是要做中国的标准普尔和穆迪。在物资部对外合作司工作的田源是陈和毛高三届的校友，他在12月创办了中国第一家期货经纪公司—中国国际期货经纪公司。此前，田源是政府系统中对期货最有研究的专家，他在两年前受国务院发展研究中心选派，到美国科罗拉多大学和芝加哥期货交易所进行访问研究，他还是中国期货市场工作小组组长，正是在他的主导下，设计出了第一套期货管理条例，而就在这个条例颁布之后，田源创办了自己的公司。期货是一个高风险行业，成败往往转瞬达成，为了提醒自己和员工们注意控制风险，田源在公司的门口设计了一块“风险台地”，由凹凸不平的石头铺成，每日进出都磕磕绊绊的。</p>

<p>16</p>

<p>&#8220;在狂飙突进的多元化浪潮席卷下，企业家们似乎已经失去了认真、寂寞地做好一个产品的耐心。“我认为中国人有点急躁。”在中国沿海考察的日本管理学者大前研一有点担忧地说，“中国的机会太多了，以至于中国的企业家很难专注于某个领域，并在该领域作出卓越的成绩。但专注是赚钱的唯一途径。可口可乐专心做可乐，成为世界消费品领域的领先者，丰田专注于做汽车，成为日本利润最为丰厚的公司。进入一个行业，专业化，然后全球化，这才是赚钱的唯一途径。”这位亚洲地区唯一进入全球前十位国际级管理大师排行榜的学者还举例说，他曾在一家中国书店看到一本《西方百部管理经典》，竟然浓缩在200页的篇幅内。“只想阅读管理书籍的摘要，只想在5年之内就赶上日本花了50年所学的，这正是中国打算做的。可是，管理是一个连续反馈的过程，如果你只是这样‘浓缩’地学习，然后匆匆忙忙地采取行动，或者是让其他人对组织进行改造，这简直就像个‘人造的孩子’。”</p>

<p>17</p>

<p>“软文”是那种看上去像是新闻报道，实则是企业出钱刊登的广告文字，由于以“非广告”的形式出现，所以能够巧妙地规避《广告法》的限制，这是中国报业的一个怪胎。史玉柱亲手写了十多篇脑白金的“软文”，他宣称脑白金是人类“长生不老”的最后秘密，美国人正疯狂抢购脑白金，它还跟克隆技术一样是20世纪“生命科学的两大盛会”。当美国宇宙飞船升空的时候，他则杜撰说宇航员们正是因为吃了脑白金才改善了睡眠。在一段时间里，国内众多的县市报纸上都出现过脑白金的整版“致歉信”。当一个市场久攻不下的时候，史玉柱就会策划一场“免费赠送”活动，然后就致歉说，“由于低估了市民对脑白金的热忱，面对数以万计的市民到场，我们仅有的四十余名（根据不同情况填写人数）维护秩序人员手足无措，加之烈日的蒸烤，最终导致现场失控，护栏挤倒，保安冲散，十余人挤丢鞋子，用于赠送的脑白金被哄抢，甚至出现近10人受伤（皮外伤）的悲剧。这是我们最为心痛和始料不及的。”接下来当然就是紧急送货以缓消费者之饥渴。那是一个非常感性和冲动的消费群体，没有人抵挡得住史玉柱式的广告诱惑。</p>

<p>18</p>

<p>在过去30年的中国企业家群体中，有三个很独特而耐人寻味的人文情结，一个是“毛泽东情结”，一个是“红顶商人”情结，还有一个便是“儒商情结”。这些情结的弥漫，一方面诱发了公众对企业界群体不切实际的期望，另一方面也让企业家自身陷入了自恋式的道德迷圈之中。一个很突出的现象是，凡是“儒商”涌现最多的地方，往往是那些最热门灰色、最有暴利倾向的行业。《中国经营报》的记者曾发现一个秘密：中国的地产巨头几乎都自诩为儒商，而京城地产界更是“理念人人有，儒商遍地走”。</p>

<p>19</p>

<p>这年，全美最畅销的商业图书室吉姆·柯林斯出版的《从优秀到卓越》，其讨论的主题便与此有关。7年前，柯林斯因写出了《基业长青》而成为当代最重要的商业思想家之一。在新著中，他对1965年以来《财富》杂志历年500强排名中的每一家公司（共1400多家）逐一分析，从而得出了一些让人意外的结论。柯林斯发现，公司实现从优秀到卓越的转变，跟从事的行业是否在潮流中没有关系。事实上，即使是一个从事传统行业的企业，即使它最初默默无闻，它也可能变得卓越。他得出的其他结论还包括：“技术以及技术推动的变革，实际上并不能激发从优秀到卓越的跨越”；“合并和收购在推动公司跨越过程中并没有起到任何作用”；“革命性的跨越，不一定需要革命性的过程”；“卓越并非环境的产物，在很大程度上，它是一种慎重决策的结果”。</p>

<p>20</p>

<p>中国经济不可遏止的成长态势到底是靠什么支撑的？答案来自两个方面，一时“中国制造”的外貌强劲拉动，二是以房地产为龙头的内需市场的旺盛。</p>

<p>21</p>

<p>当年那个因写作《中国往何处去》而坐牢的“红卫兵”杨曦光如今已成为著名的经济学家杨小凯，他提出的“后发劣势”理论引起了广泛的讨论。 他认为，落后国家由于发展比较迟，所以有很多东西可以模仿发达国家。模仿有两种形式，一种是模仿制度，另一种是模仿技术和工业化模式。由于模仿的空间很大，所以可以在制度不够完善的条件下，通过对技术和管理模式的模仿，取得发达国家必须在一定制度下才能取得的成就。特别是，模仿技术比较容易，模仿制度比较困难，因为要改革制度会触犯一些既得利益，因此落后国家会倾向于技术模仿。杨小凯进而警告说，“但是，落后国家虽然可以在短期内取得非常好的发展，但是会给长期的发展留下许多隐患，甚至长期发展可能失败。这种短期的成功，可能又是‘对后起者的诅咒’，它用技术模仿代替制度改革将产生很高的长期代价。譬如，政府垄断银行业、保险业、汽车制造业、电信业，并且模仿新技术和资本主义的管理方法来替代制度改革，这是中国的后发劣势。这种后发劣势的最重要弊病并不是国有企业效率低，而是将国家机会主义制度化，政府即当裁判，又当球员。在这种制度下，国有企业效率越高，越不利于长期经济发展。” 在解决方案方面，杨小凯并不在主张立即就搞国有企业私有化。他认为，“这个东西不能搞得太快、太早，我主张吸取台湾的经验，搞自由化，就是对私人企业不歧视。我们中国大陆现在包括银行、证券在内的三十多个行业不准私人经营，还有二十多个行业限制私人经营，这些都与WTO的原则不相符合，迟早要去掉的。所有只需搞自由化而不必搞私有化。台湾自由化搞得差不多了，才搞大企业的私有化。这是成功的。私有化涉及产权的大的变动，短期内一般会使效率下降，所以应该慎重，而且应该掌握时机。但是自由化是可以提早搞的。这里讲的自由化不是指自由价格，而是实行自动注册制，让私人经营所有行业。”杨小凯的这些分析和主张与吴敬琏11年前就已经提出的“制度大于技术”的改革观念如出一辙，无非杨小凯的论调在此时显出更紧要的迫切性。</p>

<p>22</p>

<p>（2005年）11月11日，在美国旧金山附近的小城克莱蒙特，当世界最伟大的管理学大师彼得·德鲁克在酣睡中悄然去世，终年95岁。此刻，与他同时代的那些伟大思想家正聚集在天堂的门口一起等待这位最后的迟到者，马尔库塞已经等了26年，萨特等了25年，福柯等了20年，连长寿的卡尔·波普和哈耶克也分别等了10年和13年，至此，二战之后出现的思想巨人都已成为历史。在过去的10年里，这位以“旁观者”自居的管理学家与通用电气的前CEO杰克·韦尔奇是最受中国企业家追捧的商业智慧人物，人们从他那里学到了创新、科学管理、知识工人等新名词，但是大家到底听懂了多少他讲的话确实另一回事。他的去世让商业界的观察家们很是沮丧了一阵，“德鲁克死了，接下来轮到谁来提我们思考管理？”德鲁克在晚年开始关注遥远的、他从未曾到达过的中国。在去世前的一个月，他还写下了“欢迎加入彼得·德鲁克研究会西安企业家联谊会”的祝词，那时，他的身体已经极度衰弱，每天昏睡超过18个小时。</p>

<p>23</p>

<p>“公司从优秀到卓越，跟从事的行业是否在潮流之中没有关系，”吉姆。柯林斯在《从优秀到卓越》中发现的这条公司定律在首富的观察中仍然生效。</p>

<p>24</p>

<p>“那些没有消灭你的东西，会使你变得更强壮。”德国哲学家尼采的名言应该可以成为这些企业家共同的生存格言。</p>

<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生十愿]]></title>
    <link href="http://www.puncsky.com/blog/2013/05/14/ren-sheng-shi-yuan/"/>
    <updated>2013-05-14T04:18:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/05/14/ren-sheng-shi-yuan</id>
    <content type="html"><![CDATA[<p>毕业啦！</p>

<p>世事总不尽如人意，而贪心如我者，尝试写下人生的十个愿望；倘若某日能够实现十之八九，也就算是此生无悔啦！</p>

<ol>
<li>月高风黑的时候总是可以拉上三五好友宵夜。老到住进养老院的时候总有大爷大妈陪着打麻将。</li>
<li>亲朋好友，还有我，都能够快乐健康地活着，不求有多大的出息，但求日子过得欢喜，无论多舒适还是多苦逼，都能够坚持自己选择的路，得瑟得瑟屁颠屁颠地走下去。</li>
<li>有个萌妹子一起玩儿，我们都有健美的体魄心态和性格，开开心心玩上一辈子。</li>
<li>拥有一家自己的互联网公司，创造有趣有用的产品，这是时代赋予青年们的使命。感激上苍让我们CSer成为时代的弄潮儿。</li>
<li>拿到一个PhD学位，不仅是因为“谁有知识我就对谁佩服得五体投地”，而且理想主义的说，他们至少对人类知识做出了一丁点儿的贡献。完全没有贡献？那就不要浪费时间啦！</li>
<li>写一本好书、绘一幅好画、填一篇好诗词、吟一支小曲儿、拍一部好电影。</li>
<li>有精力、财力或者智力帮助他人，尤其是年轻人。</li>
</ol>


<p>剩下的三个，以后再许！</p>

<p>EOF</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamo: Amazon's Highly Available Key-value Store (SOSP'07)]]></title>
    <link href="http://www.puncsky.com/blog/2013/04/06/dynamo-kv-store/"/>
    <updated>2013-04-06T14:16:00-07:00</updated>
    <id>http://www.puncsky.com/blog/2013/04/06/dynamo-kv-store</id>
    <content type="html"><![CDATA[<p>From <a href="http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html">Amazon</a></p>

<h3>Comments</h3>

<p>Dynamo successfully builds a highly available and scalable data store, which sacrifices consistency under certain failure scenarios but the data storage is still eventually consistent. The system is complex and thus this paper involves a huge number of details. However, the paper could not specify all of them. Some interesting parts seem to be missing. What are the supporting techniques used in Dynamo? How is it compared to other existing KV distributed store systems? Are there any possible extensions or future works?</p>

<p>This paper assumes that security concerns can be ignored for its internal use. Theoretically, security problems is still possible. At least, how can the administrator detect sybil attacks?</p>

<p>The author tried three partition schemes. The latter versions decouple partitioning and partition placement. The placement is changeable at run time. Consequently, the strategy 3 has a better efficiency. And the system recovers faster and it is easier to archive. However, the key space is partitioned equally into Q partitions, and every node assume Q/S tokens per node. The strategy 3 in Figure 7 is a little confusing. The author should specify that the span each node is responsible for is SIMILAR IN SIZE to each other, instead of exactly EQUAL IN SIZE to each other.</p>

<!--more-->


<h3>1. Problem</h3>

<ul>
<li>How to build a highly available key-value storage system (which will be applied to productions with demanding applications)?</li>
<li>Assumptions:

<ol>
<li>Query model: Simple KV store with read/write operations on small objects (&lt;= 1 MB).</li>
<li>ACID properties: Weak consistency and no isolation guarantees for high availability.</li>
<li>Efficiency: Commodity machines. Stringent latency requirements specified by SLAs.

<ul>
<li><strong>SLA</strong> (service level agreements): a client/server agreement on clear bounds

<ul>
<li>SLA should NOT be stated in terms of mean/median response time (Some custom with longer history may require more processing and thus the performance may be ignored.)</li>
<li>Dynamo: <strong>99.9%</strong> of the distribution based on a cost-benefit analysis.</li>
<li>Can be customized.</li>
</ul>
</li>
</ul>
</li>
<li>No security concerns: because of internal use.</li>
</ol>
</li>
</ul>


<h3>2. Challenges</h3>

<ul>
<li>How to achieve a strongly consistent data access interface?

<ul>
<li>Data replication algorithms. Strong consistency and high data availability cannot be achieved simultaneously. Traditionally, consistency comes first.</li>
</ul>
</li>
<li>How to increase availability on failure-prone commodity clusters?

<ul>
<li>Optimistic replication techniques -> conflicting changes to be resolved -> <strong>WHEN</strong> and <strong>WHO</strong>?

<ul>
<li><strong>WHEN</strong> during writes or reads?

<ul>
<li>Traditionally, conflict is resolved during writes and keep the read complexity simple.</li>
<li>Dynamo: rejecting writes -> poor customer experience: writes should never be rejected. <strong>(always-writable)</strong></li>
</ul>
</li>
<li><strong>WHO</strong> data store or the application?

<ul>
<li>data store: ONLY last write wins (the choice is limited)</li>
<li>the client: more flexible</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Others

<ul>
<li>Incremental scalability</li>
<li>Symmetry (P2P)</li>
<li>Decentralization</li>
<li>Heterogeneity</li>
</ul>
</li>
</ul>


<h3>3. Solution</h3>

<ul>
<li>Key ideas

<ul>
<li>Sacrifice consistency under certain failure scenarios but is eventually-consistent</li>
<li>object versioning</li>
<li>application-assisted conflict resolution</li>
</ul>
</li>
</ul>


<h4>3.1 System Architecture</h4>

<h5>Summary</h5>

<table border="1">
 <tbody><tr>
  <td>
  <p align="center"><b>Problem</b></p>
  </td>
  <td>
  <p align="center"><b>Technique</b></p>
  </td>
  <td>
  <p align="center"><b>Advantage</b></p>
  </td>
 </tr>
<tr>
  <td>
   <p align="center">Partitioning</p>
  </td>
  <td>
  <p align="center">Consistent Hashing</p>
  </td>
  <td>
  <p align="center">Incremental Scalability</p>
  </td>
 </tr>
 <tr>
  <td>
  <p align="center">High Availability for writes</p>
  </td>
  <td>
  <p align="center">
  Vector clocks with reconciliation during reads</p>
  </td>
  <td>
  <p align="center">Version size is decoupled from update rates.</p>
  </td>
 </tr>
 <tr>
  <td><p align="center">Handling temporary failures</p>
  </td>
  <td>
  <p align="center">Sloppy Quorum and hinted handoff</p>
  </td>
  <td>
  <p align="center">
  Provides high availability and durability guarantee
  when some of the replicas are not available.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p align="center">
  Recovering from permanent failures</p>
  </td>
  <td>
  <p align="center">Anti-entropy using Merkle trees</p>
  </td>
  <td>
  <p align="center">Synchronizes divergent replicas in the background.</p>
  </td>
 </tr>
 <tr>
  <td>
  <p align="center">Membership and failure detection</p>
  </td>
  <td>
  <p align="center">Gossip-based membership protocol and failure
  detection.</p>
  </td>
  <td>
  <p align="center">Preserves symmetry and avoids having a centralized
  registry for storing membership and node liveness information.</p>
  </td>
 </tr>
</tbody>
</table>


<ul>
<li>System Interface

<ul>
<li><em>[object/list of objects with context] get(key)</em></li>
<li><em>put(key, context, object)    // context encodes system metadata about the object</em></li>
<li>context and object are opaque</li>
<li>MD5</li>
</ul>
</li>
<li>Dynamic Partition

<ul>
<li>Introduce <em>virtual nodes</em> as a variant of consistent hashing.</li>
</ul>
</li>
<li>Replication

<ul>
<li>Every <strong>coordinator</strong> node stores data locally and replicates them at the following <em>N-1</em> nodes in the ring.</li>
<li>The N physical machines forms a <strong>preference list</strong>.</li>
</ul>
</li>
<li>Data Versioning</li>
<li>(Successful) Execution of put() and get()

<ul>
<li>HTTP request</li>
<li>How to select a node? two ways:

<ol>
<li><strong>load balancer</strong> route it to any random node in the ring. If the node is not in the top N of the requested key&#8217;s preference list, the request is forwarded to the first among the top N nodes in the preference list.</li>
<li><strong>partition-aware client library</strong> route it directly to the coordinator</li>
</ol>
</li>
<li>R: min number of nodes that must participate in a successful read.</li>
<li>W: min number of nodes that must participate in a successful write.</li>
<li><em>R+W>N</em> -> quorum-like system</li>
<li>How to define a successful write?

<ul>
<li>> = W-1 nodes respond</li>
</ul>
</li>
</ul>
</li>
<li>(Unsuccessful) Execution of put() and get()</li>
<li>Membership

<ul>
<li>DHT + virtual nodes

<h5>Implementation</h5></li>
</ul>
</li>
</ul>


<h5>Lessons Learned</h5>

<ul>
<li>Dynamo&#8217;s configurations

<ul>
<li>Business logic specific reconciliation</li>
<li>Timestamp based reconciliation</li>
<li>High performance read engine</li>
</ul>
</li>
<li><em>N, R, W</em>

<ul>
<li>N -> durability of each object</li>
<li>W, R -> availability, durability, and consistency</li>
<li>Dynamo: (3,2,2)</li>
</ul>
</li>
<li>Performance or Durability?

<ul>
<li>Durability can be sacrificed to lower the 99.9% latency by a factor of 5, in which object buffers will be periodically written to the disk by a <em>writer thread</em>.</li>
</ul>
</li>
<li>Load balance

<ol>
<li>T random tokens per node and partition by token value.

<ul>
<li>Schemes for partitioning and partition placement are intertwined.
a) adding a new node costs a lot but has a low priority (should not affect the customer performance) -> slow
b) key ranges change and Merkle trees (hash trees) need re-calculation.
c) randomness -> hard to archive the entire key spaces.</li>
</ul>
</li>
<li>T random tokens per node and equal sized partitions.</li>
<li>Q/S tokens per node, equal-sized partitions.</li>
</ol>
</li>
</ul>


<h3>4. Conclusion</h3>

<ul>
<li>“Always writable” asynchronous replication</li>
<li>Update may not propagate all replicas</li>
<li>put() creates a new and immutable version of data</li>
<li>get() may return multiple versions of data</li>
<li>Reconcile divergent versions</li>
<li>When: during reads</li>
<li>Who: system itself (syntactic reconciliation) client application (semantic reconciliation)</li>
</ul>


<p>EOF</p>
]]></content>
  </entry>
  
</feed>
