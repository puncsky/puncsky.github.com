<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: system | CS Notebook]]></title>
  <link href="http://puncsky.github.com/blog/categories/system/atom.xml" rel="self"/>
  <link href="http://puncsky.github.com/"/>
  <updated>2013-01-16T10:29:52-05:00</updated>
  <id>http://puncsky.github.com/</id>
  <author>
    <name><![CDATA[Tian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OS Notes]]></title>
    <link href="http://puncsky.github.com/blog/2013/01/14/os-notes/"/>
    <updated>2013-01-14T14:02:00-05:00</updated>
    <id>http://puncsky.github.com/blog/2013/01/14/os-notes</id>
    <content type="html"><![CDATA[<h2>2 OS Structures</h2>

<ul>
<li>Why would an application programmer prefer programming according to an API rather than invoking actual system calls?

<ul>
<li>portability</li>
<li>simplicity</li>
</ul>
</li>
<li>How to pass parameters to the OS?

<ol>
<li>(simplest but limited) in registers</li>
<li>in a block (Linux/Solaris)</li>
<li>pushed onto the stack by program / popped off the stack by OS</li>
</ol>
</li>
<li>6 types of system calls

<ol>
<li>process control,

<ul>
<li>end / abort</li>
<li>if a problem causes an error trap, a dump of memory is written to disk and may be examined by a debugger</li>
<li>command interpreter</li>
<li>error level</li>
<li>single-tasking / multi-tasking (有没有wait的区别)</li>
</ul>
</li>
<li>file manipulation,

<ul>
<li>CRUD</li>
<li>files and directories</li>
<li>attributes</li>
</ul>
</li>
<li>device manipulation,

<ul>
<li>physical and virtual(e.g. files) devices.</li>
<li>combined file-device structure</li>
</ul>
</li>
<li>information maintenance,

<ul>
<li>transfer info between the user program and OS</li>
<li>info about the OS</li>
<li>debug (dump memory and

<ul>
<li>single step CPU mode, a trap is executed by the CPU after every instruction. Caught by debugger.</li>
</ul>
</li>
<li><code>time ./program</code></li>
<li>info about a process</li>
</ul>
</li>
<li>communications, 2 models of interprocess communication

<ol>
<li>message-passing

<ul>
<li>simple and efficient for exchanging small amounts of data</li>
<li>hostid, netid, processid</li>
<li>client</li>
<li>server: receiving <strong>daemons</strong></li>
</ul>
</li>
<li>shared-memory

<ul>
<li>max speed but problems on protection &amp; sync</li>
<li>normally one process's memory is prevented from the access from others.</li>
<li>Agree to remove the restriction</li>
</ul>
</li>
</ol>
</li>
<li>protection.

<ul>
<li>set/get permission</li>
</ul>
</li>
</ol>
</li>
<li>System programs

<ul>
<li>file management</li>
<li>status info</li>
<li>file modification</li>
<li>programming language support</li>
<li>program loading and execution</li>
<li>communications</li>
</ul>
</li>
<li>DSDI

<ul>
<li>Design Goals: user/system goals</li>
<li>Mechanisms &amp; Policies: separate policy from mechanism

<ul>
<li>mechanism: how to do</li>
<li>policy: what will be done (may change) - parameters</li>
<li>microkernel-based OS as one extreme example (UNIX, OS X)</li>
</ul>
</li>
<li>Implementation: traditionally in assembly, now <em>most</em> in C/C++

<ul>
<li>Linux/windows mostly in C, small sections of assembly</li>
<li>high level language for portability, BUT slower in speed and larger in storage</li>
<li>Most critical for performance: memory manager and CPU scheduler</li>
</ul>
</li>
</ul>
</li>
<li>OS Structure: how components are melded into a kernel?

<ul>
<li>Simple structure

<ul>
<li>MSDOS, levels of functionality are not well separated.</li>
<li>Original UNIX</li>
</ul>
</li>
<li>Layered approach: less efficient</li>
<li>Microkernel approach

<ul>
<li>CMU Mach</li>
<li>microkernel provides communications between client programs and the services (Message Passing)</li>
<li>slower if system function overhead increases</li>
</ul>
</li>
<li>Modules

<ul>
<li>currently best with OOP</li>
<li>a core kernel + loadable kernel modules</li>
<li>modern UNIX (Solaris, Linux, MAC OS X)</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><a href="http://zoo.cs.yale.edu/classes/cs422/2013/ref/pc-arch">A Guide to Programming Intel IA32 PC Architecture</a></p>
]]></content>
  </entry>
  
</feed>
