---
layout: post
title: "System R: Relational Approach to Database Management"
date: 2013-01-28 12:11
comments: true
categories: 
published: false
---

### 1. Problem

How to achieve data independence & data control in DBS design and implementation with relational data model?

### 2. Challenges

No previous _complete_ RDBMS. Most of them focus on solving specific problems.

### 3. Solution

#### 3.1 Architecture Overview

- Relational Storage Interface (RSI) -internal-> tuples
	- on Relational Storage System (RSS)
- Relational Data Interface (RDI) <-external- outside PL, emulators, ...
	- SEQUEL language (as UFI) on top of RDI
	- on Relational Data System (RDS)
	- catalogs of external names
	- **optimizer**: choose an appropriate access path
	
#### 3.2 RDS

- Host Language Interface
	- SQL <-cursor-> host programming language: a cursor identifies a set of tuples called its _active set_
	- `SEQUEL(cursor, 'SQL query')` associate `cursor` with a set of resulting tuples
	- `FETCH(cursor)` tuples are retrieved one at a time
	- If the degree and data types are known in advance
		- `BIND('X', ADDR(X))` specifies the addresses of available variable X	
	- If not known in advance
		- `DESCRIBE(C1, DEGREE, P)` get from c1 the degree to DEGREE, and data types and lengths to the array pointer P points to
		- bind a new variable Q and `FETCH(C1, Q)` 
	- `OPEN(C1, 'EMP')` == `SEQUEL(C1, 'SELECT * FROM EMP');`
	- cursor remains active until `CLOSE` or `KEEP`. `KEEP` keeps tuples of a cursor to a new permanent relation in DB
	- `FETCH_HOLD` locks tuples in cursor
	- `RELEASE` cursor
	
``` sql 
	
	EMP(EMPNO, NAME, DNO, JOB, SAL, MGR)
	DEPT(DNO, DNAME, LOC, NEMPS)
	
	CALL BIND('x', ADDR(X));
	CALL BIND('Y', ADDR(Y));
	CALL SEQUEL(C1, 'SELECT NAME:X, SAL:Y
					 FROM EMP
					 WHERE JOB = "PROGRAMMER"')
	CALL FETCH(C1); -- fetch a name to x, and a salary to y
```
	
- Query Facilities 
	- `SELECT`
	- Based on [5], BUT:
	- replace block label notations with more symmetric notations
		1. Tuples are selected by `WHERE`
		2. Groups are formed by `GROUP BY`
		3. Groups are selected by satisfying `HAVING`
- Data Manipulation Facilities 
	- `UPDATE` `INSERT` `DELETE`
	- `KEEP` and assignment `<-`
	- `CURRENT TUPLE OF CURSOR`
- Data Definition Facilities
	- 
- Data Control Facilities
- Optimizer
- Modifying Cursors
- Simulations of Non-relational Data Model

#### 3.3 RSS

- Segments
- Relations
- Images
- Links
- Transaction Management
- Concurrency Management
- System Checkpoint and Restart

### 4. Conclusions 

### Related Readings

5.CHAMBERLIN, D.D., AND BOYCE, R.F. SEQUEL: A structured English query language. Proc. ACM SIGFIDET Workshop, Ann Arbor, Mich., May 1974, pp.  249-264.
