---
layout: post
title: "CryptDB: Protecting Confidentiality with Encrypted Query Processing"
date: 2012-11-26 19:45
comments: true
categories: 
---

[MIT CSAIL](http://css.csail.mit.edu/cryptdb/), [papers](http://people.csail.mit.edu/nickolai/papers/raluca-cryptdb.pdf), [slides](http://www.sigops.org/sosp/sosp11/current/2011-Cascais/07-popa.pptx)

### 1. Problem

Provide confidentiality for applications using DBMSes to solve two threats:

1. *Passive DB server attacks*. The curious database administrator (DBA) learns private data.
2. *Any attacks on all servers*. The adversary gains complete control over application and DBMS servers.

### 2. Challenges

1. Tension between confidentiality and efficiency. (Threat 1 + 2)
	- too slow or not enough confidentiality
	- incapable of executing SQL queries without giving keys to DBMS servers
2. Support user-shared data while minimizing data leakage when both application servers and DBMS servers are compromised.
	- “Different keys for different users” alone is not suitable for user-shared data.
	
### 3. Solutions

How to solve Challenge 1 (Threat 1+2) while still retaining data sharing (Challenge 2)?

Architecture Overview

![architecture overview](http://puncsky.github.com/images/cryptdb/arch.png) 

1. No plaintext in database at all.
2. Fine-grind keys chained to user passwords.
	
#### 3.1 Solution to Threat 1

##### 3.1.1 Execute SQL queries over encrypted data

Six types of SQL-aware encryption

SQL-aware encryption strategy with symmetric-key encryption (for efficiency).

1. Random (RND)
	- support indistinguishability under an adaptive chosen-plaintext attack (IND-CPA), same plain texts -> different cipher texts
	- AES / Blowfish in CBC mode, a random initialization vector (IV)
2. Deterministic (DET)
	- support equality checks, same plain texts -> same cipher texts
	- different keys for different columns to prevent cross-column correlations
	- Pseudo-random permutation (PRP), Blowfish for 64-bit block, AES for 128-bit block
	- AES in CMC mode (= one round of CBC + another round of CBC in reverse order), zero IV. (to prevent leakage of prefix equality in CBC mode)
3. Order-preserving (OPE)
	- support order relations. If x < y, then OPEk(x) < OPEk(y) for any secret key K.
	- Weaker. Thus, OPE-encrypted columns are revealed to the server only when the order query is needed.
	- Implementation and optimization of [Order-preserving symmetric encryption](http://www.cc.gatech.edu/~aboldyre/papers/bclo.pdf). Use AVL BST for batch encryption. 25 ms/encryption -> 7 ms/encryption
4. Homomorphic encryption(HOM)
	- retains IND-CPA while allows computations to be conducted on ciphertext and obtain an encrypted result which is the ciphertext of the result of operations performed on the plaintext.
	- UDF calling Paillier crytosystem
	- e.g. SUM: HOMk(x)*HOMk(y)=HOMk(x+y)
5. Join (JOIN and OPE-JOIN)
	- support joins between two columns (because of DET)
6. Word search (SEARCH)
	- support LIKE operation
	- A new implementation of the protocol from [Practical Techniques for Searches on Encrypted Data](http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=848445)
	- Proxy
		1. split texts to keywords
		2. remove repetitions
		3. randomly permute the positions of the words
		4. encrypt each of the words
		5. paddle each word to the same size
		6. send the encrypted words to the server as a token
	- Server can only know whether the token matches.

##### 3.1.2 Adjustable query-based encryption

However, the query set is not always known in advance. So we need to dynamically adjust a layer of SQL-aware encryption scheme for queries at runtime. **Onions of encryption**: different keys for different layers of onions. The proxy will not give all keys to the server at any time.

![onion encryption](http://puncsky.github.com/images/cryptdb/onion.png)

![table](http://puncsky.github.com/images/cryptdb/table1.png)

keys for each layer are calculated by

![keys](http://puncsky.github.com/images/cryptdb/calcKey.png)

- Encrypt data in one or more onions
- Multiple onions are needed in practice
- Onion decryption (stripe-off) happens only when operations on a column are required 
- Once a layer of decryption happens, the layer remains its new state until an update

###### a) Read query execution

1. Application server issues a query
	- SELECT ID FROM Employees WHERE Name = ‘Alice’
2. Proxy server anonymizes the query, and adjust encryption layers if stripe-off is needed
	- UPDATE Table1 SET C2-Eq = DECRYPT RND(KT1,C2,Eq,RND, C2-Eq, C2-IV)
3. DBMS server execute the adjusted query and return the results
	- SELECT C1-Eq, C1-IV FROM Table1 WHERE C2-Eq = x7..d
4. Proxy server decrypts the results and sends them to the user

###### b) Write query execution


	
#### 3.2 Solution to Threat 2

Chain encryption keys to user passwords

If the adversary do not know the user's password, the adversary cannot decrypt the user's data.

##### Solution to Challenge 2

Data Sharing with Multiple Principals

### 4. Implementation & Evaluation 

### 5. Conclusion

1. First practical DBMS to process most SQL queries on encrypted data
	- Hide DB from DBA, outsource DB
2. Protects data of users logged out during attack, even when all servers are compromised 
	- Limit leakage from compromised applications
3. Modest overhead: 26% throughput loss for TPC-C 
4. No changes to DBMS (e.g., Postgres, MySQL)

	






 